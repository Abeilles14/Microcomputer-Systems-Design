680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 07 Feb 2023      Time: 18:30:47          Source: C:\IDE68K\ASS2_PARTB\ASS2_PARTB.SRC

                       1          section   code
                       2   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       3   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       4   
                       5   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    6   StackPointerVal     equ $0C000000      when using dram
                       7   
                       8   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       9   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                      10   
                      11   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   12   RamVectorTable      equ $0B000000      when using dram
                      13   
                      14   
                      15   
                      16   ; CSTART.ASM  -  C startup-code for Debug Monitor
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  05AA 0B00 
00000490  00C4      
                     109   
                     110   
00000492  4EB9 0000  111   mainloop        jsr       _main
00000496  2AE2      
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
000004E2  23FC 0000  145                   move.l    #1,_Trace              switch on Trace Mode
000004E6  0001 0B00 
000004EA  00D8      
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
000004F4  33DF 0B00  147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
000004F8  012C      
000004FA  23DF 0B00  148                   move.l    (sp)+,_PC              get at the users program counter and copy
000004FE  0120      
                     149   *
00000500  23CF 0B00  150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
00000504  0124      
00000506  23C0 0B00  151                   move.l    d0,_d0
0000050A  00E4      
0000050C  23C1 0B00  152                   move.l    d1,_d1
00000510  00E8      
00000512  23C2 0B00  153                   move.l    d2,_d2
00000516  00EC      
00000518  23C3 0B00  154                   move.l    d3,_d3
0000051C  00F0      
0000051E  23C4 0B00  155                   move.l    d4,_d4
00000522  00F4      
00000524  23C5 0B00  156                   move.l    d5,_d5
00000528  00F8      
0000052A  23C6 0B00  157                   move.l    d6,_d6
0000052E  00FC      
00000530  23C7 0B00  158                   move.l    d7,_d7
00000534  0100      
                     159   *
00000536  23C8 0B00  160                   move.l    a0,_a0
0000053A  0104      
0000053C  23C9 0B00  161                   move.l    a1,_a1
00000540  0108      
00000542  23CA 0B00  162                   move.l    a2,_a2
00000546  010C      
00000548  23CB 0B00  163                   move.l    a3,_a3
0000054C  0110      
0000054E  23CC 0B00  164                   move.l    a4,_a4
00000552  0114      
00000554  23CD 0B00  165                   move.l    a5,_a5
00000558  0118      
0000055A  23CE 0B00  166                   move.l    a6,_a6
0000055E  011C      
00000560  4E68       167                   move.l    usp,a0
00000562  23C8 0B00  168                   move.l    a0,_USP
00000566  0128      
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
00000570  2039 0B00  175                   move.l   _d0,d0
00000574  00E4      
00000576  2239 0B00  176                   move.l   _d1,d1
0000057A  00E8      
0000057C  2439 0B00  177                   move.l   _d2,d2
00000580  00EC      
00000582  2639 0B00  178                   move.l   _d3,d3
00000586  00F0      
00000588  2839 0B00  179                   move.l   _d4,d4
0000058C  00F4      
0000058E  2A39 0B00  180                   move.l   _d5,d5
00000592  00F8      
00000594  2C39 0B00  181                   move.l   _d6,d6
00000598  00FC      
0000059A  2E39 0B00  182                   move.l   _d7,d7
0000059E  0100      
                     183   
000005A0  2079 0B00  184                   move.l   _USP,a0
000005A4  0128      
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
000005A8  2079 0B00  186                   move.l   _a0,a0
000005AC  0104      
000005AE  2279 0B00  187                   move.l   _a1,a1
000005B2  0108      
000005B4  2479 0B00  188                   move.l   _a2,a2
000005B8  010C      
000005BA  2679 0B00  189                   move.l   _a3,a3
000005BE  0110      
000005C0  2879 0B00  190                   move.l   _a4,a4
000005C4  0114      
000005C6  2A79 0B00  191                   move.l   _a5,a5
000005CA  0118      
000005CC  2C79 0B00  192                   move.l   _a6,a6
000005D0  011C      
                     193   
000005D2  2E79 0B00  194                   move.l   _SSP,sp
000005D6  0124      
000005D8  2F39 0B00  195                   move.l   _PC,-(sp)
000005DC  0120      
000005DE  3F39 0B00  196                   move.w   _SR,-(sp)
000005E2  012C      
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
0000070C  23FC 0000  307                   move.l    #1,_Trace      switch on Trace Mode
00000710  0001 0B00 
00000714  00D8      
00000716  33DF 0B00  308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
0000071A  012C      
0000071C  23DF 0B00  309                   move.l    (sp)+,_PC      get at the users program counter and copy
00000720  0120      
                     310   *
00000722  23C0 0B00  311                   move.l    d0,_d0
00000726  00E4      
00000728  23C1 0B00  312                   move.l    d1,_d1
0000072C  00E8      
0000072E  23C2 0B00  313                   move.l    d2,_d2
00000732  00EC      
00000734  23C3 0B00  314                   move.l    d3,_d3
00000738  00F0      
0000073A  23C4 0B00  315                   move.l    d4,_d4
0000073E  00F4      
00000740  23C5 0B00  316                   move.l    d5,_d5
00000744  00F8      
00000746  23C6 0B00  317                   move.l    d6,_d6
0000074A  00FC      
0000074C  23C7 0B00  318                   move.l    d7,_d7
00000750  0100      
                     319   *
00000752  23C8 0B00  320                   move.l    a0,_a0
00000756  0104      
00000758  23C9 0B00  321                   move.l    a1,_a1
0000075C  0108      
0000075E  23CA 0B00  322                   move.l    a2,_a2
00000762  010C      
00000764  23CB 0B00  323                   move.l    a3,_a3
00000768  0110      
0000076A  23CC 0B00  324                   move.l    a4,_a4
0000076E  0114      
00000770  23CD 0B00  325                   move.l    a5,_a5
00000774  0118      
00000776  23CE 0B00  326                   move.l    a6,_a6
0000077A  011C      
0000077C  4E68       327                   move.l    USP,a0
0000077E  23C8 0B00  328                   move.l    a0,_USP
00000782  0128      
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
0000078C  2039 0B00  336                   move.l   _d0,d0
00000790  00E4      
00000792  2239 0B00  337                   move.l   _d1,d1
00000796  00E8      
00000798  2439 0B00  338                   move.l   _d2,d2
0000079C  00EC      
0000079E  2639 0B00  339                   move.l   _d3,d3
000007A2  00F0      
000007A4  2839 0B00  340                   move.l   _d4,d4
000007A8  00F4      
000007AA  2A39 0B00  341                   move.l   _d5,d5
000007AE  00F8      
000007B0  2C39 0B00  342                   move.l   _d6,d6
000007B4  00FC      
000007B6  2E39 0B00  343                   move.l   _d7,d7
000007BA  0100      
                     344   
000007BC  2079 0B00  345                   move.l   _USP,a0
000007C0  0128      
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
000007C4  2079 0B00  347                   move.l   _a0,a0
000007C8  0104      
000007CA  2279 0B00  348                   move.l   _a1,a1
000007CE  0108      
000007D0  2479 0B00  349                   move.l   _a2,a2
000007D4  010C      
000007D6  2679 0B00  350                   move.l   _a3,a3
000007DA  0110      
000007DC  2879 0B00  351                   move.l   _a4,a4
000007E0  0114      
000007E2  2A79 0B00  352                   move.l   _a5,a5
000007E6  0118      
000007E8  2C79 0B00  353                   move.l   _a6,a6
000007EC  011C      
                     354   
000007EE  2F39 0B00  355                   move.l   _PC,-(sp)
000007F2  0120      
000007F4  3F39 0B00  356                   move.w   _SR,-(sp)
000007F8  012C      
000007FA  4E73       357                   rte
                     358   
000007FC  4EF9 0000  359   Trap15RamISR    jmp     _CallDebugMonitor
00000800  226E      
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
000008B8  2E79 0B00  443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
000008BC  0124      
000008BE  2F39 0B00  444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
000008C2  0120      
000008C4  3F39 0B00  445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
000008C8  012C      
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
000008CE  2039 0B00  448                   move.l   _d0,d0
000008D2  00E4      
000008D4  2239 0B00  449                   move.l   _d1,d1
000008D8  00E8      
000008DA  2439 0B00  450                   move.l   _d2,d2
000008DE  00EC      
000008E0  2639 0B00  451                   move.l   _d3,d3
000008E4  00F0      
000008E6  2839 0B00  452                   move.l   _d4,d4
000008EA  00F4      
000008EC  2A39 0B00  453                   move.l   _d5,d5
000008F0  00F8      
000008F2  2C39 0B00  454                   move.l   _d6,d6
000008F6  00FC      
000008F8  2E39 0B00  455                   move.l   _d7,d7
000008FC  0100      
                     456   
000008FE  2079 0B00  457                   move.l   _USP,a0
00000902  0128      
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
00000906  2079 0B00  459                   move.l   _a0,a0
0000090A  0104      
0000090C  2279 0B00  460                   move.l   _a1,a1
00000910  0108      
00000912  2479 0B00  461                   move.l   _a2,a2
00000916  010C      
00000918  2679 0B00  462                   move.l   _a3,a3
0000091C  0110      
0000091E  2879 0B00  463                   move.l   _a4,a4
00000922  0114      
00000924  2A79 0B00  464                   move.l   _a5,a5
00000928  0118      
0000092A  2C79 0B00  465                   move.l   _a6,a6
0000092E  011C      
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469   ; C:\IDE68K\ASS2_PARTB\M68KDEBUG.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
                     470   ; #include "DebugMonitor.h"
                     471   ; // use 08030000 for a system running from sram or 0B000000 for system running from dram
                     472   ; //#define StartOfExceptionVectorTable 0x08030000
                     473   ; #define StartOfExceptionVectorTable 0x0B000000
                     474   ; // use 0C000000 for dram or hex 08040000 for sram
                     475   ; //#define TopOfStack 0x08040000
                     476   ; #define TopOfStack 0x0C000000
                     477   ; /* DO NOT INITIALISE GLOBAL VARIABLES - DO IT in MAIN() */
                     478   ; unsigned int i, x, y, z, PortA_Count;
                     479   ; int     Trace, GoFlag, Echo;                       // used in tracing/single stepping
                     480   ; // 68000 register dump and preintialise value (these can be changed by the user program when it is running, e.g. stack pointer, registers etc
                     481   ; unsigned int d0,d1,d2,d3,d4,d5,d6,d7 ;
                     482   ; unsigned int a0,a1,a2,a3,a4,a5,a6 ;
                     483   ; unsigned int PC, SSP, USP ;
                     484   ; unsigned short int SR;
                     485   ; // Breakpoint variables
                     486   ; unsigned int BreakPointAddress[8];                      //array of 8 breakpoint addresses
                     487   ; unsigned short int BreakPointInstruction[8] ;           // to hold the instruction opcode at the breakpoint
                     488   ; unsigned int BreakPointSetOrCleared[8] ;
                     489   ; unsigned int InstructionSize ;
                     490   ; // watchpoint variables
                     491   ; unsigned int WatchPointAddress[8];                      //array of 8 breakpoint addresses
                     492   ; unsigned int WatchPointSetOrCleared[8] ;
                     493   ; char WatchPointString[8][100] ;
                     494   ; // for disassembly of program
                     495   ; char    Instruction[100] ;
                     496   ; char    TempString[100] ;
                     497   ; /************************************************************************************
                     498   ; *Subroutine to give the 68000 something useless to do to waste 1 mSec
                     499   ; ************************************************************************************/
                     500   ; void Wait1ms(void)
                     501   ; {
                     502   _Wait1ms:
00000932  2F02       503          move.l    D2,-(A7)
                     504   ; long int  i ;
                     505   ; for(i = 0; i < 1000; i ++)
00000934  4282       506          clr.l     D2
                     507   Wait1ms_1:
00000936  0C82 0000  508          cmp.l     #1000,D2
0000093A  03E8      
0000093C  6C04       509          bge.s     Wait1ms_3
0000093E  5282       510          addq.l    #1,D2
00000940  60F4       511          bra       Wait1ms_1
                     512   Wait1ms_3:
00000942  241F       513          move.l    (A7)+,D2
00000944  4E75       514          rts
                     515   ; ;
                     516   ; }
                     517   ; /************************************************************************************
                     518   ; *Subroutine to give the 68000 something useless to do to waste 3 mSec
                     519   ; **************************************************************************************/
                     520   ; void Wait3ms(void)
                     521   ; {
                     522   _Wait3ms:
00000946  2F02       523          move.l    D2,-(A7)
                     524   ; int i ;
                     525   ; for(i = 0; i < 3; i++)
00000948  4282       526          clr.l     D2
                     527   Wait3ms_1:
0000094A  0C82 0000  528          cmp.l     #3,D2
0000094E  0003      
00000950  6C08       529          bge.s     Wait3ms_3
                     530   ; Wait1ms() ;
00000952  4EB8 0932  531          jsr       _Wait1ms
00000956  5282       532          addq.l    #1,D2
00000958  60F0       533          bra       Wait3ms_1
                     534   Wait3ms_3:
0000095A  241F       535          move.l    (A7)+,D2
0000095C  4E75       536          rts
                     537   ; }
                     538   ; /*********************************************************************************************
                     539   ; *Subroutine to initialise the display by writing some commands to the LCD internal registers
                     540   ; *********************************************************************************************/
                     541   ; void Init_LCD(void)
                     542   ; {
                     543   _Init_LCD:
                     544   ; LCDcommand = (char)(0x0c) ;
0000095E  13FC 000C  545          move.b    #12,4194336
00000962  0040 0020 
                     546   ; Wait3ms() ;
00000966  4EB8 0946  547          jsr       _Wait3ms
                     548   ; LCDcommand = (char)(0x38) ;
0000096A  13FC 0038  549          move.b    #56,4194336
0000096E  0040 0020 
                     550   ; Wait3ms() ;
00000972  4EB8 0946  551          jsr       _Wait3ms
00000976  4E75       552          rts
                     553   ; }
                     554   ; /******************************************************************************
                     555   ; *subroutine to output a single character held in d1 to the LCD display
                     556   ; *it is assumed the character is an ASCII code and it will be displayed at the
                     557   ; *current cursor position
                     558   ; *******************************************************************************/
                     559   ; void Outchar(int c)
                     560   ; {
                     561   _Outchar:
00000978  4E56 0000  562          link      A6,#0
                     563   ; LCDdata = (char)(c);
0000097C  202E 0008  564          move.l    8(A6),D0
00000980  13C0 0040  565          move.b    D0,4194338
00000984  0022      
                     566   ; Wait1ms() ;
00000986  4EB8 0932  567          jsr       _Wait1ms
0000098A  4E5E       568          unlk      A6
0000098C  4E75       569          rts
                     570   ; }
                     571   ; /**********************************************************************************
                     572   ; *subroutine to output a message at the current cursor position of the LCD display
                     573   ; ************************************************************************************/
                     574   ; void OutMess(char *theMessage)
                     575   ; {
                     576   _OutMess:
0000098E  4E56 FFFC  577          link      A6,#-4
                     578   ; char c ;
                     579   ; while((c = *theMessage++) != (char)(0))
                     580   OutMess_1:
00000992  206E 0008  581          move.l    8(A6),A0
00000996  52AE 0008  582          addq.l    #1,8(A6)
0000099A  1D50 FFFF  583          move.b    (A0),-1(A6)
0000099E  1010       584          move.b    (A0),D0
000009A0  6712       585          beq.s     OutMess_3
                     586   ; Outchar(c) ;
000009A2  122E FFFF  587          move.b    -1(A6),D1
000009A6  4881       588          ext.w     D1
000009A8  48C1       589          ext.l     D1
000009AA  2F01       590          move.l    D1,-(A7)
000009AC  4EB8 0978  591          jsr       _Outchar
000009B0  584F       592          addq.w    #4,A7
000009B2  60DE       593          bra       OutMess_1
                     594   OutMess_3:
000009B4  4E5E       595          unlk      A6
000009B6  4E75       596          rts
                     597   ; }
                     598   ; /******************************************************************************
                     599   ; *subroutine to clear the line by issuing 24 space characters
                     600   ; *******************************************************************************/
                     601   ; void Clearln(void)
                     602   ; {
                     603   _Clearln:
000009B8  2F02       604          move.l    D2,-(A7)
                     605   ; unsigned char i ;
                     606   ; for(i = 0; i < 24; i ++)
000009BA  4202       607          clr.b     D2
                     608   Clearln_1:
000009BC  0C02 0018  609          cmp.b     #24,D2
000009C0  640E       610          bhs.s     Clearln_3
                     611   ; Outchar(' ') ;  /* write a space char to the LCD display */
000009C2  4878 0020  612          pea       32
000009C6  4EB8 0978  613          jsr       _Outchar
000009CA  584F       614          addq.w    #4,A7
000009CC  5202       615          addq.b    #1,D2
000009CE  60EC       616          bra       Clearln_1
                     617   Clearln_3:
000009D0  241F       618          move.l    (A7)+,D2
000009D2  4E75       619          rts
                     620   ; }
                     621   ; /******************************************************************************
                     622   ; *subroutine to move the cursor to the start of line 1 and clear that line
                     623   ; *******************************************************************************/
                     624   ; void Oline0(char *theMessage)
                     625   ; {
                     626   _Oline0:
000009D4  4E56 0000  627          link      A6,#0
                     628   ; LCDcommand = (char)(0x80) ;
000009D8  13FC 0080  629          move.b    #128,4194336
000009DC  0040 0020 
                     630   ; Wait3ms();
000009E0  4EB8 0946  631          jsr       _Wait3ms
                     632   ; Clearln() ;
000009E4  4EB8 09B8  633          jsr       _Clearln
                     634   ; LCDcommand = (char)(0x80) ;
000009E8  13FC 0080  635          move.b    #128,4194336
000009EC  0040 0020 
                     636   ; Wait3ms() ;
000009F0  4EB8 0946  637          jsr       _Wait3ms
                     638   ; OutMess(theMessage) ;
000009F4  2F2E 0008  639          move.l    8(A6),-(A7)
000009F8  4EB8 098E  640          jsr       _OutMess
000009FC  584F       641          addq.w    #4,A7
000009FE  4E5E       642          unlk      A6
00000A00  4E75       643          rts
                     644   ; }
                     645   ; /******************************************************************************
                     646   ; *subroutine to move the cursor to the start of line 2 and clear that line
                     647   ; *******************************************************************************/
                     648   ; void Oline1(char *theMessage)
                     649   ; {
                     650   _Oline1:
00000A02  4E56 0000  651          link      A6,#0
                     652   ; LCDcommand = (char)(0xC0) ;
00000A06  13FC 00C0  653          move.b    #192,4194336
00000A0A  0040 0020 
                     654   ; Wait3ms();
00000A0E  4EB8 0946  655          jsr       _Wait3ms
                     656   ; Clearln() ;
00000A12  4EB8 09B8  657          jsr       _Clearln
                     658   ; LCDcommand = (char)(0xC0) ;
00000A16  13FC 00C0  659          move.b    #192,4194336
00000A1A  0040 0020 
                     660   ; Wait3ms() ;
00000A1E  4EB8 0946  661          jsr       _Wait3ms
                     662   ; OutMess(theMessage) ;
00000A22  2F2E 0008  663          move.l    8(A6),-(A7)
00000A26  4EB8 098E  664          jsr       _OutMess
00000A2A  584F       665          addq.w    #4,A7
00000A2C  4E5E       666          unlk      A6
00000A2E  4E75       667          rts
                     668   ; }
                     669   ; void InstallExceptionHandler( void (*function_ptr)(), int level)
                     670   ; {
                     671   _InstallExceptionHandler:
00000A30  4E56 FFFC  672          link      A6,#-4
                     673   ; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
00000A34  2D7C 0B00  674          move.l    #184549376,-4(A6)
00000A38  0000 FFFC 
                     675   ; RamVectorAddress[level] = (long int *)(function_ptr);
00000A3C  206E FFFC  676          move.l    -4(A6),A0
00000A40  202E 000C  677          move.l    12(A6),D0
00000A44  E588       678          lsl.l     #2,D0
00000A46  21AE 0008  679          move.l    8(A6),0(A0,D0.L)
00000A4A  0800      
00000A4C  4E5E       680          unlk      A6
00000A4E  4E75       681          rts
                     682   ; }
                     683   ; void TestLEDS(void)
                     684   ; {
                     685   _TestLEDS:
00000A50  48E7 3000  686          movem.l   D2/D3,-(A7)
                     687   ; int delay ;
                     688   ; unsigned char count = 0 ;
00000A54  4202       689          clr.b     D2
                     690   ; while(1)    {
                     691   TestLEDS_1:
                     692   ; PortA = PortB = PortC = PortD = HEX_A = HEX_B = HEX_C = HEX_D = ((count << 4) + (count & 0x0f)) ;
00000A56  1002       693          move.b    D2,D0
00000A58  E908       694          lsl.b     #4,D0
00000A5A  1202       695          move.b    D2,D1
00000A5C  C23C 000F  696          and.b     #15,D1
00000A60  D001       697          add.b     D1,D0
00000A62  13C0 0040  698          move.b    D0,4194326
00000A66  0016      
00000A68  13C0 0040  699          move.b    D0,4194324
00000A6C  0014      
00000A6E  13C0 0040  700          move.b    D0,4194322
00000A72  0012      
00000A74  13C0 0040  701          move.b    D0,4194320
00000A78  0010      
00000A7A  13C0 0040  702          move.b    D0,4194310
00000A7E  0006      
00000A80  13C0 0040  703          move.b    D0,4194308
00000A84  0004      
00000A86  13C0 0040  704          move.b    D0,4194306
00000A8A  0002      
00000A8C  13C0 0040  705          move.b    D0,4194304
00000A90  0000      
                     706   ; for(delay = 0; delay < 200000; delay ++)
00000A92  4283       707          clr.l     D3
                     708   TestLEDS_4:
00000A94  0C83 0003  709          cmp.l     #200000,D3
00000A98  0D40      
00000A9A  6C04       710          bge.s     TestLEDS_6
00000A9C  5283       711          addq.l    #1,D3
00000A9E  60F4       712          bra       TestLEDS_4
                     713   TestLEDS_6:
                     714   ; ;
                     715   ; count ++;
00000AA0  5202       716          addq.b    #1,D2
00000AA2  60B2       717          bra       TestLEDS_1
                     718   ; }
                     719   ; }
                     720   ; void SwitchTest(void)
                     721   ; {
                     722   _SwitchTest:
00000AA4  48E7 3020  723          movem.l   D2/D3/A2,-(A7)
00000AA8  45F9 0000  724          lea       _printf.L,A2
00000AAC  5782      
                     725   ; int i, switches = 0 ;
00000AAE  4283       726          clr.l     D3
                     727   ; printf("\r\n") ;
00000AB0  4879 0000  728          pea       @m68kde~1_1.L
00000AB4  60D2      
00000AB6  4E92       729          jsr       (A2)
00000AB8  584F       730          addq.w    #4,A7
                     731   ; while(1)    {
                     732   SwitchTest_1:
                     733   ; switches = (PortB << 8) | (PortA) ;
00000ABA  1039 0040  734          move.b    4194306,D0
00000ABE  0002      
00000AC0  C0BC 0000  735          and.l     #255,D0
00000AC4  00FF      
00000AC6  E188       736          lsl.l     #8,D0
00000AC8  1239 0040  737          move.b    4194304,D1
00000ACC  0000      
00000ACE  C2BC 0000  738          and.l     #255,D1
00000AD2  00FF      
00000AD4  8081       739          or.l      D1,D0
00000AD6  2600       740          move.l    D0,D3
                     741   ; printf("\rSwitches SW[7-0] = ") ;
00000AD8  4879 0000  742          pea       @m68kde~1_2.L
00000ADC  60D6      
00000ADE  4E92       743          jsr       (A2)
00000AE0  584F       744          addq.w    #4,A7
                     745   ; for( i = (int)(0x00000080); i > 0; i = i >> 1)  {
00000AE2  243C 0000  746          move.l    #128,D2
00000AE6  0080      
                     747   SwitchTest_4:
00000AE8  0C82 0000  748          cmp.l     #0,D2
00000AEC  0000      
00000AEE  6F20       749          ble.s     SwitchTest_6
                     750   ; if((switches & i) == 0)
00000AF0  2003       751          move.l    D3,D0
00000AF2  C082       752          and.l     D2,D0
00000AF4  660C       753          bne.s     SwitchTest_7
                     754   ; printf("0") ;
00000AF6  4879 0000  755          pea       @m68kde~1_3.L
00000AFA  60EC      
00000AFC  4E92       756          jsr       (A2)
00000AFE  584F       757          addq.w    #4,A7
00000B00  600A       758          bra.s     SwitchTest_8
                     759   SwitchTest_7:
                     760   ; else
                     761   ; printf("1") ;
00000B02  4879 0000  762          pea       @m68kde~1_4.L
00000B06  60EE      
00000B08  4E92       763          jsr       (A2)
00000B0A  584F       764          addq.w    #4,A7
                     765   SwitchTest_8:
00000B0C  E282       766          asr.l     #1,D2
00000B0E  60D8       767          bra       SwitchTest_4
                     768   SwitchTest_6:
00000B10  60A8       769          bra       SwitchTest_1
                     770   ; }
                     771   ; }
                     772   ; }
                     773   ; /*********************************************************************************************
                     774   ; *Subroutine to initialise the RS232 Port by writing some commands to the internal registers
                     775   ; *********************************************************************************************/
                     776   ; void Init_RS232(void)
                     777   ; {
                     778   _Init_RS232:
                     779   ; RS232_Control = (char)(0x15) ; //  %00010101    divide by 16 clock, set rts low, 8 bits no parity, 1 stop bit transmitter interrupt disabled
00000B12  13FC 0015  780          move.b    #21,4194368
00000B16  0040 0040 
                     781   ; RS232_Baud = (char)(0x1) ;      // program baud rate generator 000 = 230k, 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
00000B1A  13FC 0001  782          move.b    #1,4194372
00000B1E  0040 0044 
00000B22  4E75       783          rts
                     784   ; }
                     785   ; int kbhit(void)
                     786   ; {
                     787   _kbhit:
                     788   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // wait for Rx bit in status register to be '1'
00000B24  1039 0040  789          move.b    4194368,D0
00000B28  0040      
00000B2A  C03C 0001  790          and.b     #1,D0
00000B2E  0C00 0001  791          cmp.b     #1,D0
00000B32  6604       792          bne.s     kbhit_1
                     793   ; return 1 ;
00000B34  7001       794          moveq     #1,D0
00000B36  6002       795          bra.s     kbhit_3
                     796   kbhit_1:
                     797   ; else
                     798   ; return 0 ;
00000B38  4280       799          clr.l     D0
                     800   kbhit_3:
00000B3A  4E75       801          rts
                     802   ; }
                     803   ; /*********************************************************************************************************
                     804   ; **  Subroutine to provide a low level output function to 6850 ACIA
                     805   ; **  This routine provides the basic functionality to output a single character to the serial Port
                     806   ; **  to allow the board to communicate with HyperTerminal Program
                     807   ; **
                     808   ; **  NOTE you do not call this function directly, instead you call the normal putchar() function
                     809   ; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
                     810   ; **  call _putch() also
                     811   ; *********************************************************************************************************/
                     812   ; int _putch( int c)
                     813   ; {
                     814   __putch:
00000B3C  4E56 0000  815          link      A6,#0
                     816   ; while(((char)(RS232_Status) & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
                     817   _putch_1:
00000B40  1039 0040  818          move.b    4194368,D0
00000B44  0040      
00000B46  C03C 0002  819          and.b     #2,D0
00000B4A  0C00 0002  820          cmp.b     #2,D0
00000B4E  6702       821          beq.s     _putch_3
00000B50  60EE       822          bra       _putch_1
                     823   _putch_3:
                     824   ; ;
                     825   ; (char)(RS232_TxData) = ((char)(c) & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
00000B52  202E 0008  826          move.l    8(A6),D0
00000B56  C03C 007F  827          and.b     #127,D0
00000B5A  13C0 0040  828          move.b    D0,4194370
00000B5E  0042      
                     829   ; return c ;                                              // putchar() expects the character to be returned
00000B60  202E 0008  830          move.l    8(A6),D0
00000B64  4E5E       831          unlk      A6
00000B66  4E75       832          rts
                     833   ; }
                     834   ; /*********************************************************************************************************
                     835   ; **  Subroutine to provide a low level input function to 6850 ACIA
                     836   ; **  This routine provides the basic functionality to input a single character from the serial Port
                     837   ; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
                     838   ; **
                     839   ; **  NOTE you do not call this function directly, instead you call the normal _getch() function
                     840   ; **  which in turn calls _getch() below). Other functions like gets(), scanf() call _getch() so will
                     841   ; **  call _getch() also
                     842   ; *********************************************************************************************************/
                     843   ; int _getch( void )
                     844   ; {
                     845   __getch:
00000B68  2F02       846          move.l    D2,-(A7)
                     847   ; int c ;
                     848   ; while(((char)(RS232_Status) & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
                     849   _getch_1:
00000B6A  1039 0040  850          move.b    4194368,D0
00000B6E  0040      
00000B70  C03C 0001  851          and.b     #1,D0
00000B74  0C00 0001  852          cmp.b     #1,D0
00000B78  6702       853          beq.s     _getch_3
00000B7A  60EE       854          bra       _getch_1
                     855   _getch_3:
                     856   ; ;
                     857   ; c = (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
00000B7C  1039 0040  858          move.b    4194370,D0
00000B80  0042      
00000B82  C0BC 0000  859          and.l     #255,D0
00000B86  00FF      
00000B88  C0BC 0000  860          and.l     #127,D0
00000B8C  007F      
00000B8E  2400       861          move.l    D0,D2
                     862   ; // shall we echo the character? Echo is set to TRUE at reset, but for speed we don't want to echo when downloading code with the 'L' debugger command
                     863   ; if(Echo)
00000B90  4AB9 0B00  864          tst.l     _Echo.L
00000B94  00E0      
00000B96  6708       865          beq.s     _getch_4
                     866   ; _putch(c);
00000B98  2F02       867          move.l    D2,-(A7)
00000B9A  4EB8 0B3C  868          jsr       __putch
00000B9E  584F       869          addq.w    #4,A7
                     870   _getch_4:
                     871   ; return c ;
00000BA0  2002       872          move.l    D2,D0
00000BA2  241F       873          move.l    (A7)+,D2
00000BA4  4E75       874          rts
                     875   ; }
                     876   ; // flush the input stream for any unread characters
                     877   ; void FlushKeyboard(void)
                     878   ; {
                     879   _FlushKeyboard:
00000BA6  4E56 FFFC  880          link      A6,#-4
                     881   ; char c ;
                     882   ; while(1)    {
                     883   FlushKeyboard_1:
                     884   ; if(((char)(RS232_Status) & (char)(0x01)) == (char)(0x01))    // if Rx bit in status register is '1'
00000BAA  1039 0040  885          move.b    4194368,D0
00000BAE  0040      
00000BB0  C03C 0001  886          and.b     #1,D0
00000BB4  0C00 0001  887          cmp.b     #1,D0
00000BB8  6610       888          bne.s     FlushKeyboard_4
                     889   ; c = ((char)(RS232_RxData) & (char)(0x7f)) ;
00000BBA  1039 0040  890          move.b    4194370,D0
00000BBE  0042      
00000BC0  C03C 007F  891          and.b     #127,D0
00000BC4  1D40 FFFF  892          move.b    D0,-1(A6)
00000BC8  6002       893          bra.s     FlushKeyboard_5
                     894   FlushKeyboard_4:
                     895   ; else
                     896   ; return ;
00000BCA  6002       897          bra.s     FlushKeyboard_6
                     898   FlushKeyboard_5:
00000BCC  60DC       899          bra       FlushKeyboard_1
                     900   FlushKeyboard_6:
00000BCE  4E5E       901          unlk      A6
00000BD0  4E75       902          rts
                     903   ; }
                     904   ; }
                     905   ; // converts hex char to 4 bit binary equiv in range 0000-1111 (0-F)
                     906   ; // char assumed to be a valid hex char 0-9, a-f, A-F
                     907   ; char xtod(int c)
                     908   ; {
                     909   _xtod:
00000BD2  4E56 0000  910          link      A6,#0
00000BD6  2F02       911          move.l    D2,-(A7)
00000BD8  242E 0008  912          move.l    8(A6),D2
                     913   ; if ((char)(c) <= (char)('9'))
00000BDC  0C02 0039  914          cmp.b     #57,D2
00000BE0  6E08       915          bgt.s     xtod_1
                     916   ; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
00000BE2  1002       917          move.b    D2,D0
00000BE4  0400 0030  918          sub.b     #48,D0
00000BE8  6014       919          bra.s     xtod_3
                     920   xtod_1:
                     921   ; else if((char)(c) > (char)('F'))    // assume lower case
00000BEA  0C02 0046  922          cmp.b     #70,D2
00000BEE  6F08       923          ble.s     xtod_4
                     924   ; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
00000BF0  1002       925          move.b    D2,D0
00000BF2  0400 0057  926          sub.b     #87,D0
00000BF6  6006       927          bra.s     xtod_3
                     928   xtod_4:
                     929   ; else
                     930   ; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
00000BF8  1002       931          move.b    D2,D0
00000BFA  0400 0037  932          sub.b     #55,D0
                     933   xtod_3:
00000BFE  241F       934          move.l    (A7)+,D2
00000C00  4E5E       935          unlk      A6
00000C02  4E75       936          rts
                     937   ; }
                     938   ; int Get2HexDigits(char *CheckSumPtr)
                     939   ; {
                     940   _Get2HexDigits:
00000C04  4E56 0000  941          link      A6,#0
00000C08  2F02       942          move.l    D2,-(A7)
                     943   ; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
00000C0A  2F00       944          move.l    D0,-(A7)
00000C0C  4EB8 0B68  945          jsr       __getch
00000C10  2200       946          move.l    D0,D1
00000C12  201F       947          move.l    (A7)+,D0
00000C14  2F01       948          move.l    D1,-(A7)
00000C16  4EB8 0BD2  949          jsr       _xtod
00000C1A  584F       950          addq.w    #4,A7
00000C1C  C0BC 0000  951          and.l     #255,D0
00000C20  00FF      
00000C22  E980       952          asl.l     #4,D0
00000C24  2F00       953          move.l    D0,-(A7)
00000C26  2F01       954          move.l    D1,-(A7)
00000C28  4EB8 0B68  955          jsr       __getch
00000C2C  221F       956          move.l    (A7)+,D1
00000C2E  2F00       957          move.l    D0,-(A7)
00000C30  4EB8 0BD2  958          jsr       _xtod
00000C34  584F       959          addq.w    #4,A7
00000C36  2200       960          move.l    D0,D1
00000C38  201F       961          move.l    (A7)+,D0
00000C3A  C2BC 0000  962          and.l     #255,D1
00000C3E  00FF      
00000C40  8081       963          or.l      D1,D0
00000C42  2400       964          move.l    D0,D2
                     965   ; if(CheckSumPtr)
00000C44  4AAE 0008  966          tst.l     8(A6)
00000C48  6706       967          beq.s     Get2HexDigits_1
                     968   ; *CheckSumPtr += i ;
00000C4A  206E 0008  969          move.l    8(A6),A0
00000C4E  D510       970          add.b     D2,(A0)
                     971   Get2HexDigits_1:
                     972   ; return i ;
00000C50  2002       973          move.l    D2,D0
00000C52  241F       974          move.l    (A7)+,D2
00000C54  4E5E       975          unlk      A6
00000C56  4E75       976          rts
                     977   ; }
                     978   ; int Get4HexDigits(char *CheckSumPtr)
                     979   ; {
                     980   _Get4HexDigits:
00000C58  4E56 0000  981          link      A6,#0
                     982   ; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C5C  2F2E 0008  983          move.l    8(A6),-(A7)
00000C60  4EB8 0C04  984          jsr       _Get2HexDigits
00000C64  584F       985          addq.w    #4,A7
00000C66  E180       986          asl.l     #8,D0
00000C68  2F00       987          move.l    D0,-(A7)
00000C6A  2F2E 0008  988          move.l    8(A6),-(A7)
00000C6E  4EB8 0C04  989          jsr       _Get2HexDigits
00000C72  584F       990          addq.w    #4,A7
00000C74  2200       991          move.l    D0,D1
00000C76  201F       992          move.l    (A7)+,D0
00000C78  8081       993          or.l      D1,D0
00000C7A  4E5E       994          unlk      A6
00000C7C  4E75       995          rts
                     996   ; }
                     997   ; int Get6HexDigits(char *CheckSumPtr)
                     998   ; {
                     999   _Get6HexDigits:
00000C7E  4E56 0000 1000          link      A6,#0
                    1001   ; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
00000C82  2F2E 0008 1002          move.l    8(A6),-(A7)
00000C86  4EB8 0C58 1003          jsr       _Get4HexDigits
00000C8A  584F      1004          addq.w    #4,A7
00000C8C  E180      1005          asl.l     #8,D0
00000C8E  2F00      1006          move.l    D0,-(A7)
00000C90  2F2E 0008 1007          move.l    8(A6),-(A7)
00000C94  4EB8 0C04 1008          jsr       _Get2HexDigits
00000C98  584F      1009          addq.w    #4,A7
00000C9A  2200      1010          move.l    D0,D1
00000C9C  201F      1011          move.l    (A7)+,D0
00000C9E  8081      1012          or.l      D1,D0
00000CA0  4E5E      1013          unlk      A6
00000CA2  4E75      1014          rts
                    1015   ; }
                    1016   ; int Get8HexDigits(char *CheckSumPtr)
                    1017   ; {
                    1018   _Get8HexDigits:
00000CA4  4E56 0000 1019          link      A6,#0
                    1020   ; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
00000CA8  2F2E 0008 1021          move.l    8(A6),-(A7)
00000CAC  4EB8 0C58 1022          jsr       _Get4HexDigits
00000CB0  584F      1023          addq.w    #4,A7
00000CB2  E180      1024          asl.l     #8,D0
00000CB4  E180      1025          asl.l     #8,D0
00000CB6  2F00      1026          move.l    D0,-(A7)
00000CB8  2F2E 0008 1027          move.l    8(A6),-(A7)
00000CBC  4EB8 0C58 1028          jsr       _Get4HexDigits
00000CC0  584F      1029          addq.w    #4,A7
00000CC2  2200      1030          move.l    D0,D1
00000CC4  201F      1031          move.l    (A7)+,D0
00000CC6  8081      1032          or.l      D1,D0
00000CC8  4E5E      1033          unlk      A6
00000CCA  4E75      1034          rts
                    1035   ; }
                    1036   ; char *strcatInstruction(char *s) {    return strcat(Instruction,s) ; }
                    1037   _strcatInstruction:
00000CCC  4E56 0000 1038          link      A6,#0
00000CD0  2F2E 0008 1039          move.l    8(A6),-(A7)
00000CD4  4879 0B00 1040          pea       _Instruction.L
00000CD8  04E2      
00000CDA  4EB9 0000 1041          jsr       _strcat
00000CDE  5740      
00000CE0  504F      1042          addq.w    #8,A7
00000CE2  4E5E      1043          unlk      A6
00000CE4  4E75      1044          rts
                    1045   ; char *strcpyInstruction(char *s) {    return strcpy(Instruction,s) ; }
                    1046   _strcpyInstruction:
00000CE6  4E56 0000 1047          link      A6,#0
00000CEA  2F2E 0008 1048          move.l    8(A6),-(A7)
00000CEE  4879 0B00 1049          pea       _Instruction.L
00000CF2  04E2      
00000CF4  4EB9 0000 1050          jsr       _strcpy
00000CF8  5586      
00000CFA  504F      1051          addq.w    #8,A7
00000CFC  4E5E      1052          unlk      A6
00000CFE  4E75      1053          rts
                    1054   ; void DisassembleProgram(void )
                    1055   ; {
                    1056   _DisassembleProgram:
00000D00  4E56 FFF8 1057          link      A6,#-8
00000D04  48E7 3038 1058          movem.l   D2/D3/A2/A3/A4,-(A7)
00000D08  45F9 0B00 1059          lea       _InstructionSize.L,A2
00000D0C  017E      
00000D0E  47F9 0000 1060          lea       _printf.L,A3
00000D12  5782      
00000D14  49F9 0B00 1061          lea       _Instruction.L,A4
00000D18  04E2      
                    1062   ; char c ;
                    1063   ; int i, j ;
                    1064   ; unsigned short int *ProgramPtr ; // pointer to where the program is stored
                    1065   ; printf("\r\nEnter Start Address: ") ;
00000D1A  4879 0000 1066          pea       @m68kde~1_5.L
00000D1E  60F0      
00000D20  4E93      1067          jsr       (A3)
00000D22  584F      1068          addq.w    #4,A7
                    1069   ; ProgramPtr = Get8HexDigits(0) ;
00000D24  42A7      1070          clr.l     -(A7)
00000D26  4EB8 0CA4 1071          jsr       _Get8HexDigits
00000D2A  584F      1072          addq.w    #4,A7
00000D2C  2400      1073          move.l    D0,D2
                    1074   ; printf("\r\n<ESC> = Abort, SPACE to Continue") ;
00000D2E  4879 0000 1075          pea       @m68kde~1_6.L
00000D32  6108      
00000D34  4E93      1076          jsr       (A3)
00000D36  584F      1077          addq.w    #4,A7
                    1078   ; while(1)    {
                    1079   DisassembleProgram_1:
                    1080   ; for(i = 0; i < 20; i ++)
00000D38  4283      1081          clr.l     D3
                    1082   DisassembleProgram_4:
00000D3A  0C83 0000 1083          cmp.l     #20,D3
00000D3E  0014      
00000D40  6C00 017E 1084          bge       DisassembleProgram_6
                    1085   ; {
                    1086   ; InstructionSize = 1 ;                   // assume all instruction are at least 1 word
00000D44  24BC 0000 1087          move.l    #1,(A2)
00000D48  0001      
                    1088   ; DisassembleInstruction(ProgramPtr) ;    // build up string for disassembled instruction at address in programptr
00000D4A  2F02      1089          move.l    D2,-(A7)
00000D4C  4EB9 0000 1090          jsr       _DisassembleInstruction
00000D50  36E4      
00000D52  584F      1091          addq.w    #4,A7
                    1092   ; if(InstructionSize == 1)
00000D54  2012      1093          move.l    (A2),D0
00000D56  0C80 0000 1094          cmp.l     #1,D0
00000D5A  0001      
00000D5C  6620      1095          bne.s     DisassembleProgram_7
                    1096   ; printf("\r\n%08X  %04X                        %s", ProgramPtr, ProgramPtr[0], Instruction) ;
00000D5E  2F0C      1097          move.l    A4,-(A7)
00000D60  2042      1098          move.l    D2,A0
00000D62  3210      1099          move.w    (A0),D1
00000D64  C2BC 0000 1100          and.l     #65535,D1
00000D68  FFFF      
00000D6A  2F01      1101          move.l    D1,-(A7)
00000D6C  2F02      1102          move.l    D2,-(A7)
00000D6E  4879 0000 1103          pea       @m68kde~1_7.L
00000D72  612C      
00000D74  4E93      1104          jsr       (A3)
00000D76  DEFC 0010 1105          add.w     #16,A7
00000D7A  6000 0138 1106          bra       DisassembleProgram_15
                    1107   DisassembleProgram_7:
                    1108   ; else if(InstructionSize == 2)
00000D7E  2012      1109          move.l    (A2),D0
00000D80  0C80 0000 1110          cmp.l     #2,D0
00000D84  0002      
00000D86  662E      1111          bne.s     DisassembleProgram_9
                    1112   ; printf("\r\n%08X  %04X %04X                   %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], Instruction) ;
00000D88  2F0C      1113          move.l    A4,-(A7)
00000D8A  2042      1114          move.l    D2,A0
00000D8C  3228 0002 1115          move.w    2(A0),D1
00000D90  C2BC 0000 1116          and.l     #65535,D1
00000D94  FFFF      
00000D96  2F01      1117          move.l    D1,-(A7)
00000D98  2042      1118          move.l    D2,A0
00000D9A  3210      1119          move.w    (A0),D1
00000D9C  C2BC 0000 1120          and.l     #65535,D1
00000DA0  FFFF      
00000DA2  2F01      1121          move.l    D1,-(A7)
00000DA4  2F02      1122          move.l    D2,-(A7)
00000DA6  4879 0000 1123          pea       @m68kde~1_8.L
00000DAA  6154      
00000DAC  4E93      1124          jsr       (A3)
00000DAE  DEFC 0014 1125          add.w     #20,A7
00000DB2  6000 0100 1126          bra       DisassembleProgram_15
                    1127   DisassembleProgram_9:
                    1128   ; else if(InstructionSize == 3)
00000DB6  2012      1129          move.l    (A2),D0
00000DB8  0C80 0000 1130          cmp.l     #3,D0
00000DBC  0003      
00000DBE  6600 003E 1131          bne       DisassembleProgram_11
                    1132   ; printf("\r\n%08X  %04X %04X %04X              %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], Instruction) ;
00000DC2  2F0C      1133          move.l    A4,-(A7)
00000DC4  2042      1134          move.l    D2,A0
00000DC6  3228 0004 1135          move.w    4(A0),D1
00000DCA  C2BC 0000 1136          and.l     #65535,D1
00000DCE  FFFF      
00000DD0  2F01      1137          move.l    D1,-(A7)
00000DD2  2042      1138          move.l    D2,A0
00000DD4  3228 0002 1139          move.w    2(A0),D1
00000DD8  C2BC 0000 1140          and.l     #65535,D1
00000DDC  FFFF      
00000DDE  2F01      1141          move.l    D1,-(A7)
00000DE0  2042      1142          move.l    D2,A0
00000DE2  3210      1143          move.w    (A0),D1
00000DE4  C2BC 0000 1144          and.l     #65535,D1
00000DE8  FFFF      
00000DEA  2F01      1145          move.l    D1,-(A7)
00000DEC  2F02      1146          move.l    D2,-(A7)
00000DEE  4879 0000 1147          pea       @m68kde~1_9.L
00000DF2  617C      
00000DF4  4E93      1148          jsr       (A3)
00000DF6  DEFC 0018 1149          add.w     #24,A7
00000DFA  6000 00B8 1150          bra       DisassembleProgram_15
                    1151   DisassembleProgram_11:
                    1152   ; else if(InstructionSize == 4)
00000DFE  2012      1153          move.l    (A2),D0
00000E00  0C80 0000 1154          cmp.l     #4,D0
00000E04  0004      
00000E06  6600 004C 1155          bne       DisassembleProgram_13
                    1156   ; printf("\r\n%08X  %04X %04X %04X %04X         %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], Instruction) ;
00000E0A  2F0C      1157          move.l    A4,-(A7)
00000E0C  2042      1158          move.l    D2,A0
00000E0E  3228 0006 1159          move.w    6(A0),D1
00000E12  C2BC 0000 1160          and.l     #65535,D1
00000E16  FFFF      
00000E18  2F01      1161          move.l    D1,-(A7)
00000E1A  2042      1162          move.l    D2,A0
00000E1C  3228 0004 1163          move.w    4(A0),D1
00000E20  C2BC 0000 1164          and.l     #65535,D1
00000E24  FFFF      
00000E26  2F01      1165          move.l    D1,-(A7)
00000E28  2042      1166          move.l    D2,A0
00000E2A  3228 0002 1167          move.w    2(A0),D1
00000E2E  C2BC 0000 1168          and.l     #65535,D1
00000E32  FFFF      
00000E34  2F01      1169          move.l    D1,-(A7)
00000E36  2042      1170          move.l    D2,A0
00000E38  3210      1171          move.w    (A0),D1
00000E3A  C2BC 0000 1172          and.l     #65535,D1
00000E3E  FFFF      
00000E40  2F01      1173          move.l    D1,-(A7)
00000E42  2F02      1174          move.l    D2,-(A7)
00000E44  4879 0000 1175          pea       @m68kde~1_10.L
00000E48  61A4      
00000E4A  4E93      1176          jsr       (A3)
00000E4C  DEFC 001C 1177          add.w     #28,A7
00000E50  6000 0062 1178          bra       DisassembleProgram_15
                    1179   DisassembleProgram_13:
                    1180   ; else if(InstructionSize == 5)
00000E54  2012      1181          move.l    (A2),D0
00000E56  0C80 0000 1182          cmp.l     #5,D0
00000E5A  0005      
00000E5C  6600 0056 1183          bne       DisassembleProgram_15
                    1184   ; printf("\r\n%08X  %04X %04X %04X %04X %04X    %s", ProgramPtr, ProgramPtr[0], ProgramPtr[1], ProgramPtr[2], ProgramPtr[3], ProgramPtr[4], Instruction) ;
00000E60  2F0C      1185          move.l    A4,-(A7)
00000E62  2042      1186          move.l    D2,A0
00000E64  3228 0008 1187          move.w    8(A0),D1
00000E68  C2BC 0000 1188          and.l     #65535,D1
00000E6C  FFFF      
00000E6E  2F01      1189          move.l    D1,-(A7)
00000E70  2042      1190          move.l    D2,A0
00000E72  3228 0006 1191          move.w    6(A0),D1
00000E76  C2BC 0000 1192          and.l     #65535,D1
00000E7A  FFFF      
00000E7C  2F01      1193          move.l    D1,-(A7)
00000E7E  2042      1194          move.l    D2,A0
00000E80  3228 0004 1195          move.w    4(A0),D1
00000E84  C2BC 0000 1196          and.l     #65535,D1
00000E88  FFFF      
00000E8A  2F01      1197          move.l    D1,-(A7)
00000E8C  2042      1198          move.l    D2,A0
00000E8E  3228 0002 1199          move.w    2(A0),D1
00000E92  C2BC 0000 1200          and.l     #65535,D1
00000E96  FFFF      
00000E98  2F01      1201          move.l    D1,-(A7)
00000E9A  2042      1202          move.l    D2,A0
00000E9C  3210      1203          move.w    (A0),D1
00000E9E  C2BC 0000 1204          and.l     #65535,D1
00000EA2  FFFF      
00000EA4  2F01      1205          move.l    D1,-(A7)
00000EA6  2F02      1206          move.l    D2,-(A7)
00000EA8  4879 0000 1207          pea       @m68kde~1_11.L
00000EAC  61CC      
00000EAE  4E93      1208          jsr       (A3)
00000EB0  DEFC 0020 1209          add.w     #32,A7
                    1210   DisassembleProgram_15:
                    1211   ; ProgramPtr += InstructionSize ;
00000EB4  2012      1212          move.l    (A2),D0
00000EB6  E388      1213          lsl.l     #1,D0
00000EB8  D480      1214          add.l     D0,D2
00000EBA  5283      1215          addq.l    #1,D3
00000EBC  6000 FE7C 1216          bra       DisassembleProgram_4
                    1217   DisassembleProgram_6:
                    1218   ; }
                    1219   ; c = _getch() ;
00000EC0  4EB8 0B68 1220          jsr       __getch
00000EC4  1D40 FFFB 1221          move.b    D0,-5(A6)
                    1222   ; if(c == 0x1b)          // break on ESC
00000EC8  102E FFFB 1223          move.b    -5(A6),D0
00000ECC  0C00 001B 1224          cmp.b     #27,D0
00000ED0  6602      1225          bne.s     DisassembleProgram_17
                    1226   ; return ;
00000ED2  6004      1227          bra.s     DisassembleProgram_19
                    1228   DisassembleProgram_17:
00000ED4  6000 FE62 1229          bra       DisassembleProgram_1
                    1230   DisassembleProgram_19:
00000ED8  4CDF 1C0C 1231          movem.l   (A7)+,D2/D3/A2/A3/A4
00000EDC  4E5E      1232          unlk      A6
00000EDE  4E75      1233          rts
                    1234   ; }
                    1235   ; }
                    1236   ; void DumpMemory(void)   // simple dump memory fn
                    1237   ; {
                    1238   _DumpMemory:
00000EE0  48E7 3C30 1239          movem.l   D2/D3/D4/D5/A2/A3,-(A7)
00000EE4  45F9 0000 1240          lea       _printf.L,A2
00000EE8  5782      
00000EEA  47F9 0000 1241          lea       _putch.L,A3
00000EEE  5674      
                    1242   ; int i, j ;
                    1243   ; unsigned char *RamPtr,c ; // pointer to where the program is download (assumed)
                    1244   ; printf("\r\nDump Memory Block: <ESC> to Abort, <SPACE> to Continue") ;
00000EF0  4879 0000 1245          pea       @m68kde~1_12.L
00000EF4  61F4      
00000EF6  4E92      1246          jsr       (A2)
00000EF8  584F      1247          addq.w    #4,A7
                    1248   ; printf("\r\nEnter Start Address: ") ;
00000EFA  4879 0000 1249          pea       @m68kde~1_5.L
00000EFE  60F0      
00000F00  4E92      1250          jsr       (A2)
00000F02  584F      1251          addq.w    #4,A7
                    1252   ; RamPtr = Get8HexDigits(0) ;
00000F04  42A7      1253          clr.l     -(A7)
00000F06  4EB8 0CA4 1254          jsr       _Get8HexDigits
00000F0A  584F      1255          addq.w    #4,A7
00000F0C  2600      1256          move.l    D0,D3
                    1257   ; while(1)    {
                    1258   DumpMemory_1:
                    1259   ; for(i = 0; i < 16; i ++)    {
00000F0E  4285      1260          clr.l     D5
                    1261   DumpMemory_4:
00000F10  0C85 0000 1262          cmp.l     #16,D5
00000F14  0010      
00000F16  6C00 0096 1263          bge       DumpMemory_6
                    1264   ; printf("\r\n%08x ", RamPtr) ;
00000F1A  2F03      1265          move.l    D3,-(A7)
00000F1C  4879 0000 1266          pea       @m68kde~1_13.L
00000F20  622E      
00000F22  4E92      1267          jsr       (A2)
00000F24  504F      1268          addq.w    #8,A7
                    1269   ; for(j=0; j < 16; j ++)  {
00000F26  4282      1270          clr.l     D2
                    1271   DumpMemory_7:
00000F28  0C82 0000 1272          cmp.l     #16,D2
00000F2C  0010      
00000F2E  6C24      1273          bge.s     DumpMemory_9
                    1274   ; printf("%02X",RamPtr[j]) ;
00000F30  2043      1275          move.l    D3,A0
00000F32  1230 2800 1276          move.b    0(A0,D2.L),D1
00000F36  C2BC 0000 1277          and.l     #255,D1
00000F3A  00FF      
00000F3C  2F01      1278          move.l    D1,-(A7)
00000F3E  4879 0000 1279          pea       @m68kde~1_14.L
00000F42  6236      
00000F44  4E92      1280          jsr       (A2)
00000F46  504F      1281          addq.w    #8,A7
                    1282   ; putchar(' ') ;
00000F48  4878 0020 1283          pea       32
00000F4C  4E93      1284          jsr       (A3)
00000F4E  584F      1285          addq.w    #4,A7
00000F50  5282      1286          addq.l    #1,D2
00000F52  60D4      1287          bra       DumpMemory_7
                    1288   DumpMemory_9:
                    1289   ; }
                    1290   ; // now display the data as ASCII at the end
                    1291   ; printf("  ") ;
00000F54  4879 0000 1292          pea       @m68kde~1_15.L
00000F58  623C      
00000F5A  4E92      1293          jsr       (A2)
00000F5C  584F      1294          addq.w    #4,A7
                    1295   ; for(j = 0; j < 16; j++) {
00000F5E  4282      1296          clr.l     D2
                    1297   DumpMemory_10:
00000F60  0C82 0000 1298          cmp.l     #16,D2
00000F64  0010      
00000F66  6C00 003A 1299          bge       DumpMemory_12
                    1300   ; c = ((char)(RamPtr[j]) & 0x7f) ;
00000F6A  2043      1301          move.l    D3,A0
00000F6C  1030 2800 1302          move.b    0(A0,D2.L),D0
00000F70  C03C 007F 1303          and.b     #127,D0
00000F74  1800      1304          move.b    D0,D4
                    1305   ; if((c > (char)(0x7f)) || (c < ' '))
00000F76  0C04 007F 1306          cmp.b     #127,D4
00000F7A  6206      1307          bhi.s     DumpMemory_15
00000F7C  0C04 0020 1308          cmp.b     #32,D4
00000F80  640A      1309          bhs.s     DumpMemory_13
                    1310   DumpMemory_15:
                    1311   ; putchar('.') ;
00000F82  4878 002E 1312          pea       46
00000F86  4E93      1313          jsr       (A3)
00000F88  584F      1314          addq.w    #4,A7
00000F8A  6012      1315          bra.s     DumpMemory_14
                    1316   DumpMemory_13:
                    1317   ; else
                    1318   ; putchar(RamPtr[j]) ;
00000F8C  2043      1319          move.l    D3,A0
00000F8E  1230 2800 1320          move.b    0(A0,D2.L),D1
00000F92  C2BC 0000 1321          and.l     #255,D1
00000F96  00FF      
00000F98  2F01      1322          move.l    D1,-(A7)
00000F9A  4E93      1323          jsr       (A3)
00000F9C  584F      1324          addq.w    #4,A7
                    1325   DumpMemory_14:
00000F9E  5282      1326          addq.l    #1,D2
00000FA0  60BE      1327          bra       DumpMemory_10
                    1328   DumpMemory_12:
                    1329   ; }
                    1330   ; RamPtr = RamPtr + 16 ;
00000FA2  0683 0000 1331          add.l     #16,D3
00000FA6  0010      
00000FA8  5285      1332          addq.l    #1,D5
00000FAA  6000 FF64 1333          bra       DumpMemory_4
                    1334   DumpMemory_6:
                    1335   ; }
                    1336   ; printf("\r\n") ;
00000FAE  4879 0000 1337          pea       @m68kde~1_1.L
00000FB2  60D2      
00000FB4  4E92      1338          jsr       (A2)
00000FB6  584F      1339          addq.w    #4,A7
                    1340   ; c = _getch() ;
00000FB8  4EB8 0B68 1341          jsr       __getch
00000FBC  1800      1342          move.b    D0,D4
                    1343   ; if(c == 0x1b)          // break on ESC
00000FBE  0C04 001B 1344          cmp.b     #27,D4
00000FC2  6602      1345          bne.s     DumpMemory_16
                    1346   ; break ;
00000FC4  6004      1347          bra.s     DumpMemory_3
                    1348   DumpMemory_16:
00000FC6  6000 FF46 1349          bra       DumpMemory_1
                    1350   DumpMemory_3:
00000FCA  4CDF 0C3C 1351          movem.l   (A7)+,D2/D3/D4/D5/A2/A3
00000FCE  4E75      1352          rts
                    1353   ; }
                    1354   ; }
                    1355   ; void FillMemory()
                    1356   ; {
                    1357   _FillMemory:
00000FD0  48E7 3820 1358          movem.l   D2/D3/D4/A2,-(A7)
00000FD4  45F9 0000 1359          lea       _printf.L,A2
00000FD8  5782      
                    1360   ; char *StartRamPtr, *EndRamPtr ;
                    1361   ; unsigned char FillData ;
                    1362   ; printf("\r\nFill Memory Block") ;
00000FDA  4879 0000 1363          pea       @m68kde~1_16.L
00000FDE  6240      
00000FE0  4E92      1364          jsr       (A2)
00000FE2  584F      1365          addq.w    #4,A7
                    1366   ; printf("\r\nEnter Start Address: ") ;
00000FE4  4879 0000 1367          pea       @m68kde~1_5.L
00000FE8  60F0      
00000FEA  4E92      1368          jsr       (A2)
00000FEC  584F      1369          addq.w    #4,A7
                    1370   ; StartRamPtr = Get8HexDigits(0) ;
00000FEE  42A7      1371          clr.l     -(A7)
00000FF0  4EB8 0CA4 1372          jsr       _Get8HexDigits
00000FF4  584F      1373          addq.w    #4,A7
00000FF6  2400      1374          move.l    D0,D2
                    1375   ; printf("\r\nEnter End Address: ") ;
00000FF8  4879 0000 1376          pea       @m68kde~1_17.L
00000FFC  6254      
00000FFE  4E92      1377          jsr       (A2)
00001000  584F      1378          addq.w    #4,A7
                    1379   ; EndRamPtr = Get8HexDigits(0) ;
00001002  42A7      1380          clr.l     -(A7)
00001004  4EB8 0CA4 1381          jsr       _Get8HexDigits
00001008  584F      1382          addq.w    #4,A7
0000100A  2800      1383          move.l    D0,D4
                    1384   ; printf("\r\nEnter Fill Data: ") ;
0000100C  4879 0000 1385          pea       @m68kde~1_18.L
00001010  626A      
00001012  4E92      1386          jsr       (A2)
00001014  584F      1387          addq.w    #4,A7
                    1388   ; FillData = Get2HexDigits(0) ;
00001016  42A7      1389          clr.l     -(A7)
00001018  4EB8 0C04 1390          jsr       _Get2HexDigits
0000101C  584F      1391          addq.w    #4,A7
0000101E  1600      1392          move.b    D0,D3
                    1393   ; printf("\r\nFilling Addresses [$%08X - $%08X] with $%02X", StartRamPtr, EndRamPtr, FillData) ;
00001020  C6BC 0000 1394          and.l     #255,D3
00001024  00FF      
00001026  2F03      1395          move.l    D3,-(A7)
00001028  2F04      1396          move.l    D4,-(A7)
0000102A  2F02      1397          move.l    D2,-(A7)
0000102C  4879 0000 1398          pea       @m68kde~1_19.L
00001030  627E      
00001032  4E92      1399          jsr       (A2)
00001034  DEFC 0010 1400          add.w     #16,A7
                    1401   ; while(StartRamPtr < EndRamPtr)
                    1402   FillMemory_1:
00001038  B484      1403          cmp.l     D4,D2
0000103A  6408      1404          bhs.s     FillMemory_3
                    1405   ; *StartRamPtr++ = FillData ;
0000103C  2042      1406          move.l    D2,A0
0000103E  5282      1407          addq.l    #1,D2
00001040  1083      1408          move.b    D3,(A0)
00001042  60F4      1409          bra       FillMemory_1
                    1410   FillMemory_3:
00001044  4CDF 041C 1411          movem.l   (A7)+,D2/D3/D4/A2
00001048  4E75      1412          rts
                    1413   ; }
                    1414   ; void Load_SRecordFile()
                    1415   ; {
                    1416   _Load_SRecordFile:
0000104A  4E56 FFDC 1417          link      A6,#-36
0000104E  48E7 3F3C 1418          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001052  45EE FFFA 1419          lea       -6(A6),A2
00001056  47F8 0C04 1420          lea       _Get2HexDigits.L,A3
0000105A  49F9 0000 1421          lea       _printf.L,A4
0000105E  5782      
                    1422   ; int i, Address, AddressSize, DataByte, NumDataBytesToRead, LoadFailed, FailedAddress, AddressFail, SRecordCount = 0, ByteTotal = 0 ;
00001060  42AE FFEE 1423          clr.l     -18(A6)
00001064  3A7C 0000 1424          move.w    #0,A5
                    1425   ; int result, ByteCount ;
                    1426   ; char c, CheckSum, ReadCheckSum, HeaderType ;
                    1427   ; char *RamPtr ;                          // pointer to Memory where downloaded program will be stored
                    1428   ; LoadFailed = 0 ;                        //assume LOAD operation will pass
00001068  7E00      1429          moveq     #0,D7
                    1430   ; AddressFail = 0 ;
0000106A  42AE FFEA 1431          clr.l     -22(A6)
                    1432   ; Echo = 0 ;                              // don't echo S records during download
0000106E  42B9 0B00 1433          clr.l     _Echo.L
00001072  00E0      
                    1434   ; printf("\r\nUse HyperTerminal to Send Text File (.hex)\r\n") ;
00001074  4879 0000 1435          pea       @m68kde~1_20.L
00001078  62AE      
0000107A  4E94      1436          jsr       (A4)
0000107C  584F      1437          addq.w    #4,A7
                    1438   ; while(1)    {
                    1439   Load_SRecordFile_1:
                    1440   ; CheckSum = 0 ;
0000107E  4212      1441          clr.b     (A2)
                    1442   ; do {
                    1443   Load_SRecordFile_4:
                    1444   ; c = toupper(_getch()) ;
00001080  2F00      1445          move.l    D0,-(A7)
00001082  4EB8 0B68 1446          jsr       __getch
00001086  2200      1447          move.l    D0,D1
00001088  201F      1448          move.l    (A7)+,D0
0000108A  2F01      1449          move.l    D1,-(A7)
0000108C  4EB9 0000 1450          jsr       _toupper
00001090  5756      
00001092  584F      1451          addq.w    #4,A7
00001094  1C00      1452          move.b    D0,D6
                    1453   ; if(c == 0x1b )      // if break
00001096  0C06 001B 1454          cmp.b     #27,D6
0000109A  6604      1455          bne.s     Load_SRecordFile_6
                    1456   ; return;
0000109C  6000 0132 1457          bra       Load_SRecordFile_8
                    1458   Load_SRecordFile_6:
000010A0  0C06 0053 1459          cmp.b     #83,D6
000010A4  66DA      1460          bne       Load_SRecordFile_4
                    1461   ; }while(c != (char)('S'));   // wait for S start of header
                    1462   ; HeaderType = _getch() ;
000010A6  4EB8 0B68 1463          jsr       __getch
000010AA  1600      1464          move.b    D0,D3
                    1465   ; if(HeaderType == (char)('0') || HeaderType == (char)('5'))       // ignore s0, s5 records
000010AC  0C03 0030 1466          cmp.b     #48,D3
000010B0  6706      1467          beq.s     Load_SRecordFile_11
000010B2  0C03 0035 1468          cmp.b     #53,D3
000010B6  6604      1469          bne.s     Load_SRecordFile_9
                    1470   Load_SRecordFile_11:
                    1471   ; continue ;
000010B8  6000 00D2 1472          bra       Load_SRecordFile_23
                    1473   Load_SRecordFile_9:
                    1474   ; if(HeaderType >= (char)('7'))
000010BC  0C03 0037 1475          cmp.b     #55,D3
000010C0  6D04      1476          blt.s     Load_SRecordFile_12
                    1477   ; break ;                 // end load on s7,s8,s9 records
000010C2  6000 00CC 1478          bra       Load_SRecordFile_3
                    1479   Load_SRecordFile_12:
                    1480   ; // get the bytecount
                    1481   ; ByteCount = Get2HexDigits(&CheckSum) ;
000010C6  2F0A      1482          move.l    A2,-(A7)
000010C8  4E93      1483          jsr       (A3)
000010CA  584F      1484          addq.w    #4,A7
000010CC  2D40 FFF6 1485          move.l    D0,-10(A6)
                    1486   ; // get the address, 4 digits for s1, 6 digits for s2, and 8 digits for s3 record
                    1487   ; if(HeaderType == (char)('1')) {
000010D0  0C03 0031 1488          cmp.b     #49,D3
000010D4  660E      1489          bne.s     Load_SRecordFile_14
                    1490   ; AddressSize = 2 ;       // 2 byte address
000010D6  7A02      1491          moveq     #2,D5
                    1492   ; Address = Get4HexDigits(&CheckSum);
000010D8  2F0A      1493          move.l    A2,-(A7)
000010DA  4EB8 0C58 1494          jsr       _Get4HexDigits
000010DE  584F      1495          addq.w    #4,A7
000010E0  2800      1496          move.l    D0,D4
000010E2  6020      1497          bra.s     Load_SRecordFile_17
                    1498   Load_SRecordFile_14:
                    1499   ; }
                    1500   ; else if (HeaderType == (char)('2')) {
000010E4  0C03 0032 1501          cmp.b     #50,D3
000010E8  660E      1502          bne.s     Load_SRecordFile_16
                    1503   ; AddressSize = 3 ;       // 3 byte address
000010EA  7A03      1504          moveq     #3,D5
                    1505   ; Address = Get6HexDigits(&CheckSum) ;
000010EC  2F0A      1506          move.l    A2,-(A7)
000010EE  4EB8 0C7E 1507          jsr       _Get6HexDigits
000010F2  584F      1508          addq.w    #4,A7
000010F4  2800      1509          move.l    D0,D4
000010F6  600C      1510          bra.s     Load_SRecordFile_17
                    1511   Load_SRecordFile_16:
                    1512   ; }
                    1513   ; else    {
                    1514   ; AddressSize = 4 ;       // 4 byte address
000010F8  7A04      1515          moveq     #4,D5
                    1516   ; Address = Get8HexDigits(&CheckSum) ;
000010FA  2F0A      1517          move.l    A2,-(A7)
000010FC  4EB8 0CA4 1518          jsr       _Get8HexDigits
00001100  584F      1519          addq.w    #4,A7
00001102  2800      1520          move.l    D0,D4
                    1521   Load_SRecordFile_17:
                    1522   ; }
                    1523   ; RamPtr = (char *)(Address) ;                            // point to download area
00001104  2D44 FFFC 1524          move.l    D4,-4(A6)
                    1525   ; NumDataBytesToRead = ByteCount - AddressSize - 1 ;
00001108  202E FFF6 1526          move.l    -10(A6),D0
0000110C  9085      1527          sub.l     D5,D0
0000110E  5380      1528          subq.l    #1,D0
00001110  2D40 FFE2 1529          move.l    D0,-30(A6)
                    1530   ; for(i = 0; i < NumDataBytesToRead; i ++) {     // read in remaining data bytes (ignore address and checksum at the end
00001114  4282      1531          clr.l     D2
                    1532   Load_SRecordFile_18:
00001116  B4AE FFE2 1533          cmp.l     -30(A6),D2
0000111A  6C1E      1534          bge.s     Load_SRecordFile_20
                    1535   ; DataByte = Get2HexDigits(&CheckSum) ;
0000111C  2F0A      1536          move.l    A2,-(A7)
0000111E  4E93      1537          jsr       (A3)
00001120  584F      1538          addq.w    #4,A7
00001122  2D40 FFDE 1539          move.l    D0,-34(A6)
                    1540   ; *RamPtr++ = DataByte ;                      // store downloaded byte in Ram at specified address
00001126  202E FFDE 1541          move.l    -34(A6),D0
0000112A  206E FFFC 1542          move.l    -4(A6),A0
0000112E  52AE FFFC 1543          addq.l    #1,-4(A6)
00001132  1080      1544          move.b    D0,(A0)
                    1545   ; ByteTotal++;
00001134  524D      1546          addq.w    #1,A5
00001136  5282      1547          addq.l    #1,D2
00001138  60DC      1548          bra       Load_SRecordFile_18
                    1549   Load_SRecordFile_20:
                    1550   ; }
                    1551   ; // checksum is the 1's complement of the sum of all data pairs following the bytecount, i.e. it includes the address and the data itself
                    1552   ; ReadCheckSum = Get2HexDigits(0) ;
0000113A  42A7      1553          clr.l     -(A7)
0000113C  4E93      1554          jsr       (A3)
0000113E  584F      1555          addq.w    #4,A7
00001140  1D40 FFFB 1556          move.b    D0,-5(A6)
                    1557   ; if((~CheckSum&0Xff) != (ReadCheckSum&0Xff))   {
00001144  1012      1558          move.b    (A2),D0
00001146  4600      1559          not.b     D0
00001148  4880      1560          ext.w     D0
0000114A  C07C 00FF 1561          and.w     #255,D0
0000114E  122E FFFB 1562          move.b    -5(A6),D1
00001152  4881      1563          ext.w     D1
00001154  C27C 00FF 1564          and.w     #255,D1
00001158  B041      1565          cmp.w     D1,D0
0000115A  6708      1566          beq.s     Load_SRecordFile_21
                    1567   ; LoadFailed = 1 ;
0000115C  7E01      1568          moveq     #1,D7
                    1569   ; FailedAddress = Address ;
0000115E  2D44 FFE6 1570          move.l    D4,-26(A6)
                    1571   ; break;
00001162  602C      1572          bra.s     Load_SRecordFile_3
                    1573   Load_SRecordFile_21:
                    1574   ; }
                    1575   ; SRecordCount++ ;
00001164  52AE FFEE 1576          addq.l    #1,-18(A6)
                    1577   ; // display feedback on progress
                    1578   ; if(SRecordCount % 25 == 0)
00001168  2F2E FFEE 1579          move.l    -18(A6),-(A7)
0000116C  4878 0019 1580          pea       25
00001170  4EB9 0000 1581          jsr       LDIV
00001174  55A8      
00001176  202F 0004 1582          move.l    4(A7),D0
0000117A  504F      1583          addq.w    #8,A7
0000117C  4A80      1584          tst.l     D0
0000117E  660C      1585          bne.s     Load_SRecordFile_23
                    1586   ; putchar('.') ;
00001180  4878 002E 1587          pea       46
00001184  4EB9 0000 1588          jsr       _putch
00001188  5674      
0000118A  584F      1589          addq.w    #4,A7
                    1590   Load_SRecordFile_23:
0000118C  6000 FEF0 1591          bra       Load_SRecordFile_1
                    1592   Load_SRecordFile_3:
                    1593   ; }
                    1594   ; if(LoadFailed == 1) {
00001190  0C87 0000 1595          cmp.l     #1,D7
00001194  0001      
00001196  6610      1596          bne.s     Load_SRecordFile_25
                    1597   ; printf("\r\nLoad Failed at Address = [$%08X]\r\n", FailedAddress) ;
00001198  2F2E FFE6 1598          move.l    -26(A6),-(A7)
0000119C  4879 0000 1599          pea       @m68kde~1_21.L
000011A0  62DE      
000011A2  4E94      1600          jsr       (A4)
000011A4  504F      1601          addq.w    #8,A7
000011A6  600C      1602          bra.s     Load_SRecordFile_26
                    1603   Load_SRecordFile_25:
                    1604   ; }
                    1605   ; else
                    1606   ; printf("\r\nSuccess: Downloaded %d bytes\r\n", ByteTotal) ;
000011A8  2F0D      1607          move.l    A5,-(A7)
000011AA  4879 0000 1608          pea       @m68kde~1_22.L
000011AE  6304      
000011B0  4E94      1609          jsr       (A4)
000011B2  504F      1610          addq.w    #8,A7
                    1611   Load_SRecordFile_26:
                    1612   ; // pause at the end to wait for download to finish transmitting at the end of S8 etc
                    1613   ; for(i = 0; i < 400000; i ++)
000011B4  4282      1614          clr.l     D2
                    1615   Load_SRecordFile_27:
000011B6  0C82 0006 1616          cmp.l     #400000,D2
000011BA  1A80      
000011BC  6C04      1617          bge.s     Load_SRecordFile_29
000011BE  5282      1618          addq.l    #1,D2
000011C0  60F4      1619          bra       Load_SRecordFile_27
                    1620   Load_SRecordFile_29:
                    1621   ; ;
                    1622   ; FlushKeyboard() ;
000011C2  4EB8 0BA6 1623          jsr       _FlushKeyboard
                    1624   ; Echo = 1;
000011C6  23FC 0000 1625          move.l    #1,_Echo.L
000011CA  0001 0B00 
000011CE  00E0      
                    1626   Load_SRecordFile_8:
000011D0  4CDF 3CFC 1627          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000011D4  4E5E      1628          unlk      A6
000011D6  4E75      1629          rts
                    1630   ; }
                    1631   ; void MemoryChange(void)
                    1632   ; {
                    1633   _MemoryChange:
000011D8  48E7 3820 1634          movem.l   D2/D3/D4/A2,-(A7)
000011DC  45F9 0000 1635          lea       _printf.L,A2
000011E0  5782      
                    1636   ; unsigned char *RamPtr,c ; // pointer to memory
                    1637   ; int Data ;
                    1638   ; printf("\r\nExamine and Change Memory") ;
000011E2  4879 0000 1639          pea       @m68kde~1_23.L
000011E6  6326      
000011E8  4E92      1640          jsr       (A2)
000011EA  584F      1641          addq.w    #4,A7
                    1642   ; printf("\r\n<ESC> to Stop, <SPACE> to Advance, '-' to Go Back, <DATA> to change") ;
000011EC  4879 0000 1643          pea       @m68kde~1_24.L
000011F0  6342      
000011F2  4E92      1644          jsr       (A2)
000011F4  584F      1645          addq.w    #4,A7
                    1646   ; printf("\r\nEnter Address: ") ;
000011F6  4879 0000 1647          pea       @m68kde~1_25.L
000011FA  6388      
000011FC  4E92      1648          jsr       (A2)
000011FE  584F      1649          addq.w    #4,A7
                    1650   ; RamPtr = Get8HexDigits(0) ;
00001200  42A7      1651          clr.l     -(A7)
00001202  4EB8 0CA4 1652          jsr       _Get8HexDigits
00001206  584F      1653          addq.w    #4,A7
00001208  2600      1654          move.l    D0,D3
                    1655   ; while(1)    {
                    1656   MemoryChange_1:
                    1657   ; printf("\r\n[%08x] : %02x  ", RamPtr, *RamPtr) ;
0000120A  2043      1658          move.l    D3,A0
0000120C  1210      1659          move.b    (A0),D1
0000120E  C2BC 0000 1660          and.l     #255,D1
00001212  00FF      
00001214  2F01      1661          move.l    D1,-(A7)
00001216  2F03      1662          move.l    D3,-(A7)
00001218  4879 0000 1663          pea       @m68kde~1_26.L
0000121C  639A      
0000121E  4E92      1664          jsr       (A2)
00001220  DEFC 000C 1665          add.w     #12,A7
                    1666   ; c = tolower(_getch()) ;
00001224  2F00      1667          move.l    D0,-(A7)
00001226  4EB8 0B68 1668          jsr       __getch
0000122A  2200      1669          move.l    D0,D1
0000122C  201F      1670          move.l    (A7)+,D0
0000122E  2F01      1671          move.l    D1,-(A7)
00001230  4EB9 0000 1672          jsr       _tolower
00001234  56E0      
00001236  584F      1673          addq.w    #4,A7
00001238  1400      1674          move.b    D0,D2
                    1675   ; if(c == (char)(0x1b))
0000123A  0C02 001B 1676          cmp.b     #27,D2
0000123E  6604      1677          bne.s     MemoryChange_4
                    1678   ; return ;                                // abort on escape
00001240  6000 0090 1679          bra       MemoryChange_6
                    1680   MemoryChange_4:
                    1681   ; else if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f')) {  // are we trying to change data at this location by entering a hex char
00001244  0C02 0030 1682          cmp.b     #48,D2
00001248  6506      1683          blo.s     MemoryChange_10
0000124A  0C02 0039 1684          cmp.b     #57,D2
0000124E  6310      1685          bls.s     MemoryChange_9
                    1686   MemoryChange_10:
00001250  0C02 0061 1687          cmp.b     #97,D2
00001254  6500 006E 1688          blo       MemoryChange_7
00001258  0C02 0066 1689          cmp.b     #102,D2
0000125C  6200 0066 1690          bhi       MemoryChange_7
                    1691   MemoryChange_9:
                    1692   ; Data = (xtod(c) << 4) | (xtod(_getch()));
00001260  C4BC 0000 1693          and.l     #255,D2
00001264  00FF      
00001266  2F02      1694          move.l    D2,-(A7)
00001268  4EB8 0BD2 1695          jsr       _xtod
0000126C  584F      1696          addq.w    #4,A7
0000126E  C0BC 0000 1697          and.l     #255,D0
00001272  00FF      
00001274  E980      1698          asl.l     #4,D0
00001276  2F00      1699          move.l    D0,-(A7)
00001278  2F01      1700          move.l    D1,-(A7)
0000127A  4EB8 0B68 1701          jsr       __getch
0000127E  221F      1702          move.l    (A7)+,D1
00001280  2F00      1703          move.l    D0,-(A7)
00001282  4EB8 0BD2 1704          jsr       _xtod
00001286  584F      1705          addq.w    #4,A7
00001288  2200      1706          move.l    D0,D1
0000128A  201F      1707          move.l    (A7)+,D0
0000128C  C2BC 0000 1708          and.l     #255,D1
00001290  00FF      
00001292  8081      1709          or.l      D1,D0
00001294  2800      1710          move.l    D0,D4
                    1711   ; *RamPtr = (char)(Data) ;
00001296  2043      1712          move.l    D3,A0
00001298  1084      1713          move.b    D4,(A0)
                    1714   ; if(*RamPtr != Data) {
0000129A  2043      1715          move.l    D3,A0
0000129C  1010      1716          move.b    (A0),D0
0000129E  C0BC 0000 1717          and.l     #255,D0
000012A2  00FF      
000012A4  B084      1718          cmp.l     D4,D0
000012A6  671A      1719          beq.s     MemoryChange_11
                    1720   ; printf("\r\nWarning Change Failed: Wrote [%02x], Read [%02x]", Data, *RamPtr) ;
000012A8  2043      1721          move.l    D3,A0
000012AA  1210      1722          move.b    (A0),D1
000012AC  C2BC 0000 1723          and.l     #255,D1
000012B0  00FF      
000012B2  2F01      1724          move.l    D1,-(A7)
000012B4  2F04      1725          move.l    D4,-(A7)
000012B6  4879 0000 1726          pea       @m68kde~1_27.L
000012BA  63AC      
000012BC  4E92      1727          jsr       (A2)
000012BE  DEFC 000C 1728          add.w     #12,A7
                    1729   MemoryChange_11:
000012C2  6008      1730          bra.s     MemoryChange_13
                    1731   MemoryChange_7:
                    1732   ; }
                    1733   ; }
                    1734   ; else if(c == (char)('-'))
000012C4  0C02 002D 1735          cmp.b     #45,D2
000012C8  6602      1736          bne.s     MemoryChange_13
                    1737   ; RamPtr -= 2 ; ;
000012CA  5583      1738          subq.l    #2,D3
                    1739   MemoryChange_13:
                    1740   ; RamPtr ++ ;
000012CC  5283      1741          addq.l    #1,D3
000012CE  6000 FF3A 1742          bra       MemoryChange_1
                    1743   MemoryChange_6:
000012D2  4CDF 041C 1744          movem.l   (A7)+,D2/D3/D4/A2
000012D6  4E75      1745          rts
                    1746   ; }
                    1747   ; }
                    1748   ; /*******************************************************************
                    1749   ; ** Write a program to SPI Flash Chip from memory and verify by reading back
                    1750   ; ********************************************************************/
                    1751   ; void ProgramFlashChip(void)
                    1752   ; {
                    1753   _ProgramFlashChip:
000012D8  4E75      1754          rts
                    1755   ; //
                    1756   ; // TODO : put your code here to program the 1st 256k of ram (where user program is held at hex 08000000) to SPI flash chip
                    1757   ; // TODO : then verify by reading it back and comparing to memory
                    1758   ; //
                    1759   ; }
                    1760   ; /*************************************************************************
                    1761   ; ** Load a program from SPI Flash Chip and copy to Dram
                    1762   ; **************************************************************************/
                    1763   ; void LoadFromFlashChip(void)
                    1764   ; {
                    1765   _LoadFromFlashChip:
                    1766   ; printf("\r\nLoading Program From SPI Flash....") ;
000012DA  4879 0000 1767          pea       @m68kde~1_28.L
000012DE  63E0      
000012E0  4EB9 0000 1768          jsr       _printf
000012E4  5782      
000012E6  584F      1769          addq.w    #4,A7
000012E8  4E75      1770          rts
                    1771   ; //
                    1772   ; // TODO : put your code here to read 256k of data from SPI flash chip and store in user ram starting at hex 08000000
                    1773   ; //
                    1774   ; }
                    1775   ; // get rid of excess spaces
                    1776   ; void FormatInstructionForTrace(void)
                    1777   ; {
                    1778   _FormatInstructionForTrace:
000012EA  4E56 FF9C 1779          link      A6,#-100
000012EE  48E7 3C20 1780          movem.l   D2/D3/D4/D5/A2,-(A7)
000012F2  45EE FF9C 1781          lea       -100(A6),A2
                    1782   ; unsigned short int i ;
                    1783   ; char c, temp[100], *iptr, *tempptr ;
                    1784   ; for(i=0; i < 100; i++)
000012F6  4244      1785          clr.w     D4
                    1786   FormatInstructionForTrace_1:
000012F8  0C44 0064 1787          cmp.w     #100,D4
000012FC  640E      1788          bhs.s     FormatInstructionForTrace_3
                    1789   ; temp[i] = 0 ;
000012FE  C8BC 0000 1790          and.l     #65535,D4
00001302  FFFF      
00001304  4232 4800 1791          clr.b     0(A2,D4.L)
00001308  5244      1792          addq.w    #1,D4
0000130A  60EC      1793          bra       FormatInstructionForTrace_1
                    1794   FormatInstructionForTrace_3:
                    1795   ; iptr = Instruction ;
0000130C  41F9 0B00 1796          lea       _Instruction.L,A0
00001310  04E2      
00001312  2408      1797          move.l    A0,D2
                    1798   ; tempptr = temp ;
00001314  2A0A      1799          move.l    A2,D5
                    1800   ; do{
                    1801   FormatInstructionForTrace_4:
                    1802   ; c = *iptr++ ;
00001316  2042      1803          move.l    D2,A0
00001318  5282      1804          addq.l    #1,D2
0000131A  1610      1805          move.b    (A0),D3
                    1806   ; *tempptr++ = c ;  // copy chars over
0000131C  2045      1807          move.l    D5,A0
0000131E  5285      1808          addq.l    #1,D5
00001320  1083      1809          move.b    D3,(A0)
                    1810   ; if(c == ' ')  {   // if copied space
00001322  0C03 0020 1811          cmp.b     #32,D3
00001326  6622      1812          bne.s     FormatInstructionForTrace_6
                    1813   ; while(*iptr == ' ') {
                    1814   FormatInstructionForTrace_8:
00001328  2042      1815          move.l    D2,A0
0000132A  1010      1816          move.b    (A0),D0
0000132C  0C00 0020 1817          cmp.b     #32,D0
00001330  660C      1818          bne.s     FormatInstructionForTrace_10
                    1819   ; if(*iptr == 0)  // if end of string then done
00001332  2042      1820          move.l    D2,A0
00001334  1010      1821          move.b    (A0),D0
00001336  6602      1822          bne.s     FormatInstructionForTrace_11
                    1823   ; break ;
00001338  6004      1824          bra.s     FormatInstructionForTrace_10
                    1825   FormatInstructionForTrace_11:
                    1826   ; iptr++ ; // skip over remaining spaces
0000133A  5282      1827          addq.l    #1,D2
0000133C  60EA      1828          bra       FormatInstructionForTrace_8
                    1829   FormatInstructionForTrace_10:
                    1830   ; }
                    1831   ; strcat(tempptr,iptr) ;
0000133E  2F02      1832          move.l    D2,-(A7)
00001340  2F05      1833          move.l    D5,-(A7)
00001342  4EB9 0000 1834          jsr       _strcat
00001346  5740      
00001348  504F      1835          addq.w    #8,A7
                    1836   FormatInstructionForTrace_6:
0000134A  4A03      1837          tst.b     D3
0000134C  66C8      1838          bne       FormatInstructionForTrace_4
                    1839   ; }
                    1840   ; }while(c != 0) ;
                    1841   ; strcpyInstruction(temp) ;
0000134E  2F0A      1842          move.l    A2,-(A7)
00001350  4EB8 0CE6 1843          jsr       _strcpyInstruction
00001354  584F      1844          addq.w    #4,A7
00001356  4CDF 043C 1845          movem.l   (A7)+,D2/D3/D4/D5/A2
0000135A  4E5E      1846          unlk      A6
0000135C  4E75      1847          rts
                    1848   ; }
                    1849   ; //////////////////////////////////////////////////////////////////////////////////////////////////
                    1850   ; // IMPORTANT
                    1851   ; // TG68 does not support the Native Trace mode of the original 68000 so tracing
                    1852   ; // has to be done with an interrupt (IRQ Level 6)
                    1853   ; //
                    1854   ; // To allow the 68000 to execute one more instruction after each pseudo trace (IRQ6)
                    1855   ; // the IRQ is removed in hardware once the TG68 reads the IRQ autovector (i.e. acknowledges the IRQ)
                    1856   ; //
                    1857   ; // on return from the IRQ service handler, the first access to the user memory program space
                    1858   ; // generates a fresh IRQ (in hardware) to generate a new trace, this allows the tg68 to
                    1859   ; // execute one more new instruction (without it the TG68 would trace on the same instruction
                    1860   ; // each time and not after the next one). It also means it doesn't simgle step outside the user
                    1861   ; // program area
                    1862   ; //
                    1863   ; // The bottom line is the Trace handler, which includes the Dump registers below
                    1864   ; // cannot access the user memory to display for example the Instruction Opcode or to disassemble etc
                    1865   ; // as this would lead to a new IRQ being reset and the TG68 would trace on same instruction
                    1866   ; // NOT SURE THIS IS TRUE NOW THAT TRACE HANDLER HAS BEEN MODIVIED TO NOT AUTOMATICALLY GENERATE A TRACE EXCEPTION
                    1867   ; // INSTEAD IT IS DONE IN THE 'N' COMMAND FOR NEXT
                    1868   ; /////////////////////////////////////////////////////////////////////////////////////////////////////
                    1869   ; void DumpRegisters()
                    1870   ; {
                    1871   _DumpRegisters:
0000135E  48E7 3F3C 1872          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
00001362  45F9 0000 1873          lea       _putch.L,A2
00001366  5674      
00001368  47F9 0000 1874          lea       _printf.L,A3
0000136C  5782      
0000136E  49F9 0B00 1875          lea       _SR.L,A4
00001372  012C      
00001374  4BF9 0B00 1876          lea       _WatchPointString.L,A5
00001378  01C2      
                    1877   ; short i, x, j, k ;
                    1878   ; unsigned char c, *BytePointer;
                    1879   ; // buld up strings for displaying watchpoints
                    1880   ; for(x = 0; x < (short)(8); x++)
0000137A  4242      1881          clr.w     D2
                    1882   DumpRegisters_1:
0000137C  0C42 0008 1883          cmp.w     #8,D2
00001380  6C00 01C6 1884          bge       DumpRegisters_3
                    1885   ; {
                    1886   ; if(WatchPointSetOrCleared[x] == 1)
00001384  48C2      1887          ext.l     D2
00001386  2002      1888          move.l    D2,D0
00001388  E588      1889          lsl.l     #2,D0
0000138A  41F9 0B00 1890          lea       _WatchPointSetOrCleared.L,A0
0000138E  01A2      
00001390  2030 0800 1891          move.l    0(A0,D0.L),D0
00001394  0C80 0000 1892          cmp.l     #1,D0
00001398  0001      
0000139A  6600 0186 1893          bne       DumpRegisters_4
                    1894   ; {
                    1895   ; sprintf(WatchPointString[x], "$%08X  ", WatchPointAddress[x]) ;
0000139E  48C2      1896          ext.l     D2
000013A0  2202      1897          move.l    D2,D1
000013A2  E589      1898          lsl.l     #2,D1
000013A4  41F9 0B00 1899          lea       _WatchPointAddress.L,A0
000013A8  0182      
000013AA  2F30 1800 1900          move.l    0(A0,D1.L),-(A7)
000013AE  4879 0000 1901          pea       @m68kde~1_29.L
000013B2  6406      
000013B4  220D      1902          move.l    A5,D1
000013B6  48C2      1903          ext.l     D2
000013B8  2F00      1904          move.l    D0,-(A7)
000013BA  2002      1905          move.l    D2,D0
000013BC  C1FC 0064 1906          muls      #100,D0
000013C0  D280      1907          add.l     D0,D1
000013C2  201F      1908          move.l    (A7)+,D0
000013C4  2F01      1909          move.l    D1,-(A7)
000013C6  4EB9 0000 1910          jsr       _sprintf
000013CA  570C      
000013CC  DEFC 000C 1911          add.w     #12,A7
                    1912   ; BytePointer = (char *)(WatchPointAddress[x]) ;
000013D0  48C2      1913          ext.l     D2
000013D2  2002      1914          move.l    D2,D0
000013D4  E588      1915          lsl.l     #2,D0
000013D6  41F9 0B00 1916          lea       _WatchPointAddress.L,A0
000013DA  0182      
000013DC  2A30 0800 1917          move.l    0(A0,D0.L),D5
                    1918   ; for(j = 0; j < (short)(16); j+=2)
000013E0  4243      1919          clr.w     D3
                    1920   DumpRegisters_6:
000013E2  0C43 0010 1921          cmp.w     #16,D3
000013E6  6C00 0082 1922          bge       DumpRegisters_8
                    1923   ; {
                    1924   ; for(k = 0; k < (short)(2); k++)
000013EA  4246      1925          clr.w     D6
                    1926   DumpRegisters_9:
000013EC  0C46 0002 1927          cmp.w     #2,D6
000013F0  6C00 0052 1928          bge       DumpRegisters_11
                    1929   ; {
                    1930   ; sprintf(TempString, "%02X", BytePointer[j+k]) ;
000013F4  2045      1931          move.l    D5,A0
000013F6  48C3      1932          ext.l     D3
000013F8  2203      1933          move.l    D3,D1
000013FA  48C6      1934          ext.l     D6
000013FC  D286      1935          add.l     D6,D1
000013FE  1230 1800 1936          move.b    0(A0,D1.L),D1
00001402  C2BC 0000 1937          and.l     #255,D1
00001406  00FF      
00001408  2F01      1938          move.l    D1,-(A7)
0000140A  4879 0000 1939          pea       @m68kde~1_14.L
0000140E  6236      
00001410  4879 0B00 1940          pea       _TempString.L
00001414  0546      
00001416  4EB9 0000 1941          jsr       _sprintf
0000141A  570C      
0000141C  DEFC 000C 1942          add.w     #12,A7
                    1943   ; strcat(WatchPointString[x], TempString) ;
00001420  4879 0B00 1944          pea       _TempString.L
00001424  0546      
00001426  220D      1945          move.l    A5,D1
00001428  48C2      1946          ext.l     D2
0000142A  2F00      1947          move.l    D0,-(A7)
0000142C  2002      1948          move.l    D2,D0
0000142E  C1FC 0064 1949          muls      #100,D0
00001432  D280      1950          add.l     D0,D1
00001434  201F      1951          move.l    (A7)+,D0
00001436  2F01      1952          move.l    D1,-(A7)
00001438  4EB9 0000 1953          jsr       _strcat
0000143C  5740      
0000143E  504F      1954          addq.w    #8,A7
00001440  5246      1955          addq.w    #1,D6
00001442  60A8      1956          bra       DumpRegisters_9
                    1957   DumpRegisters_11:
                    1958   ; }
                    1959   ; strcat(WatchPointString[x]," ") ;
00001444  4879 0000 1960          pea       @m68kde~1_30.L
00001448  640E      
0000144A  220D      1961          move.l    A5,D1
0000144C  48C2      1962          ext.l     D2
0000144E  2F00      1963          move.l    D0,-(A7)
00001450  2002      1964          move.l    D2,D0
00001452  C1FC 0064 1965          muls      #100,D0
00001456  D280      1966          add.l     D0,D1
00001458  201F      1967          move.l    (A7)+,D0
0000145A  2F01      1968          move.l    D1,-(A7)
0000145C  4EB9 0000 1969          jsr       _strcat
00001460  5740      
00001462  504F      1970          addq.w    #8,A7
00001464  5443      1971          addq.w    #2,D3
00001466  6000 FF7A 1972          bra       DumpRegisters_6
                    1973   DumpRegisters_8:
                    1974   ; }
                    1975   ; strcat(WatchPointString[x], "  ") ;
0000146A  4879 0000 1976          pea       @m68kde~1_15.L
0000146E  623C      
00001470  220D      1977          move.l    A5,D1
00001472  48C2      1978          ext.l     D2
00001474  2F00      1979          move.l    D0,-(A7)
00001476  2002      1980          move.l    D2,D0
00001478  C1FC 0064 1981          muls      #100,D0
0000147C  D280      1982          add.l     D0,D1
0000147E  201F      1983          move.l    (A7)+,D0
00001480  2F01      1984          move.l    D1,-(A7)
00001482  4EB9 0000 1985          jsr       _strcat
00001486  5740      
00001488  504F      1986          addq.w    #8,A7
                    1987   ; BytePointer = (char *)(WatchPointAddress[x]) ;
0000148A  48C2      1988          ext.l     D2
0000148C  2002      1989          move.l    D2,D0
0000148E  E588      1990          lsl.l     #2,D0
00001490  41F9 0B00 1991          lea       _WatchPointAddress.L,A0
00001494  0182      
00001496  2A30 0800 1992          move.l    0(A0,D0.L),D5
                    1993   ; for(j = 0; j < (short)(16); j++)
0000149A  4243      1994          clr.w     D3
                    1995   DumpRegisters_12:
0000149C  0C43 0010 1996          cmp.w     #16,D3
000014A0  6C00 007E 1997          bge       DumpRegisters_14
                    1998   ; {
                    1999   ; c = ((char)(BytePointer[j]) & 0x7f) ;
000014A4  2045      2000          move.l    D5,A0
000014A6  48C3      2001          ext.l     D3
000014A8  1030 3800 2002          move.b    0(A0,D3.L),D0
000014AC  C03C 007F 2003          and.b     #127,D0
000014B0  1E00      2004          move.b    D0,D7
                    2005   ; if((c > (char)(0x7f)) || (c < (char)(' ')))
000014B2  0C07 007F 2006          cmp.b     #127,D7
000014B6  6206      2007          bhi.s     DumpRegisters_17
000014B8  0C07 0020 2008          cmp.b     #32,D7
000014BC  6416      2009          bhs.s     DumpRegisters_15
                    2010   DumpRegisters_17:
                    2011   ; sprintf(TempString, ".") ;
000014BE  4879 0000 2012          pea       @m68kde~1_31.L
000014C2  6410      
000014C4  4879 0B00 2013          pea       _TempString.L
000014C8  0546      
000014CA  4EB9 0000 2014          jsr       _sprintf
000014CE  570C      
000014D0  504F      2015          addq.w    #8,A7
000014D2  6026      2016          bra.s     DumpRegisters_16
                    2017   DumpRegisters_15:
                    2018   ; else
                    2019   ; sprintf(TempString, "%c", BytePointer[j]) ;
000014D4  2045      2020          move.l    D5,A0
000014D6  48C3      2021          ext.l     D3
000014D8  1230 3800 2022          move.b    0(A0,D3.L),D1
000014DC  C2BC 0000 2023          and.l     #255,D1
000014E0  00FF      
000014E2  2F01      2024          move.l    D1,-(A7)
000014E4  4879 0000 2025          pea       @m68kde~1_32.L
000014E8  6412      
000014EA  4879 0B00 2026          pea       _TempString.L
000014EE  0546      
000014F0  4EB9 0000 2027          jsr       _sprintf
000014F4  570C      
000014F6  DEFC 000C 2028          add.w     #12,A7
                    2029   DumpRegisters_16:
                    2030   ; strcat(WatchPointString[x], TempString) ;
000014FA  4879 0B00 2031          pea       _TempString.L
000014FE  0546      
00001500  220D      2032          move.l    A5,D1
00001502  48C2      2033          ext.l     D2
00001504  2F00      2034          move.l    D0,-(A7)
00001506  2002      2035          move.l    D2,D0
00001508  C1FC 0064 2036          muls      #100,D0
0000150C  D280      2037          add.l     D0,D1
0000150E  201F      2038          move.l    (A7)+,D0
00001510  2F01      2039          move.l    D1,-(A7)
00001512  4EB9 0000 2040          jsr       _strcat
00001516  5740      
00001518  504F      2041          addq.w    #8,A7
0000151A  5243      2042          addq.w    #1,D3
0000151C  6000 FF7E 2043          bra       DumpRegisters_12
                    2044   DumpRegisters_14:
00001520  6020      2045          bra.s     DumpRegisters_5
                    2046   DumpRegisters_4:
                    2047   ; }
                    2048   ; }
                    2049   ; else
                    2050   ; strcpy(WatchPointString[x], "") ;
00001522  4879 0000 2051          pea       @m68kde~1_33.L
00001526  6416      
00001528  220D      2052          move.l    A5,D1
0000152A  48C2      2053          ext.l     D2
0000152C  2F00      2054          move.l    D0,-(A7)
0000152E  2002      2055          move.l    D2,D0
00001530  C1FC 0064 2056          muls      #100,D0
00001534  D280      2057          add.l     D0,D1
00001536  201F      2058          move.l    (A7)+,D0
00001538  2F01      2059          move.l    D1,-(A7)
0000153A  4EB9 0000 2060          jsr       _strcpy
0000153E  5586      
00001540  504F      2061          addq.w    #8,A7
                    2062   DumpRegisters_5:
00001542  5242      2063          addq.w    #1,D2
00001544  6000 FE36 2064          bra       DumpRegisters_1
                    2065   DumpRegisters_3:
                    2066   ; }
                    2067   ; printf("\r\n\r\n D0 = $%08X  A0 = $%08X",d0,a0) ;
00001548  2F39 0B00 2068          move.l    _a0.L,-(A7)
0000154C  0104      
0000154E  2F39 0B00 2069          move.l    _d0.L,-(A7)
00001552  00E4      
00001554  4879 0000 2070          pea       @m68kde~1_34.L
00001558  6418      
0000155A  4E93      2071          jsr       (A3)
0000155C  DEFC 000C 2072          add.w     #12,A7
                    2073   ; printf("\r\n D1 = $%08X  A1 = $%08X",d1,a1) ;
00001560  2F39 0B00 2074          move.l    _a1.L,-(A7)
00001564  0108      
00001566  2F39 0B00 2075          move.l    _d1.L,-(A7)
0000156A  00E8      
0000156C  4879 0000 2076          pea       @m68kde~1_35.L
00001570  6434      
00001572  4E93      2077          jsr       (A3)
00001574  DEFC 000C 2078          add.w     #12,A7
                    2079   ; printf("\r\n D2 = $%08X  A2 = $%08X",d2,a2) ;
00001578  2F39 0B00 2080          move.l    _a2.L,-(A7)
0000157C  010C      
0000157E  2F39 0B00 2081          move.l    _d2.L,-(A7)
00001582  00EC      
00001584  4879 0000 2082          pea       @m68kde~1_36.L
00001588  644E      
0000158A  4E93      2083          jsr       (A3)
0000158C  DEFC 000C 2084          add.w     #12,A7
                    2085   ; printf("\r\n D3 = $%08X  A3 = $%08X",d3,a3) ;
00001590  2F39 0B00 2086          move.l    _a3.L,-(A7)
00001594  0110      
00001596  2F39 0B00 2087          move.l    _d3.L,-(A7)
0000159A  00F0      
0000159C  4879 0000 2088          pea       @m68kde~1_37.L
000015A0  6468      
000015A2  4E93      2089          jsr       (A3)
000015A4  DEFC 000C 2090          add.w     #12,A7
                    2091   ; printf("\r\n D4 = $%08X  A4 = $%08X",d4,a4) ;
000015A8  2F39 0B00 2092          move.l    _a4.L,-(A7)
000015AC  0114      
000015AE  2F39 0B00 2093          move.l    _d4.L,-(A7)
000015B2  00F4      
000015B4  4879 0000 2094          pea       @m68kde~1_38.L
000015B8  6482      
000015BA  4E93      2095          jsr       (A3)
000015BC  DEFC 000C 2096          add.w     #12,A7
                    2097   ; printf("\r\n D5 = $%08X  A5 = $%08X",d5,a5) ;
000015C0  2F39 0B00 2098          move.l    _a5.L,-(A7)
000015C4  0118      
000015C6  2F39 0B00 2099          move.l    _d5.L,-(A7)
000015CA  00F8      
000015CC  4879 0000 2100          pea       @m68kde~1_39.L
000015D0  649C      
000015D2  4E93      2101          jsr       (A3)
000015D4  DEFC 000C 2102          add.w     #12,A7
                    2103   ; printf("\r\n D6 = $%08X  A6 = $%08X",d6,a6) ;
000015D8  2F39 0B00 2104          move.l    _a6.L,-(A7)
000015DC  011C      
000015DE  2F39 0B00 2105          move.l    _d6.L,-(A7)
000015E2  00FC      
000015E4  4879 0000 2106          pea       @m68kde~1_40.L
000015E8  64B6      
000015EA  4E93      2107          jsr       (A3)
000015EC  DEFC 000C 2108          add.w     #12,A7
                    2109   ; printf("\r\n D7 = $%08X  A7 = $%08X",d7,((SR & (unsigned short int)(0x2000)) == ((unsigned short int)(0x2000))) ? SSP : USP) ;
000015F0  3214      2110          move.w    (A4),D1
000015F2  C27C 2000 2111          and.w     #8192,D1
000015F6  0C41 2000 2112          cmp.w     #8192,D1
000015FA  6608      2113          bne.s     DumpRegisters_18
000015FC  2239 0B00 2114          move.l    _SSP.L,D1
00001600  0124      
00001602  6006      2115          bra.s     DumpRegisters_19
                    2116   DumpRegisters_18:
00001604  2239 0B00 2117          move.l    _USP.L,D1
00001608  0128      
                    2118   DumpRegisters_19:
0000160A  2F01      2119          move.l    D1,-(A7)
0000160C  2F39 0B00 2120          move.l    _d7.L,-(A7)
00001610  0100      
00001612  4879 0000 2121          pea       @m68kde~1_41.L
00001616  64D0      
00001618  4E93      2122          jsr       (A3)
0000161A  DEFC 000C 2123          add.w     #12,A7
                    2124   ; printf("\r\n\r\nUSP = $%08X  (A7) User SP", USP ) ;
0000161E  2F39 0B00 2125          move.l    _USP.L,-(A7)
00001622  0128      
00001624  4879 0000 2126          pea       @m68kde~1_42.L
00001628  64EA      
0000162A  4E93      2127          jsr       (A3)
0000162C  504F      2128          addq.w    #8,A7
                    2129   ; printf("\r\nSSP = $%08X  (A7) Supervisor SP", SSP) ;
0000162E  2F39 0B00 2130          move.l    _SSP.L,-(A7)
00001632  0124      
00001634  4879 0000 2131          pea       @m68kde~1_43.L
00001638  6508      
0000163A  4E93      2132          jsr       (A3)
0000163C  504F      2133          addq.w    #8,A7
                    2134   ; printf("\r\n SR = $%04X   ",SR) ;
0000163E  3214      2135          move.w    (A4),D1
00001640  C2BC 0000 2136          and.l     #65535,D1
00001644  FFFF      
00001646  2F01      2137          move.l    D1,-(A7)
00001648  4879 0000 2138          pea       @m68kde~1_44.L
0000164C  652A      
0000164E  4E93      2139          jsr       (A3)
00001650  504F      2140          addq.w    #8,A7
                    2141   ; // display the status word in characters etc.
                    2142   ; printf("   [") ;
00001652  4879 0000 2143          pea       @m68kde~1_45.L
00001656  653C      
00001658  4E93      2144          jsr       (A3)
0000165A  584F      2145          addq.w    #4,A7
                    2146   ; if((SR & (unsigned short int)(0x8000)) == (unsigned short int)(0x8000)) putchar('T') ; else putchar('-') ;      // Trace bit(bit 15)
0000165C  3014      2147          move.w    (A4),D0
0000165E  C07C 8000 2148          and.w     #32768,D0
00001662  0C40 8000 2149          cmp.w     #32768,D0
00001666  660A      2150          bne.s     DumpRegisters_20
00001668  4878 0054 2151          pea       84
0000166C  4E92      2152          jsr       (A2)
0000166E  584F      2153          addq.w    #4,A7
00001670  6008      2154          bra.s     DumpRegisters_21
                    2155   DumpRegisters_20:
00001672  4878 002D 2156          pea       45
00001676  4E92      2157          jsr       (A2)
00001678  584F      2158          addq.w    #4,A7
                    2159   DumpRegisters_21:
                    2160   ; if((SR & (unsigned short int)(0x2000)) == (unsigned short int)(0x2000)) putchar('S') ; else putchar('U') ;      // supervisor bit  (bit 13)
0000167A  3014      2161          move.w    (A4),D0
0000167C  C07C 2000 2162          and.w     #8192,D0
00001680  0C40 2000 2163          cmp.w     #8192,D0
00001684  660A      2164          bne.s     DumpRegisters_22
00001686  4878 0053 2165          pea       83
0000168A  4E92      2166          jsr       (A2)
0000168C  584F      2167          addq.w    #4,A7
0000168E  6008      2168          bra.s     DumpRegisters_23
                    2169   DumpRegisters_22:
00001690  4878 0055 2170          pea       85
00001694  4E92      2171          jsr       (A2)
00001696  584F      2172          addq.w    #4,A7
                    2173   DumpRegisters_23:
                    2174   ; if((SR & (unsigned short int)(0x0400)) == (unsigned short int)(0x0400)) putchar('1') ; else putchar('0') ;      // IRQ2 Bit (bit 10)
00001698  3014      2175          move.w    (A4),D0
0000169A  C07C 0400 2176          and.w     #1024,D0
0000169E  0C40 0400 2177          cmp.w     #1024,D0
000016A2  660A      2178          bne.s     DumpRegisters_24
000016A4  4878 0031 2179          pea       49
000016A8  4E92      2180          jsr       (A2)
000016AA  584F      2181          addq.w    #4,A7
000016AC  6008      2182          bra.s     DumpRegisters_25
                    2183   DumpRegisters_24:
000016AE  4878 0030 2184          pea       48
000016B2  4E92      2185          jsr       (A2)
000016B4  584F      2186          addq.w    #4,A7
                    2187   DumpRegisters_25:
                    2188   ; if((SR & (unsigned short int)(0x0200)) == (unsigned short int)(0x0200)) putchar('1') ; else putchar('0') ;      // IRQ1 Bit (bit 9)
000016B6  3014      2189          move.w    (A4),D0
000016B8  C07C 0200 2190          and.w     #512,D0
000016BC  0C40 0200 2191          cmp.w     #512,D0
000016C0  660A      2192          bne.s     DumpRegisters_26
000016C2  4878 0031 2193          pea       49
000016C6  4E92      2194          jsr       (A2)
000016C8  584F      2195          addq.w    #4,A7
000016CA  6008      2196          bra.s     DumpRegisters_27
                    2197   DumpRegisters_26:
000016CC  4878 0030 2198          pea       48
000016D0  4E92      2199          jsr       (A2)
000016D2  584F      2200          addq.w    #4,A7
                    2201   DumpRegisters_27:
                    2202   ; if((SR & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100)) putchar('1') ; else putchar('0') ;      // IRQ0 Bit (bit 8)
000016D4  3014      2203          move.w    (A4),D0
000016D6  C07C 0100 2204          and.w     #256,D0
000016DA  0C40 0100 2205          cmp.w     #256,D0
000016DE  660A      2206          bne.s     DumpRegisters_28
000016E0  4878 0031 2207          pea       49
000016E4  4E92      2208          jsr       (A2)
000016E6  584F      2209          addq.w    #4,A7
000016E8  6008      2210          bra.s     DumpRegisters_29
                    2211   DumpRegisters_28:
000016EA  4878 0030 2212          pea       48
000016EE  4E92      2213          jsr       (A2)
000016F0  584F      2214          addq.w    #4,A7
                    2215   DumpRegisters_29:
                    2216   ; if((SR & (unsigned short int)(0x0010)) == (unsigned short int)(0x0010)) putchar('X') ; else putchar('-') ;      // X Bit (bit 4)
000016F2  3014      2217          move.w    (A4),D0
000016F4  C07C 0010 2218          and.w     #16,D0
000016F8  0C40 0010 2219          cmp.w     #16,D0
000016FC  660A      2220          bne.s     DumpRegisters_30
000016FE  4878 0058 2221          pea       88
00001702  4E92      2222          jsr       (A2)
00001704  584F      2223          addq.w    #4,A7
00001706  6008      2224          bra.s     DumpRegisters_31
                    2225   DumpRegisters_30:
00001708  4878 002D 2226          pea       45
0000170C  4E92      2227          jsr       (A2)
0000170E  584F      2228          addq.w    #4,A7
                    2229   DumpRegisters_31:
                    2230   ; if((SR & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008)) putchar('N') ; else putchar('-') ;      // N Bit (bit 3)
00001710  3014      2231          move.w    (A4),D0
00001712  C07C 0008 2232          and.w     #8,D0
00001716  0C40 0008 2233          cmp.w     #8,D0
0000171A  660A      2234          bne.s     DumpRegisters_32
0000171C  4878 004E 2235          pea       78
00001720  4E92      2236          jsr       (A2)
00001722  584F      2237          addq.w    #4,A7
00001724  6008      2238          bra.s     DumpRegisters_33
                    2239   DumpRegisters_32:
00001726  4878 002D 2240          pea       45
0000172A  4E92      2241          jsr       (A2)
0000172C  584F      2242          addq.w    #4,A7
                    2243   DumpRegisters_33:
                    2244   ; if((SR & (unsigned short int)(0x0004)) == (unsigned short int)(0x0004)) putchar('Z') ; else putchar('-') ;      // Z Bit (bit 2)
0000172E  3014      2245          move.w    (A4),D0
00001730  C07C 0004 2246          and.w     #4,D0
00001734  0C40 0004 2247          cmp.w     #4,D0
00001738  660A      2248          bne.s     DumpRegisters_34
0000173A  4878 005A 2249          pea       90
0000173E  4E92      2250          jsr       (A2)
00001740  584F      2251          addq.w    #4,A7
00001742  6008      2252          bra.s     DumpRegisters_35
                    2253   DumpRegisters_34:
00001744  4878 002D 2254          pea       45
00001748  4E92      2255          jsr       (A2)
0000174A  584F      2256          addq.w    #4,A7
                    2257   DumpRegisters_35:
                    2258   ; if((SR & (unsigned short int)(0x0002)) == (unsigned short int)(0x0002)) putchar('V') ; else putchar('-') ;      // V Bit (bit 1)
0000174C  3014      2259          move.w    (A4),D0
0000174E  C07C 0002 2260          and.w     #2,D0
00001752  0C40 0002 2261          cmp.w     #2,D0
00001756  660A      2262          bne.s     DumpRegisters_36
00001758  4878 0056 2263          pea       86
0000175C  4E92      2264          jsr       (A2)
0000175E  584F      2265          addq.w    #4,A7
00001760  6008      2266          bra.s     DumpRegisters_37
                    2267   DumpRegisters_36:
00001762  4878 002D 2268          pea       45
00001766  4E92      2269          jsr       (A2)
00001768  584F      2270          addq.w    #4,A7
                    2271   DumpRegisters_37:
                    2272   ; if((SR & (unsigned short int)(0x0001)) == (unsigned short int)(0x0001)) putchar('C') ; else putchar('-') ;      // C Bit (bit 0)
0000176A  3014      2273          move.w    (A4),D0
0000176C  C07C 0001 2274          and.w     #1,D0
00001770  0C40 0001 2275          cmp.w     #1,D0
00001774  660A      2276          bne.s     DumpRegisters_38
00001776  4878 0043 2277          pea       67
0000177A  4E92      2278          jsr       (A2)
0000177C  584F      2279          addq.w    #4,A7
0000177E  6008      2280          bra.s     DumpRegisters_39
                    2281   DumpRegisters_38:
00001780  4878 002D 2282          pea       45
00001784  4E92      2283          jsr       (A2)
00001786  584F      2284          addq.w    #4,A7
                    2285   DumpRegisters_39:
                    2286   ; putchar(']') ;
00001788  4878 005D 2287          pea       93
0000178C  4E92      2288          jsr       (A2)
0000178E  584F      2289          addq.w    #4,A7
                    2290   ; printf("\r\n PC = $%08X  ", PC) ;
00001790  2F39 0B00 2291          move.l    _PC.L,-(A7)
00001794  0120      
00001796  4879 0000 2292          pea       @m68kde~1_46.L
0000179A  6542      
0000179C  4E93      2293          jsr       (A3)
0000179E  504F      2294          addq.w    #8,A7
                    2295   ; if(*(unsigned short int *)(PC) != 0x4e4e)   {
000017A0  2039 0B00 2296          move.l    _PC.L,D0
000017A4  0120      
000017A6  2040      2297          move.l    D0,A0
000017A8  3010      2298          move.w    (A0),D0
000017AA  0C40 4E4E 2299          cmp.w     #20046,D0
000017AE  6724      2300          beq.s     DumpRegisters_40
                    2301   ; DisassembleInstruction(PC) ;
000017B0  2F39 0B00 2302          move.l    _PC.L,-(A7)
000017B4  0120      
000017B6  4EB9 0000 2303          jsr       _DisassembleInstruction
000017BA  36E4      
000017BC  584F      2304          addq.w    #4,A7
                    2305   ; FormatInstructionForTrace() ;
000017BE  4EB8 12EA 2306          jsr       _FormatInstructionForTrace
                    2307   ; printf("%s", Instruction) ;
000017C2  4879 0B00 2308          pea       _Instruction.L
000017C6  04E2      
000017C8  4879 0000 2309          pea       @m68kde~1_47.L
000017CC  6552      
000017CE  4E93      2310          jsr       (A3)
000017D0  504F      2311          addq.w    #8,A7
000017D2  600A      2312          bra.s     DumpRegisters_41
                    2313   DumpRegisters_40:
                    2314   ; }
                    2315   ; else
                    2316   ; printf("[BREAKPOINT]") ;
000017D4  4879 0000 2317          pea       @m68kde~1_48.L
000017D8  6556      
000017DA  4E93      2318          jsr       (A3)
000017DC  584F      2319          addq.w    #4,A7
                    2320   DumpRegisters_41:
                    2321   ; printf("\r\n") ;
000017DE  4879 0000 2322          pea       @m68kde~1_1.L
000017E2  60D2      
000017E4  4E93      2323          jsr       (A3)
000017E6  584F      2324          addq.w    #4,A7
                    2325   ; for(i=0; i < 8; i++)    {
000017E8  4244      2326          clr.w     D4
                    2327   DumpRegisters_42:
000017EA  0C44 0008 2328          cmp.w     #8,D4
000017EE  6C00 0040 2329          bge       DumpRegisters_44
                    2330   ; if(WatchPointSetOrCleared[i] == 1)
000017F2  48C4      2331          ext.l     D4
000017F4  2004      2332          move.l    D4,D0
000017F6  E588      2333          lsl.l     #2,D0
000017F8  41F9 0B00 2334          lea       _WatchPointSetOrCleared.L,A0
000017FC  01A2      
000017FE  2030 0800 2335          move.l    0(A0,D0.L),D0
00001802  0C80 0000 2336          cmp.l     #1,D0
00001806  0001      
00001808  6622      2337          bne.s     DumpRegisters_45
                    2338   ; printf("\r\nWP%d = %s", i, WatchPointString[i]) ;
0000180A  220D      2339          move.l    A5,D1
0000180C  48C4      2340          ext.l     D4
0000180E  2F00      2341          move.l    D0,-(A7)
00001810  2004      2342          move.l    D4,D0
00001812  C1FC 0064 2343          muls      #100,D0
00001816  D280      2344          add.l     D0,D1
00001818  201F      2345          move.l    (A7)+,D0
0000181A  2F01      2346          move.l    D1,-(A7)
0000181C  48C4      2347          ext.l     D4
0000181E  2F04      2348          move.l    D4,-(A7)
00001820  4879 0000 2349          pea       @m68kde~1_49.L
00001824  6564      
00001826  4E93      2350          jsr       (A3)
00001828  DEFC 000C 2351          add.w     #12,A7
                    2352   DumpRegisters_45:
0000182C  5244      2353          addq.w    #1,D4
0000182E  60BA      2354          bra       DumpRegisters_42
                    2355   DumpRegisters_44:
00001830  4CDF 3CFC 2356          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00001834  4E75      2357          rts
                    2358   ; }
                    2359   ; }
                    2360   ; // Trace Exception Handler
                    2361   ; void DumpRegistersandPause(void)
                    2362   ; {
                    2363   _DumpRegistersandPause:
00001836  2F0A      2364          move.l    A2,-(A7)
00001838  45F9 0000 2365          lea       _printf.L,A2
0000183C  5782      
                    2366   ; printf("\r\n\r\n\r\n\r\n\r\n\r\nSingle Step  :[ON]") ;
0000183E  4879 0000 2367          pea       @m68kde~1_50.L
00001842  6570      
00001844  4E92      2368          jsr       (A2)
00001846  584F      2369          addq.w    #4,A7
                    2370   ; printf("\r\nBreak Points :[Disabled]") ;
00001848  4879 0000 2371          pea       @m68kde~1_51.L
0000184C  6590      
0000184E  4E92      2372          jsr       (A2)
00001850  584F      2373          addq.w    #4,A7
                    2374   ; DumpRegisters() ;
00001852  4EB8 135E 2375          jsr       _DumpRegisters
                    2376   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00001856  4879 0000 2377          pea       @m68kde~1_52.L
0000185A  65AC      
0000185C  4E92      2378          jsr       (A2)
0000185E  584F      2379          addq.w    #4,A7
                    2380   ; printf("\r\nPress <ESC> to Resume Program") ;
00001860  4879 0000 2381          pea       @m68kde~1_53.L
00001864  65D8      
00001866  4E92      2382          jsr       (A2)
00001868  584F      2383          addq.w    #4,A7
                    2384   ; menu() ;
0000186A  4EB9 0000 2385          jsr       _menu
0000186E  24A0      
00001870  245F      2386          move.l    (A7)+,A2
00001872  4E75      2387          rts
                    2388   ; }
                    2389   ; void ChangeRegisters(void)
                    2390   ; {
                    2391   _ChangeRegisters:
00001874  4E56 FFFC 2392          link      A6,#-4
00001878  48E7 303C 2393          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
0000187C  45F9 0000 2394          lea       _printf.L,A2
00001880  5782      
00001882  47EE FFFC 2395          lea       -4(A6),A3
00001886  49F8 0CA4 2396          lea       _Get8HexDigits.L,A4
0000188A  4BF8 0B68 2397          lea       __getch.L,A5
                    2398   ; // get register name d0-d7, a0-a7, up, sp, sr, pc
                    2399   ; int reg_val ;
                    2400   ; char c, reg[3] ;
                    2401   ; reg[0] = tolower(_getch()) ;
0000188E  2F00      2402          move.l    D0,-(A7)
00001890  4E95      2403          jsr       (A5)
00001892  2200      2404          move.l    D0,D1
00001894  201F      2405          move.l    (A7)+,D0
00001896  2F01      2406          move.l    D1,-(A7)
00001898  4EB9 0000 2407          jsr       _tolower
0000189C  56E0      
0000189E  584F      2408          addq.w    #4,A7
000018A0  1680      2409          move.b    D0,(A3)
                    2410   ; reg[1] = c = tolower(_getch()) ;
000018A2  2F00      2411          move.l    D0,-(A7)
000018A4  4E95      2412          jsr       (A5)
000018A6  2200      2413          move.l    D0,D1
000018A8  201F      2414          move.l    (A7)+,D0
000018AA  2F01      2415          move.l    D1,-(A7)
000018AC  4EB9 0000 2416          jsr       _tolower
000018B0  56E0      
000018B2  584F      2417          addq.w    #4,A7
000018B4  1400      2418          move.b    D0,D2
000018B6  1740 0001 2419          move.b    D0,1(A3)
                    2420   ; if(reg[0] == (char)('d'))  {    // change data register
000018BA  1013      2421          move.b    (A3),D0
000018BC  0C00 0064 2422          cmp.b     #100,D0
000018C0  6600 00AE 2423          bne       ChangeRegisters_1
                    2424   ; if((reg[1] > (char)('7')) || (reg[1] < (char)('0'))) {
000018C4  102B 0001 2425          move.b    1(A3),D0
000018C8  0C00 0037 2426          cmp.b     #55,D0
000018CC  6E0A      2427          bgt.s     ChangeRegisters_5
000018CE  102B 0001 2428          move.b    1(A3),D0
000018D2  0C00 0030 2429          cmp.b     #48,D0
000018D6  6C0E      2430          bge.s     ChangeRegisters_3
                    2431   ChangeRegisters_5:
                    2432   ; printf("\r\nIllegal Data Register : Use D0-D7.....\r\n") ;
000018D8  4879 0000 2433          pea       @m68kde~1_54.L
000018DC  65F8      
000018DE  4E92      2434          jsr       (A2)
000018E0  584F      2435          addq.w    #4,A7
                    2436   ; return ;
000018E2  6000 0244 2437          bra       ChangeRegisters_6
                    2438   ChangeRegisters_3:
                    2439   ; }
                    2440   ; else {
                    2441   ; printf("\r\nD%c = ", c) ;
000018E6  4882      2442          ext.w     D2
000018E8  48C2      2443          ext.l     D2
000018EA  2F02      2444          move.l    D2,-(A7)
000018EC  4879 0000 2445          pea       @m68kde~1_55.L
000018F0  6624      
000018F2  4E92      2446          jsr       (A2)
000018F4  504F      2447          addq.w    #8,A7
                    2448   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000018F6  42A7      2449          clr.l     -(A7)
000018F8  4E94      2450          jsr       (A4)
000018FA  584F      2451          addq.w    #4,A7
000018FC  2600      2452          move.l    D0,D3
                    2453   ; }
                    2454   ; // bit cludgy but d0-d7 not stored as an array for good reason
                    2455   ; if(c == (char)('0'))
000018FE  0C02 0030 2456          cmp.b     #48,D2
00001902  660A      2457          bne.s     ChangeRegisters_7
                    2458   ; d0 = reg_val ;
00001904  23C3 0B00 2459          move.l    D3,_d0.L
00001908  00E4      
0000190A  6000 0060 2460          bra       ChangeRegisters_20
                    2461   ChangeRegisters_7:
                    2462   ; else if(c == (char)('1'))
0000190E  0C02 0031 2463          cmp.b     #49,D2
00001912  660A      2464          bne.s     ChangeRegisters_9
                    2465   ; d1 = reg_val ;
00001914  23C3 0B00 2466          move.l    D3,_d1.L
00001918  00E8      
0000191A  6000 0050 2467          bra       ChangeRegisters_20
                    2468   ChangeRegisters_9:
                    2469   ; else if(c == (char)('2'))
0000191E  0C02 0032 2470          cmp.b     #50,D2
00001922  660A      2471          bne.s     ChangeRegisters_11
                    2472   ; d2 = reg_val ;
00001924  23C3 0B00 2473          move.l    D3,_d2.L
00001928  00EC      
0000192A  6000 0040 2474          bra       ChangeRegisters_20
                    2475   ChangeRegisters_11:
                    2476   ; else if(c == (char)('3'))
0000192E  0C02 0033 2477          cmp.b     #51,D2
00001932  6608      2478          bne.s     ChangeRegisters_13
                    2479   ; d3 = reg_val ;
00001934  23C3 0B00 2480          move.l    D3,_d3.L
00001938  00F0      
0000193A  6030      2481          bra.s     ChangeRegisters_20
                    2482   ChangeRegisters_13:
                    2483   ; else if(c == (char)('4'))
0000193C  0C02 0034 2484          cmp.b     #52,D2
00001940  6608      2485          bne.s     ChangeRegisters_15
                    2486   ; d4 = reg_val ;
00001942  23C3 0B00 2487          move.l    D3,_d4.L
00001946  00F4      
00001948  6022      2488          bra.s     ChangeRegisters_20
                    2489   ChangeRegisters_15:
                    2490   ; else if(c == (char)('5'))
0000194A  0C02 0035 2491          cmp.b     #53,D2
0000194E  6608      2492          bne.s     ChangeRegisters_17
                    2493   ; d5 = reg_val ;
00001950  23C3 0B00 2494          move.l    D3,_d5.L
00001954  00F8      
00001956  6014      2495          bra.s     ChangeRegisters_20
                    2496   ChangeRegisters_17:
                    2497   ; else if(c == (char)('6'))
00001958  0C02 0036 2498          cmp.b     #54,D2
0000195C  6608      2499          bne.s     ChangeRegisters_19
                    2500   ; d6 = reg_val ;
0000195E  23C3 0B00 2501          move.l    D3,_d6.L
00001962  00FC      
00001964  6006      2502          bra.s     ChangeRegisters_20
                    2503   ChangeRegisters_19:
                    2504   ; else
                    2505   ; d7 = reg_val ;
00001966  23C3 0B00 2506          move.l    D3,_d7.L
0000196A  0100      
                    2507   ChangeRegisters_20:
0000196C  6000 01B6 2508          bra       ChangeRegisters_51
                    2509   ChangeRegisters_1:
                    2510   ; }
                    2511   ; else if(reg[0] == (char)('a'))  {    // change address register, a7 is the user stack pointer, sp is the system stack pointer
00001970  1013      2512          move.b    (A3),D0
00001972  0C00 0061 2513          cmp.b     #97,D0
00001976  6600 00A6 2514          bne       ChangeRegisters_21
                    2515   ; if((c > (char)('7')) || (c < (char)('0'))) {
0000197A  0C02 0037 2516          cmp.b     #55,D2
0000197E  6E06      2517          bgt.s     ChangeRegisters_25
00001980  0C02 0030 2518          cmp.b     #48,D2
00001984  6C0E      2519          bge.s     ChangeRegisters_23
                    2520   ChangeRegisters_25:
                    2521   ; printf("\r\nIllegal Address Register : Use A0-A7.....\r\n") ;
00001986  4879 0000 2522          pea       @m68kde~1_56.L
0000198A  662E      
0000198C  4E92      2523          jsr       (A2)
0000198E  584F      2524          addq.w    #4,A7
                    2525   ; return ;
00001990  6000 0196 2526          bra       ChangeRegisters_6
                    2527   ChangeRegisters_23:
                    2528   ; }
                    2529   ; else {
                    2530   ; printf("\r\nA%c = ", c) ;
00001994  4882      2531          ext.w     D2
00001996  48C2      2532          ext.l     D2
00001998  2F02      2533          move.l    D2,-(A7)
0000199A  4879 0000 2534          pea       @m68kde~1_57.L
0000199E  665C      
000019A0  4E92      2535          jsr       (A2)
000019A2  504F      2536          addq.w    #8,A7
                    2537   ; reg_val = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
000019A4  42A7      2538          clr.l     -(A7)
000019A6  4E94      2539          jsr       (A4)
000019A8  584F      2540          addq.w    #4,A7
000019AA  2600      2541          move.l    D0,D3
                    2542   ; }
                    2543   ; // bit cludgy but a0-a7 not stored as an array for good reason
                    2544   ; if(c == (char)('0'))
000019AC  0C02 0030 2545          cmp.b     #48,D2
000019B0  660A      2546          bne.s     ChangeRegisters_26
                    2547   ; a0 = reg_val ;
000019B2  23C3 0B00 2548          move.l    D3,_a0.L
000019B6  0104      
000019B8  6000 0060 2549          bra       ChangeRegisters_39
                    2550   ChangeRegisters_26:
                    2551   ; else if(c == (char)('1'))
000019BC  0C02 0031 2552          cmp.b     #49,D2
000019C0  660A      2553          bne.s     ChangeRegisters_28
                    2554   ; a1 = reg_val ;
000019C2  23C3 0B00 2555          move.l    D3,_a1.L
000019C6  0108      
000019C8  6000 0050 2556          bra       ChangeRegisters_39
                    2557   ChangeRegisters_28:
                    2558   ; else if(c == (char)('2'))
000019CC  0C02 0032 2559          cmp.b     #50,D2
000019D0  660A      2560          bne.s     ChangeRegisters_30
                    2561   ; a2 = reg_val ;
000019D2  23C3 0B00 2562          move.l    D3,_a2.L
000019D6  010C      
000019D8  6000 0040 2563          bra       ChangeRegisters_39
                    2564   ChangeRegisters_30:
                    2565   ; else if(c == (char)('3'))
000019DC  0C02 0033 2566          cmp.b     #51,D2
000019E0  6608      2567          bne.s     ChangeRegisters_32
                    2568   ; a3 = reg_val ;
000019E2  23C3 0B00 2569          move.l    D3,_a3.L
000019E6  0110      
000019E8  6030      2570          bra.s     ChangeRegisters_39
                    2571   ChangeRegisters_32:
                    2572   ; else if(c == (char)('4'))
000019EA  0C02 0034 2573          cmp.b     #52,D2
000019EE  6608      2574          bne.s     ChangeRegisters_34
                    2575   ; a4 = reg_val ;
000019F0  23C3 0B00 2576          move.l    D3,_a4.L
000019F4  0114      
000019F6  6022      2577          bra.s     ChangeRegisters_39
                    2578   ChangeRegisters_34:
                    2579   ; else if(c == (char)('5'))
000019F8  0C02 0035 2580          cmp.b     #53,D2
000019FC  6608      2581          bne.s     ChangeRegisters_36
                    2582   ; a5 = reg_val ;
000019FE  23C3 0B00 2583          move.l    D3,_a5.L
00001A02  0118      
00001A04  6014      2584          bra.s     ChangeRegisters_39
                    2585   ChangeRegisters_36:
                    2586   ; else if(c == (char)('6'))
00001A06  0C02 0036 2587          cmp.b     #54,D2
00001A0A  6608      2588          bne.s     ChangeRegisters_38
                    2589   ; a6 = reg_val ;
00001A0C  23C3 0B00 2590          move.l    D3,_a6.L
00001A10  011C      
00001A12  6006      2591          bra.s     ChangeRegisters_39
                    2592   ChangeRegisters_38:
                    2593   ; else
                    2594   ; USP = reg_val ;
00001A14  23C3 0B00 2595          move.l    D3,_USP.L
00001A18  0128      
                    2596   ChangeRegisters_39:
00001A1A  6000 0108 2597          bra       ChangeRegisters_51
                    2598   ChangeRegisters_21:
                    2599   ; }
                    2600   ; else if((reg[0] == (char)('u')) && (c == (char)('s')))  {
00001A1E  1013      2601          move.b    (A3),D0
00001A20  0C00 0075 2602          cmp.b     #117,D0
00001A24  6600 004E 2603          bne       ChangeRegisters_40
00001A28  0C02 0073 2604          cmp.b     #115,D2
00001A2C  6600 0046 2605          bne       ChangeRegisters_40
                    2606   ; if(tolower(_getch()) == 'p')  {    // change user stack pointer
00001A30  2F00      2607          move.l    D0,-(A7)
00001A32  4E95      2608          jsr       (A5)
00001A34  2200      2609          move.l    D0,D1
00001A36  201F      2610          move.l    (A7)+,D0
00001A38  2F01      2611          move.l    D1,-(A7)
00001A3A  4EB9 0000 2612          jsr       _tolower
00001A3E  56E0      
00001A40  584F      2613          addq.w    #4,A7
00001A42  0C80 0000 2614          cmp.l     #112,D0
00001A46  0070      
00001A48  6618      2615          bne.s     ChangeRegisters_42
                    2616   ; printf("\r\nUser SP = ") ;
00001A4A  4879 0000 2617          pea       @m68kde~1_58.L
00001A4E  6666      
00001A50  4E92      2618          jsr       (A2)
00001A52  584F      2619          addq.w    #4,A7
                    2620   ; USP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001A54  42A7      2621          clr.l     -(A7)
00001A56  4E94      2622          jsr       (A4)
00001A58  584F      2623          addq.w    #4,A7
00001A5A  23C0 0B00 2624          move.l    D0,_USP.L
00001A5E  0128      
00001A60  600E      2625          bra.s     ChangeRegisters_43
                    2626   ChangeRegisters_42:
                    2627   ; }
                    2628   ; else {
                    2629   ; printf("\r\nIllegal Register....") ;
00001A62  4879 0000 2630          pea       @m68kde~1_59.L
00001A66  6674      
00001A68  4E92      2631          jsr       (A2)
00001A6A  584F      2632          addq.w    #4,A7
                    2633   ; return ;
00001A6C  6000 00BA 2634          bra       ChangeRegisters_6
                    2635   ChangeRegisters_43:
00001A70  6000 00B2 2636          bra       ChangeRegisters_51
                    2637   ChangeRegisters_40:
                    2638   ; }
                    2639   ; }
                    2640   ; else if((reg[0] == (char)('s')) && (c == (char)('s')))  {
00001A74  1013      2641          move.b    (A3),D0
00001A76  0C00 0073 2642          cmp.b     #115,D0
00001A7A  6600 004E 2643          bne       ChangeRegisters_44
00001A7E  0C02 0073 2644          cmp.b     #115,D2
00001A82  6600 0046 2645          bne       ChangeRegisters_44
                    2646   ; if(tolower(_getch()) == 'p')  {    // change system stack pointer
00001A86  2F00      2647          move.l    D0,-(A7)
00001A88  4E95      2648          jsr       (A5)
00001A8A  2200      2649          move.l    D0,D1
00001A8C  201F      2650          move.l    (A7)+,D0
00001A8E  2F01      2651          move.l    D1,-(A7)
00001A90  4EB9 0000 2652          jsr       _tolower
00001A94  56E0      
00001A96  584F      2653          addq.w    #4,A7
00001A98  0C80 0000 2654          cmp.l     #112,D0
00001A9C  0070      
00001A9E  6618      2655          bne.s     ChangeRegisters_46
                    2656   ; printf("\r\nSystem SP = ") ;
00001AA0  4879 0000 2657          pea       @m68kde~1_60.L
00001AA4  668C      
00001AA6  4E92      2658          jsr       (A2)
00001AA8  584F      2659          addq.w    #4,A7
                    2660   ; SSP = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AAA  42A7      2661          clr.l     -(A7)
00001AAC  4E94      2662          jsr       (A4)
00001AAE  584F      2663          addq.w    #4,A7
00001AB0  23C0 0B00 2664          move.l    D0,_SSP.L
00001AB4  0124      
00001AB6  600E      2665          bra.s     ChangeRegisters_47
                    2666   ChangeRegisters_46:
                    2667   ; }
                    2668   ; else {
                    2669   ; printf("\r\nIllegal Register....") ;
00001AB8  4879 0000 2670          pea       @m68kde~1_59.L
00001ABC  6674      
00001ABE  4E92      2671          jsr       (A2)
00001AC0  584F      2672          addq.w    #4,A7
                    2673   ; return ;
00001AC2  6000 0064 2674          bra       ChangeRegisters_6
                    2675   ChangeRegisters_47:
00001AC6  6000 005C 2676          bra       ChangeRegisters_51
                    2677   ChangeRegisters_44:
                    2678   ; }
                    2679   ; }
                    2680   ; else if((reg[0] == (char)('p')) && (c == (char)('c')))  {    // change program counter
00001ACA  1013      2681          move.b    (A3),D0
00001ACC  0C00 0070 2682          cmp.b     #112,D0
00001AD0  6620      2683          bne.s     ChangeRegisters_48
00001AD2  0C02 0063 2684          cmp.b     #99,D2
00001AD6  661A      2685          bne.s     ChangeRegisters_48
                    2686   ; printf("\r\nPC = ") ;
00001AD8  4879 0000 2687          pea       @m68kde~1_61.L
00001ADC  669C      
00001ADE  4E92      2688          jsr       (A2)
00001AE0  584F      2689          addq.w    #4,A7
                    2690   ; PC = Get8HexDigits(0) ;    // read 32 bit value from user keyboard
00001AE2  42A7      2691          clr.l     -(A7)
00001AE4  4E94      2692          jsr       (A4)
00001AE6  584F      2693          addq.w    #4,A7
00001AE8  23C0 0B00 2694          move.l    D0,_PC.L
00001AEC  0120      
00001AEE  6000 0034 2695          bra       ChangeRegisters_51
                    2696   ChangeRegisters_48:
                    2697   ; }
                    2698   ; else if((reg[0] == (char)('s')) && (c == (char)('r')))  {    // change status register
00001AF2  1013      2699          move.b    (A3),D0
00001AF4  0C00 0073 2700          cmp.b     #115,D0
00001AF8  6620      2701          bne.s     ChangeRegisters_50
00001AFA  0C02 0072 2702          cmp.b     #114,D2
00001AFE  661A      2703          bne.s     ChangeRegisters_50
                    2704   ; printf("\r\nSR = ") ;
00001B00  4879 0000 2705          pea       @m68kde~1_62.L
00001B04  66A4      
00001B06  4E92      2706          jsr       (A2)
00001B08  584F      2707          addq.w    #4,A7
                    2708   ; SR = Get4HexDigits(0) ;    // read 16 bit value from user keyboard
00001B0A  42A7      2709          clr.l     -(A7)
00001B0C  4EB8 0C58 2710          jsr       _Get4HexDigits
00001B10  584F      2711          addq.w    #4,A7
00001B12  33C0 0B00 2712          move.w    D0,_SR.L
00001B16  012C      
00001B18  600A      2713          bra.s     ChangeRegisters_51
                    2714   ChangeRegisters_50:
                    2715   ; }
                    2716   ; else
                    2717   ; printf("\r\nIllegal Register: Use A0-A7, D0-D7, SSP, USP, PC or SR\r\n") ;
00001B1A  4879 0000 2718          pea       @m68kde~1_63.L
00001B1E  66AC      
00001B20  4E92      2719          jsr       (A2)
00001B22  584F      2720          addq.w    #4,A7
                    2721   ChangeRegisters_51:
                    2722   ; DumpRegisters() ;
00001B24  4EB8 135E 2723          jsr       _DumpRegisters
                    2724   ChangeRegisters_6:
00001B28  4CDF 3C0C 2725          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00001B2C  4E5E      2726          unlk      A6
00001B2E  4E75      2727          rts
                    2728   ; }
                    2729   ; void BreakPointDisplay(void)
                    2730   ; {
                    2731   _BreakPointDisplay:
00001B30  48E7 3030 2732          movem.l   D2/D3/A2/A3,-(A7)
00001B34  45F9 0000 2733          lea       _printf.L,A2
00001B38  5782      
00001B3A  47F9 0B00 2734          lea       _BreakPointAddress.L,A3
00001B3E  012E      
                    2735   ; int i, BreakPointsSet = 0 ;
00001B40  4283      2736          clr.l     D3
                    2737   ; // any break points  set
                    2738   ; for(i = 0; i < 8; i++)  {
00001B42  4282      2739          clr.l     D2
                    2740   BreakPointDisplay_1:
00001B44  0C82 0000 2741          cmp.l     #8,D2
00001B48  0008      
00001B4A  6C1C      2742          bge.s     BreakPointDisplay_3
                    2743   ; if(BreakPointSetOrCleared[i] == 1)
00001B4C  2002      2744          move.l    D2,D0
00001B4E  E588      2745          lsl.l     #2,D0
00001B50  41F9 0B00 2746          lea       _BreakPointSetOrCleared.L,A0
00001B54  015E      
00001B56  2030 0800 2747          move.l    0(A0,D0.L),D0
00001B5A  0C80 0000 2748          cmp.l     #1,D0
00001B5E  0001      
00001B60  6602      2749          bne.s     BreakPointDisplay_4
                    2750   ; BreakPointsSet = 1;
00001B62  7601      2751          moveq     #1,D3
                    2752   BreakPointDisplay_4:
00001B64  5282      2753          addq.l    #1,D2
00001B66  60DC      2754          bra       BreakPointDisplay_1
                    2755   BreakPointDisplay_3:
                    2756   ; }
                    2757   ; if(BreakPointsSet == 1) {
00001B68  0C83 0000 2758          cmp.l     #1,D3
00001B6C  0001      
00001B6E  6616      2759          bne.s     BreakPointDisplay_6
                    2760   ; printf("\r\n\r\nNum     Address      Instruction") ;
00001B70  4879 0000 2761          pea       @m68kde~1_64.L
00001B74  66E8      
00001B76  4E92      2762          jsr       (A2)
00001B78  584F      2763          addq.w    #4,A7
                    2764   ; printf("\r\n---     ---------    -----------") ;
00001B7A  4879 0000 2765          pea       @m68kde~1_65.L
00001B7E  670E      
00001B80  4E92      2766          jsr       (A2)
00001B82  584F      2767          addq.w    #4,A7
00001B84  600A      2768          bra.s     BreakPointDisplay_7
                    2769   BreakPointDisplay_6:
                    2770   ; }
                    2771   ; else
                    2772   ; printf("\r\nNo BreakPoints Set") ;
00001B86  4879 0000 2773          pea       @m68kde~1_66.L
00001B8A  6732      
00001B8C  4E92      2774          jsr       (A2)
00001B8E  584F      2775          addq.w    #4,A7
                    2776   BreakPointDisplay_7:
                    2777   ; for(i = 0; i < 8; i++)  {
00001B90  4282      2778          clr.l     D2
                    2779   BreakPointDisplay_8:
00001B92  0C82 0000 2780          cmp.l     #8,D2
00001B96  0008      
00001B98  6C00 0080 2781          bge       BreakPointDisplay_10
                    2782   ; // put opcode back to disassemble it, then put break point back
                    2783   ; if(BreakPointSetOrCleared[i] == 1)  {
00001B9C  2002      2784          move.l    D2,D0
00001B9E  E588      2785          lsl.l     #2,D0
00001BA0  41F9 0B00 2786          lea       _BreakPointSetOrCleared.L,A0
00001BA4  015E      
00001BA6  2030 0800 2787          move.l    0(A0,D0.L),D0
00001BAA  0C80 0000 2788          cmp.l     #1,D0
00001BAE  0001      
00001BB0  6600 0062 2789          bne       BreakPointDisplay_11
                    2790   ; *(unsigned short int *)(BreakPointAddress[i]) = BreakPointInstruction[i];
00001BB4  2002      2791          move.l    D2,D0
00001BB6  E388      2792          lsl.l     #1,D0
00001BB8  41F9 0B00 2793          lea       _BreakPointInstruction.L,A0
00001BBC  014E      
00001BBE  2202      2794          move.l    D2,D1
00001BC0  E589      2795          lsl.l     #2,D1
00001BC2  2233 1800 2796          move.l    0(A3,D1.L),D1
00001BC6  2241      2797          move.l    D1,A1
00001BC8  32B0 0800 2798          move.w    0(A0,D0.L),(A1)
                    2799   ; DisassembleInstruction(BreakPointAddress[i]) ;
00001BCC  2202      2800          move.l    D2,D1
00001BCE  E589      2801          lsl.l     #2,D1
00001BD0  2F33 1800 2802          move.l    0(A3,D1.L),-(A7)
00001BD4  4EB9 0000 2803          jsr       _DisassembleInstruction
00001BD8  36E4      
00001BDA  584F      2804          addq.w    #4,A7
                    2805   ; FormatInstructionForTrace() ;
00001BDC  4EB8 12EA 2806          jsr       _FormatInstructionForTrace
                    2807   ; *(unsigned short int *)(BreakPointAddress[i]) = (unsigned short int)(0x4e4e) ;
00001BE0  2002      2808          move.l    D2,D0
00001BE2  E588      2809          lsl.l     #2,D0
00001BE4  2033 0800 2810          move.l    0(A3,D0.L),D0
00001BE8  2040      2811          move.l    D0,A0
00001BEA  30BC 4E4E 2812          move.w    #20046,(A0)
                    2813   ; printf("\r\n%3d     $%08x",i, BreakPointAddress[i]) ;
00001BEE  2202      2814          move.l    D2,D1
00001BF0  E589      2815          lsl.l     #2,D1
00001BF2  2F33 1800 2816          move.l    0(A3,D1.L),-(A7)
00001BF6  2F02      2817          move.l    D2,-(A7)
00001BF8  4879 0000 2818          pea       @m68kde~1_67.L
00001BFC  6748      
00001BFE  4E92      2819          jsr       (A2)
00001C00  DEFC 000C 2820          add.w     #12,A7
                    2821   ; printf("    %s", Instruction);
00001C04  4879 0B00 2822          pea       _Instruction.L
00001C08  04E2      
00001C0A  4879 0000 2823          pea       @m68kde~1_68.L
00001C0E  6758      
00001C10  4E92      2824          jsr       (A2)
00001C12  504F      2825          addq.w    #8,A7
                    2826   BreakPointDisplay_11:
00001C14  5282      2827          addq.l    #1,D2
00001C16  6000 FF7A 2828          bra       BreakPointDisplay_8
                    2829   BreakPointDisplay_10:
                    2830   ; }
                    2831   ; }
                    2832   ; printf("\r\n") ;
00001C1A  4879 0000 2833          pea       @m68kde~1_1.L
00001C1E  60D2      
00001C20  4E92      2834          jsr       (A2)
00001C22  584F      2835          addq.w    #4,A7
00001C24  4CDF 0C0C 2836          movem.l   (A7)+,D2/D3/A2/A3
00001C28  4E75      2837          rts
                    2838   ; }
                    2839   ; void WatchPointDisplay(void)
                    2840   ; {
                    2841   _WatchPointDisplay:
00001C2A  48E7 3020 2842          movem.l   D2/D3/A2,-(A7)
00001C2E  45F9 0000 2843          lea       _printf.L,A2
00001C32  5782      
                    2844   ; int i ;
                    2845   ; int WatchPointsSet = 0 ;
00001C34  4283      2846          clr.l     D3
                    2847   ; // any watchpoints set
                    2848   ; for(i = 0; i < 8; i++)  {
00001C36  4282      2849          clr.l     D2
                    2850   WatchPointDisplay_1:
00001C38  0C82 0000 2851          cmp.l     #8,D2
00001C3C  0008      
00001C3E  6C1C      2852          bge.s     WatchPointDisplay_3
                    2853   ; if(WatchPointSetOrCleared[i] == 1)
00001C40  2002      2854          move.l    D2,D0
00001C42  E588      2855          lsl.l     #2,D0
00001C44  41F9 0B00 2856          lea       _WatchPointSetOrCleared.L,A0
00001C48  01A2      
00001C4A  2030 0800 2857          move.l    0(A0,D0.L),D0
00001C4E  0C80 0000 2858          cmp.l     #1,D0
00001C52  0001      
00001C54  6602      2859          bne.s     WatchPointDisplay_4
                    2860   ; WatchPointsSet = 1;
00001C56  7601      2861          moveq     #1,D3
                    2862   WatchPointDisplay_4:
00001C58  5282      2863          addq.l    #1,D2
00001C5A  60DC      2864          bra       WatchPointDisplay_1
                    2865   WatchPointDisplay_3:
                    2866   ; }
                    2867   ; if(WatchPointsSet == 1) {
00001C5C  0C83 0000 2868          cmp.l     #1,D3
00001C60  0001      
00001C62  6616      2869          bne.s     WatchPointDisplay_6
                    2870   ; printf("\r\nNum     Address") ;
00001C64  4879 0000 2871          pea       @m68kde~1_69.L
00001C68  6760      
00001C6A  4E92      2872          jsr       (A2)
00001C6C  584F      2873          addq.w    #4,A7
                    2874   ; printf("\r\n---     ---------") ;
00001C6E  4879 0000 2875          pea       @m68kde~1_70.L
00001C72  6772      
00001C74  4E92      2876          jsr       (A2)
00001C76  584F      2877          addq.w    #4,A7
00001C78  600A      2878          bra.s     WatchPointDisplay_7
                    2879   WatchPointDisplay_6:
                    2880   ; }
                    2881   ; else
                    2882   ; printf("\r\nNo WatchPoints Set") ;
00001C7A  4879 0000 2883          pea       @m68kde~1_71.L
00001C7E  6786      
00001C80  4E92      2884          jsr       (A2)
00001C82  584F      2885          addq.w    #4,A7
                    2886   WatchPointDisplay_7:
                    2887   ; for(i = 0; i < 8; i++)  {
00001C84  4282      2888          clr.l     D2
                    2889   WatchPointDisplay_8:
00001C86  0C82 0000 2890          cmp.l     #8,D2
00001C8A  0008      
00001C8C  6C00 0038 2891          bge       WatchPointDisplay_10
                    2892   ; if(WatchPointSetOrCleared[i] == 1)
00001C90  2002      2893          move.l    D2,D0
00001C92  E588      2894          lsl.l     #2,D0
00001C94  41F9 0B00 2895          lea       _WatchPointSetOrCleared.L,A0
00001C98  01A2      
00001C9A  2030 0800 2896          move.l    0(A0,D0.L),D0
00001C9E  0C80 0000 2897          cmp.l     #1,D0
00001CA2  0001      
00001CA4  661C      2898          bne.s     WatchPointDisplay_11
                    2899   ; printf("\r\n%3d     $%08x",i, WatchPointAddress[i]) ;
00001CA6  2202      2900          move.l    D2,D1
00001CA8  E589      2901          lsl.l     #2,D1
00001CAA  41F9 0B00 2902          lea       _WatchPointAddress.L,A0
00001CAE  0182      
00001CB0  2F30 1800 2903          move.l    0(A0,D1.L),-(A7)
00001CB4  2F02      2904          move.l    D2,-(A7)
00001CB6  4879 0000 2905          pea       @m68kde~1_67.L
00001CBA  6748      
00001CBC  4E92      2906          jsr       (A2)
00001CBE  DEFC 000C 2907          add.w     #12,A7
                    2908   WatchPointDisplay_11:
00001CC2  5282      2909          addq.l    #1,D2
00001CC4  60C0      2910          bra       WatchPointDisplay_8
                    2911   WatchPointDisplay_10:
                    2912   ; }
                    2913   ; printf("\r\n") ;
00001CC6  4879 0000 2914          pea       @m68kde~1_1.L
00001CCA  60D2      
00001CCC  4E92      2915          jsr       (A2)
00001CCE  584F      2916          addq.w    #4,A7
00001CD0  4CDF 040C 2917          movem.l   (A7)+,D2/D3/A2
00001CD4  4E75      2918          rts
                    2919   ; }
                    2920   ; void BreakPointClear(void)
                    2921   ; {
                    2922   _BreakPointClear:
00001CD6  4E56 FFFC 2923          link      A6,#-4
00001CDA  48E7 2020 2924          movem.l   D2/A2,-(A7)
00001CDE  45F9 0000 2925          lea       _printf.L,A2
00001CE2  5782      
                    2926   ; unsigned int i ;
                    2927   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    2928   ; BreakPointDisplay() ;
00001CE4  4EB8 1B30 2929          jsr       _BreakPointDisplay
                    2930   ; printf("\r\nEnter Break Point Number: ") ;
00001CE8  4879 0000 2931          pea       @m68kde~1_72.L
00001CEC  679C      
00001CEE  4E92      2932          jsr       (A2)
00001CF0  584F      2933          addq.w    #4,A7
                    2934   ; i = xtod(_getch()) ;           // get break pointer number
00001CF2  2F00      2935          move.l    D0,-(A7)
00001CF4  4EB8 0B68 2936          jsr       __getch
00001CF8  2200      2937          move.l    D0,D1
00001CFA  201F      2938          move.l    (A7)+,D0
00001CFC  2F01      2939          move.l    D1,-(A7)
00001CFE  4EB8 0BD2 2940          jsr       _xtod
00001D02  584F      2941          addq.w    #4,A7
00001D04  C0BC 0000 2942          and.l     #255,D0
00001D08  00FF      
00001D0A  2400      2943          move.l    D0,D2
                    2944   ; if((i < 0) || (i > 7))   {
00001D0C  0C82 0000 2945          cmp.l     #0,D2
00001D10  0000      
00001D12  6508      2946          blo.s     BreakPointClear_3
00001D14  0C82 0000 2947          cmp.l     #7,D2
00001D18  0007      
00001D1A  630E      2948          bls.s     BreakPointClear_1
                    2949   BreakPointClear_3:
                    2950   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001D1C  4879 0000 2951          pea       @m68kde~1_73.L
00001D20  67BA      
00001D22  4E92      2952          jsr       (A2)
00001D24  584F      2953          addq.w    #4,A7
                    2954   ; return ;
00001D26  6000 0080 2955          bra       BreakPointClear_4
                    2956   BreakPointClear_1:
                    2957   ; }
                    2958   ; if(BreakPointSetOrCleared[i] == 1)  {       // if break point set
00001D2A  2002      2959          move.l    D2,D0
00001D2C  E588      2960          lsl.l     #2,D0
00001D2E  41F9 0B00 2961          lea       _BreakPointSetOrCleared.L,A0
00001D32  015E      
00001D34  2030 0800 2962          move.l    0(A0,D0.L),D0
00001D38  0C80 0000 2963          cmp.l     #1,D0
00001D3C  0001      
00001D3E  6600 005A 2964          bne       BreakPointClear_5
                    2965   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program we are about to change
00001D42  2002      2966          move.l    D2,D0
00001D44  E588      2967          lsl.l     #2,D0
00001D46  41F9 0B00 2968          lea       _BreakPointAddress.L,A0
00001D4A  012E      
00001D4C  2D70 0800 2969          move.l    0(A0,D0.L),-4(A6)
00001D50  FFFC      
                    2970   ; BreakPointAddress[i] = 0 ;
00001D52  2002      2971          move.l    D2,D0
00001D54  E588      2972          lsl.l     #2,D0
00001D56  41F9 0B00 2973          lea       _BreakPointAddress.L,A0
00001D5A  012E      
00001D5C  42B0 0800 2974          clr.l     0(A0,D0.L)
                    2975   ; BreakPointSetOrCleared[i] = 0 ;
00001D60  2002      2976          move.l    D2,D0
00001D62  E588      2977          lsl.l     #2,D0
00001D64  41F9 0B00 2978          lea       _BreakPointSetOrCleared.L,A0
00001D68  015E      
00001D6A  42B0 0800 2979          clr.l     0(A0,D0.L)
                    2980   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
00001D6E  2002      2981          move.l    D2,D0
00001D70  E388      2982          lsl.l     #1,D0
00001D72  41F9 0B00 2983          lea       _BreakPointInstruction.L,A0
00001D76  014E      
00001D78  226E FFFC 2984          move.l    -4(A6),A1
00001D7C  32B0 0800 2985          move.w    0(A0,D0.L),(A1)
                    2986   ; BreakPointInstruction[i] = 0 ;
00001D80  2002      2987          move.l    D2,D0
00001D82  E388      2988          lsl.l     #1,D0
00001D84  41F9 0B00 2989          lea       _BreakPointInstruction.L,A0
00001D88  014E      
00001D8A  4270 0800 2990          clr.w     0(A0,D0.L)
                    2991   ; printf("\r\nBreak Point Cleared.....\r\n") ;
00001D8E  4879 0000 2992          pea       @m68kde~1_74.L
00001D92  67D6      
00001D94  4E92      2993          jsr       (A2)
00001D96  584F      2994          addq.w    #4,A7
00001D98  600A      2995          bra.s     BreakPointClear_6
                    2996   BreakPointClear_5:
                    2997   ; }
                    2998   ; else
                    2999   ; printf("\r\nBreak Point wasn't Set.....") ;
00001D9A  4879 0000 3000          pea       @m68kde~1_75.L
00001D9E  67F4      
00001DA0  4E92      3001          jsr       (A2)
00001DA2  584F      3002          addq.w    #4,A7
                    3003   BreakPointClear_6:
                    3004   ; BreakPointDisplay() ;
00001DA4  4EB8 1B30 3005          jsr       _BreakPointDisplay
                    3006   ; return ;
                    3007   BreakPointClear_4:
00001DA8  4CDF 0404 3008          movem.l   (A7)+,D2/A2
00001DAC  4E5E      3009          unlk      A6
00001DAE  4E75      3010          rts
                    3011   ; }
                    3012   ; void WatchPointClear(void)
                    3013   ; {
                    3014   _WatchPointClear:
00001DB0  48E7 2020 3015          movem.l   D2/A2,-(A7)
00001DB4  45F9 0000 3016          lea       _printf.L,A2
00001DB8  5782      
                    3017   ; unsigned int i ;
                    3018   ; WatchPointDisplay() ;
00001DBA  4EB8 1C2A 3019          jsr       _WatchPointDisplay
                    3020   ; printf("\r\nEnter Watch Point Number: ") ;
00001DBE  4879 0000 3021          pea       @m68kde~1_76.L
00001DC2  6812      
00001DC4  4E92      3022          jsr       (A2)
00001DC6  584F      3023          addq.w    #4,A7
                    3024   ; i = xtod(_getch()) ;           // get watch pointer number
00001DC8  2F00      3025          move.l    D0,-(A7)
00001DCA  4EB8 0B68 3026          jsr       __getch
00001DCE  2200      3027          move.l    D0,D1
00001DD0  201F      3028          move.l    (A7)+,D0
00001DD2  2F01      3029          move.l    D1,-(A7)
00001DD4  4EB8 0BD2 3030          jsr       _xtod
00001DD8  584F      3031          addq.w    #4,A7
00001DDA  C0BC 0000 3032          and.l     #255,D0
00001DDE  00FF      
00001DE0  2400      3033          move.l    D0,D2
                    3034   ; if((i < 0) || (i > 7))   {
00001DE2  0C82 0000 3035          cmp.l     #0,D2
00001DE6  0000      
00001DE8  6508      3036          blo.s     WatchPointClear_3
00001DEA  0C82 0000 3037          cmp.l     #7,D2
00001DEE  0007      
00001DF0  630E      3038          bls.s     WatchPointClear_1
                    3039   WatchPointClear_3:
                    3040   ; printf("\r\nIllegal Range : Use 0 - 7") ;
00001DF2  4879 0000 3041          pea       @m68kde~1_73.L
00001DF6  67BA      
00001DF8  4E92      3042          jsr       (A2)
00001DFA  584F      3043          addq.w    #4,A7
                    3044   ; return ;
00001DFC  6000 004E 3045          bra       WatchPointClear_4
                    3046   WatchPointClear_1:
                    3047   ; }
                    3048   ; if(WatchPointSetOrCleared[i] == 1)  {       // if watch point set
00001E00  2002      3049          move.l    D2,D0
00001E02  E588      3050          lsl.l     #2,D0
00001E04  41F9 0B00 3051          lea       _WatchPointSetOrCleared.L,A0
00001E08  01A2      
00001E0A  2030 0800 3052          move.l    0(A0,D0.L),D0
00001E0E  0C80 0000 3053          cmp.l     #1,D0
00001E12  0001      
00001E14  6628      3054          bne.s     WatchPointClear_5
                    3055   ; WatchPointAddress[i] = 0 ;
00001E16  2002      3056          move.l    D2,D0
00001E18  E588      3057          lsl.l     #2,D0
00001E1A  41F9 0B00 3058          lea       _WatchPointAddress.L,A0
00001E1E  0182      
00001E20  42B0 0800 3059          clr.l     0(A0,D0.L)
                    3060   ; WatchPointSetOrCleared[i] = 0 ;
00001E24  2002      3061          move.l    D2,D0
00001E26  E588      3062          lsl.l     #2,D0
00001E28  41F9 0B00 3063          lea       _WatchPointSetOrCleared.L,A0
00001E2C  01A2      
00001E2E  42B0 0800 3064          clr.l     0(A0,D0.L)
                    3065   ; printf("\r\nWatch Point Cleared.....\r\n") ;
00001E32  4879 0000 3066          pea       @m68kde~1_77.L
00001E36  6830      
00001E38  4E92      3067          jsr       (A2)
00001E3A  584F      3068          addq.w    #4,A7
00001E3C  600A      3069          bra.s     WatchPointClear_6
                    3070   WatchPointClear_5:
                    3071   ; }
                    3072   ; else
                    3073   ; printf("\r\nWatch Point Was not Set.....") ;
00001E3E  4879 0000 3074          pea       @m68kde~1_78.L
00001E42  684E      
00001E44  4E92      3075          jsr       (A2)
00001E46  584F      3076          addq.w    #4,A7
                    3077   WatchPointClear_6:
                    3078   ; WatchPointDisplay() ;
00001E48  4EB8 1C2A 3079          jsr       _WatchPointDisplay
                    3080   ; return ;
                    3081   WatchPointClear_4:
00001E4C  4CDF 0404 3082          movem.l   (A7)+,D2/A2
00001E50  4E75      3083          rts
                    3084   ; }
                    3085   ; void DisableBreakPoints(void)
                    3086   ; {
                    3087   _DisableBreakPoints:
00001E52  4E56 FFFC 3088          link      A6,#-4
00001E56  2F02      3089          move.l    D2,-(A7)
                    3090   ; int i ;
                    3091   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3092   ; for(i = 0; i < 8; i++)  {
00001E58  4282      3093          clr.l     D2
                    3094   DisableBreakPoints_1:
00001E5A  0C82 0000 3095          cmp.l     #8,D2
00001E5E  0008      
00001E60  6C00 003E 3096          bge       DisableBreakPoints_3
                    3097   ; if(BreakPointSetOrCleared[i] == 1)    {                                                    // if break point set
00001E64  2002      3098          move.l    D2,D0
00001E66  E588      3099          lsl.l     #2,D0
00001E68  41F9 0B00 3100          lea       _BreakPointSetOrCleared.L,A0
00001E6C  015E      
00001E6E  2030 0800 3101          move.l    0(A0,D0.L),D0
00001E72  0C80 0000 3102          cmp.l     #1,D0
00001E76  0001      
00001E78  6622      3103          bne.s     DisableBreakPoints_4
                    3104   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001E7A  2002      3105          move.l    D2,D0
00001E7C  E588      3106          lsl.l     #2,D0
00001E7E  41F9 0B00 3107          lea       _BreakPointAddress.L,A0
00001E82  012E      
00001E84  2D70 0800 3108          move.l    0(A0,D0.L),-4(A6)
00001E88  FFFC      
                    3109   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program overwritting the $4e4e
00001E8A  2002      3110          move.l    D2,D0
00001E8C  E388      3111          lsl.l     #1,D0
00001E8E  41F9 0B00 3112          lea       _BreakPointInstruction.L,A0
00001E92  014E      
00001E94  226E FFFC 3113          move.l    -4(A6),A1
00001E98  32B0 0800 3114          move.w    0(A0,D0.L),(A1)
                    3115   DisableBreakPoints_4:
00001E9C  5282      3116          addq.l    #1,D2
00001E9E  60BA      3117          bra       DisableBreakPoints_1
                    3118   DisableBreakPoints_3:
00001EA0  241F      3119          move.l    (A7)+,D2
00001EA2  4E5E      3120          unlk      A6
00001EA4  4E75      3121          rts
                    3122   ; }
                    3123   ; }
                    3124   ; }
                    3125   ; void EnableBreakPoints(void)
                    3126   ; {
                    3127   _EnableBreakPoints:
00001EA6  4E56 FFFC 3128          link      A6,#-4
00001EAA  2F02      3129          move.l    D2,-(A7)
                    3130   ; int i ;
                    3131   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3132   ; for(i = 0; i < 8; i++)  {
00001EAC  4282      3133          clr.l     D2
                    3134   EnableBreakPoints_1:
00001EAE  0C82 0000 3135          cmp.l     #8,D2
00001EB2  0008      
00001EB4  6C32      3136          bge.s     EnableBreakPoints_3
                    3137   ; if(BreakPointSetOrCleared[i] == 1)    {                                                     // if break point set
00001EB6  2002      3138          move.l    D2,D0
00001EB8  E588      3139          lsl.l     #2,D0
00001EBA  41F9 0B00 3140          lea       _BreakPointSetOrCleared.L,A0
00001EBE  015E      
00001EC0  2030 0800 3141          move.l    0(A0,D0.L),D0
00001EC4  0C80 0000 3142          cmp.l     #1,D0
00001EC8  0001      
00001ECA  6618      3143          bne.s     EnableBreakPoints_4
                    3144   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001ECC  2002      3145          move.l    D2,D0
00001ECE  E588      3146          lsl.l     #2,D0
00001ED0  41F9 0B00 3147          lea       _BreakPointAddress.L,A0
00001ED4  012E      
00001ED6  2D70 0800 3148          move.l    0(A0,D0.L),-4(A6)
00001EDA  FFFC      
                    3149   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e);                              // put the breakpoint back in user program
00001EDC  206E FFFC 3150          move.l    -4(A6),A0
00001EE0  30BC 4E4E 3151          move.w    #20046,(A0)
                    3152   EnableBreakPoints_4:
00001EE4  5282      3153          addq.l    #1,D2
00001EE6  60C6      3154          bra       EnableBreakPoints_1
                    3155   EnableBreakPoints_3:
00001EE8  241F      3156          move.l    (A7)+,D2
00001EEA  4E5E      3157          unlk      A6
00001EEC  4E75      3158          rts
                    3159   ; }
                    3160   ; }
                    3161   ; }
                    3162   ; void KillAllBreakPoints(void)
                    3163   ; {
                    3164   _KillAllBreakPoints:
00001EEE  4E56 FFFC 3165          link      A6,#-4
00001EF2  2F02      3166          move.l    D2,-(A7)
                    3167   ; int i ;
                    3168   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3169   ; for(i = 0; i < 8; i++)  {
00001EF4  4282      3170          clr.l     D2
                    3171   KillAllBreakPoints_1:
00001EF6  0C82 0000 3172          cmp.l     #8,D2
00001EFA  0008      
00001EFC  6C00 0052 3173          bge       KillAllBreakPoints_3
                    3174   ; // clear BP
                    3175   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BreakPointAddress[i]) ;     // point to the instruction in the user program where the break point has been set
00001F00  2002      3176          move.l    D2,D0
00001F02  E588      3177          lsl.l     #2,D0
00001F04  41F9 0B00 3178          lea       _BreakPointAddress.L,A0
00001F08  012E      
00001F0A  2D70 0800 3179          move.l    0(A0,D0.L),-4(A6)
00001F0E  FFFC      
                    3180   ; *ProgramBreakPointAddress = BreakPointInstruction[i];                                  // copy the instruction back to the user program
00001F10  2002      3181          move.l    D2,D0
00001F12  E388      3182          lsl.l     #1,D0
00001F14  41F9 0B00 3183          lea       _BreakPointInstruction.L,A0
00001F18  014E      
00001F1A  226E FFFC 3184          move.l    -4(A6),A1
00001F1E  32B0 0800 3185          move.w    0(A0,D0.L),(A1)
                    3186   ; BreakPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F22  2002      3187          move.l    D2,D0
00001F24  E588      3188          lsl.l     #2,D0
00001F26  41F9 0B00 3189          lea       _BreakPointAddress.L,A0
00001F2A  012E      
00001F2C  42B0 0800 3190          clr.l     0(A0,D0.L)
                    3191   ; BreakPointInstruction[i] = 0 ;
00001F30  2002      3192          move.l    D2,D0
00001F32  E388      3193          lsl.l     #1,D0
00001F34  41F9 0B00 3194          lea       _BreakPointInstruction.L,A0
00001F38  014E      
00001F3A  4270 0800 3195          clr.w     0(A0,D0.L)
                    3196   ; BreakPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F3E  2002      3197          move.l    D2,D0
00001F40  E588      3198          lsl.l     #2,D0
00001F42  41F9 0B00 3199          lea       _BreakPointSetOrCleared.L,A0
00001F46  015E      
00001F48  42B0 0800 3200          clr.l     0(A0,D0.L)
00001F4C  5282      3201          addq.l    #1,D2
00001F4E  60A6      3202          bra       KillAllBreakPoints_1
                    3203   KillAllBreakPoints_3:
00001F50  241F      3204          move.l    (A7)+,D2
00001F52  4E5E      3205          unlk      A6
00001F54  4E75      3206          rts
                    3207   ; }
                    3208   ; //BreakPointDisplay() ;       // display the break points
                    3209   ; }
                    3210   ; void KillAllWatchPoints(void)
                    3211   ; {
                    3212   _KillAllWatchPoints:
00001F56  2F02      3213          move.l    D2,-(A7)
                    3214   ; int i ;
                    3215   ; for(i = 0; i < 8; i++)  {
00001F58  4282      3216          clr.l     D2
                    3217   KillAllWatchPoints_1:
00001F5A  0C82 0000 3218          cmp.l     #8,D2
00001F5E  0008      
00001F60  6C20      3219          bge.s     KillAllWatchPoints_3
                    3220   ; WatchPointAddress[i] = 0 ;                                                             // set BP address to NULL
00001F62  2002      3221          move.l    D2,D0
00001F64  E588      3222          lsl.l     #2,D0
00001F66  41F9 0B00 3223          lea       _WatchPointAddress.L,A0
00001F6A  0182      
00001F6C  42B0 0800 3224          clr.l     0(A0,D0.L)
                    3225   ; WatchPointSetOrCleared[i] = 0 ;                                                        // mark break point as cleared for future setting
00001F70  2002      3226          move.l    D2,D0
00001F72  E588      3227          lsl.l     #2,D0
00001F74  41F9 0B00 3228          lea       _WatchPointSetOrCleared.L,A0
00001F78  01A2      
00001F7A  42B0 0800 3229          clr.l     0(A0,D0.L)
00001F7E  5282      3230          addq.l    #1,D2
00001F80  60D8      3231          bra       KillAllWatchPoints_1
                    3232   KillAllWatchPoints_3:
00001F82  241F      3233          move.l    (A7)+,D2
00001F84  4E75      3234          rts
                    3235   ; }
                    3236   ; //WatchPointDisplay() ;       // display the break points
                    3237   ; }
                    3238   ; void SetBreakPoint(void)
                    3239   ; {
                    3240   _SetBreakPoint:
00001F86  4E56 FFFC 3241          link      A6,#-4
00001F8A  48E7 3830 3242          movem.l   D2/D3/D4/A2/A3,-(A7)
00001F8E  45F9 0000 3243          lea       _printf.L,A2
00001F92  5782      
00001F94  47F9 0B00 3244          lea       _BreakPointSetOrCleared.L,A3
00001F98  015E      
                    3245   ; int i ;
                    3246   ; int BPNumber;
                    3247   ; int BPAddress;
                    3248   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3249   ; // see if any free break points
                    3250   ; for(i = 0; i < 8; i ++) {
00001F9A  4282      3251          clr.l     D2
                    3252   SetBreakPoint_1:
00001F9C  0C82 0000 3253          cmp.l     #8,D2
00001FA0  0008      
00001FA2  6C10      3254          bge.s     SetBreakPoint_3
                    3255   ; if( BreakPointSetOrCleared[i] == 0)
00001FA4  2002      3256          move.l    D2,D0
00001FA6  E588      3257          lsl.l     #2,D0
00001FA8  2033 0800 3258          move.l    0(A3,D0.L),D0
00001FAC  6602      3259          bne.s     SetBreakPoint_4
                    3260   ; break ;         // if spare BP found allow user to set it
00001FAE  6004      3261          bra.s     SetBreakPoint_3
                    3262   SetBreakPoint_4:
00001FB0  5282      3263          addq.l    #1,D2
00001FB2  60E8      3264          bra       SetBreakPoint_1
                    3265   SetBreakPoint_3:
                    3266   ; }
                    3267   ; if(i == 8) {
00001FB4  0C82 0000 3268          cmp.l     #8,D2
00001FB8  0008      
00001FBA  660E      3269          bne.s     SetBreakPoint_6
                    3270   ; printf("\r\nNo FREE Break Points.....") ;
00001FBC  4879 0000 3271          pea       @m68kde~1_79.L
00001FC0  686E      
00001FC2  4E92      3272          jsr       (A2)
00001FC4  584F      3273          addq.w    #4,A7
                    3274   ; return ;
00001FC6  6000 00EC 3275          bra       SetBreakPoint_15
                    3276   SetBreakPoint_6:
                    3277   ; }
                    3278   ; printf("\r\nBreak Point Address: ") ;
00001FCA  4879 0000 3279          pea       @m68kde~1_80.L
00001FCE  688A      
00001FD0  4E92      3280          jsr       (A2)
00001FD2  584F      3281          addq.w    #4,A7
                    3282   ; BPAddress = Get8HexDigits(0) ;
00001FD4  42A7      3283          clr.l     -(A7)
00001FD6  4EB8 0CA4 3284          jsr       _Get8HexDigits
00001FDA  584F      3285          addq.w    #4,A7
00001FDC  2600      3286          move.l    D0,D3
                    3287   ; ProgramBreakPointAddress = (volatile unsigned short int *)(BPAddress) ;     // point to the instruction in the user program we are about to change
00001FDE  2803      3288          move.l    D3,D4
                    3289   ; if((BPAddress & 0x00000001) == 0x00000001)  {   // cannot set BP at an odd address
00001FE0  2003      3290          move.l    D3,D0
00001FE2  C0BC 0000 3291          and.l     #1,D0
00001FE6  0001      
00001FE8  0C80 0000 3292          cmp.l     #1,D0
00001FEC  0001      
00001FEE  660E      3293          bne.s     SetBreakPoint_9
                    3294   ; printf("\r\nError : Break Points CANNOT be set at ODD addresses") ;
00001FF0  4879 0000 3295          pea       @m68kde~1_81.L
00001FF4  68A2      
00001FF6  4E92      3296          jsr       (A2)
00001FF8  584F      3297          addq.w    #4,A7
                    3298   ; return ;
00001FFA  6000 00B8 3299          bra       SetBreakPoint_15
                    3300   SetBreakPoint_9:
                    3301   ; }
                    3302   ; if(BPAddress < 0x00008000)  {   // cannot set BP in ROM
00001FFE  0C83 0000 3303          cmp.l     #32768,D3
00002002  8000      
00002004  640E      3304          bhs.s     SetBreakPoint_11
                    3305   ; printf("\r\nError : Break Points CANNOT be set for ROM in Range : [$0-$00007FFF]") ;
00002006  4879 0000 3306          pea       @m68kde~1_82.L
0000200A  68D8      
0000200C  4E92      3307          jsr       (A2)
0000200E  584F      3308          addq.w    #4,A7
                    3309   ; return ;
00002010  6000 00A2 3310          bra       SetBreakPoint_15
                    3311   SetBreakPoint_11:
                    3312   ; }
                    3313   ; // search for first free bp or existing same BP
                    3314   ; for(i = 0; i < 8; i++)  {
00002014  4282      3315          clr.l     D2
                    3316   SetBreakPoint_13:
00002016  0C82 0000 3317          cmp.l     #8,D2
0000201A  0008      
0000201C  6C00 0096 3318          bge       SetBreakPoint_15
                    3319   ; if(BreakPointAddress[i] == BPAddress)   {
00002020  2002      3320          move.l    D2,D0
00002022  E588      3321          lsl.l     #2,D0
00002024  41F9 0B00 3322          lea       _BreakPointAddress.L,A0
00002028  012E      
0000202A  B6B0 0800 3323          cmp.l     0(A0,D0.L),D3
0000202E  6610      3324          bne.s     SetBreakPoint_16
                    3325   ; printf("\r\nError: Break Point Already Exists at Address : %08x\r\n", BPAddress) ;
00002030  2F03      3326          move.l    D3,-(A7)
00002032  4879 0000 3327          pea       @m68kde~1_83.L
00002036  6920      
00002038  4E92      3328          jsr       (A2)
0000203A  504F      3329          addq.w    #8,A7
                    3330   ; return ;
0000203C  6000 0076 3331          bra       SetBreakPoint_15
                    3332   SetBreakPoint_16:
                    3333   ; }
                    3334   ; if(BreakPointSetOrCleared[i] == 0) {
00002040  2002      3335          move.l    D2,D0
00002042  E588      3336          lsl.l     #2,D0
00002044  2033 0800 3337          move.l    0(A3,D0.L),D0
00002048  6600 0064 3338          bne       SetBreakPoint_18
                    3339   ; // set BP here
                    3340   ; BreakPointSetOrCleared[i] = 1 ;                                 // mark this breakpoint as set
0000204C  2002      3341          move.l    D2,D0
0000204E  E588      3342          lsl.l     #2,D0
00002050  27BC 0000 3343          move.l    #1,0(A3,D0.L)
00002054  0001 0800 
                    3344   ; BreakPointInstruction[i] = *ProgramBreakPointAddress ;          // copy the user program instruction here so we can put it back afterwards
00002058  2044      3345          move.l    D4,A0
0000205A  2002      3346          move.l    D2,D0
0000205C  E388      3347          lsl.l     #1,D0
0000205E  43F9 0B00 3348          lea       _BreakPointInstruction.L,A1
00002062  014E      
00002064  3390 0800 3349          move.w    (A0),0(A1,D0.L)
                    3350   ; DisassembleInstruction(ProgramBreakPointAddress) ;
00002068  2F04      3351          move.l    D4,-(A7)
0000206A  4EB9 0000 3352          jsr       _DisassembleInstruction
0000206E  36E4      
00002070  584F      3353          addq.w    #4,A7
                    3354   ; FormatInstructionForTrace() ;
00002072  4EB8 12EA 3355          jsr       _FormatInstructionForTrace
                    3356   ; printf("\r\nBreak Point Set at Address: [$%08x], Instruction = %s", ProgramBreakPointAddress, Instruction) ;
00002076  4879 0B00 3357          pea       _Instruction.L
0000207A  04E2      
0000207C  2F04      3358          move.l    D4,-(A7)
0000207E  4879 0000 3359          pea       @m68kde~1_84.L
00002082  6958      
00002084  4E92      3360          jsr       (A2)
00002086  DEFC 000C 3361          add.w     #12,A7
                    3362   ; *ProgramBreakPointAddress = (unsigned short int)(0x4e4e)    ;   // put a Trap14 instruction at the user specified address
0000208A  2044      3363          move.l    D4,A0
0000208C  30BC 4E4E 3364          move.w    #20046,(A0)
                    3365   ; BreakPointAddress[i] = BPAddress ;                              // record the address of this break point in the debugger
00002090  2002      3366          move.l    D2,D0
00002092  E588      3367          lsl.l     #2,D0
00002094  41F9 0B00 3368          lea       _BreakPointAddress.L,A0
00002098  012E      
0000209A  2183 0800 3369          move.l    D3,0(A0,D0.L)
                    3370   ; printf("\r\n") ;
0000209E  4879 0000 3371          pea       @m68kde~1_1.L
000020A2  60D2      
000020A4  4E92      3372          jsr       (A2)
000020A6  584F      3373          addq.w    #4,A7
                    3374   ; BreakPointDisplay() ;       // display the break points
000020A8  4EB8 1B30 3375          jsr       _BreakPointDisplay
                    3376   ; return ;
000020AC  6006      3377          bra.s     SetBreakPoint_15
                    3378   SetBreakPoint_18:
000020AE  5282      3379          addq.l    #1,D2
000020B0  6000 FF64 3380          bra       SetBreakPoint_13
                    3381   SetBreakPoint_15:
000020B4  4CDF 0C1C 3382          movem.l   (A7)+,D2/D3/D4/A2/A3
000020B8  4E5E      3383          unlk      A6
000020BA  4E75      3384          rts
                    3385   ; }
                    3386   ; }
                    3387   ; }
                    3388   ; void SetWatchPoint(void)
                    3389   ; {
                    3390   _SetWatchPoint:
000020BC  4E56 FFF8 3391          link      A6,#-8
000020C0  48E7 3030 3392          movem.l   D2/D3/A2/A3,-(A7)
000020C4  45F9 0000 3393          lea       _printf.L,A2
000020C8  5782      
000020CA  47F9 0B00 3394          lea       _WatchPointSetOrCleared.L,A3
000020CE  01A2      
                    3395   ; int i ;
                    3396   ; int WPNumber;
                    3397   ; int WPAddress;
                    3398   ; volatile unsigned short int *ProgramWatchPointAddress ;
                    3399   ; // see if any free break points
                    3400   ; for(i = 0; i < 8; i ++) {
000020D0  4282      3401          clr.l     D2
                    3402   SetWatchPoint_1:
000020D2  0C82 0000 3403          cmp.l     #8,D2
000020D6  0008      
000020D8  6C10      3404          bge.s     SetWatchPoint_3
                    3405   ; if( WatchPointSetOrCleared[i] == 0)
000020DA  2002      3406          move.l    D2,D0
000020DC  E588      3407          lsl.l     #2,D0
000020DE  2033 0800 3408          move.l    0(A3,D0.L),D0
000020E2  6602      3409          bne.s     SetWatchPoint_4
                    3410   ; break ;         // if spare WP found allow user to set it
000020E4  6004      3411          bra.s     SetWatchPoint_3
                    3412   SetWatchPoint_4:
000020E6  5282      3413          addq.l    #1,D2
000020E8  60E8      3414          bra       SetWatchPoint_1
                    3415   SetWatchPoint_3:
                    3416   ; }
                    3417   ; if(i == 8) {
000020EA  0C82 0000 3418          cmp.l     #8,D2
000020EE  0008      
000020F0  660E      3419          bne.s     SetWatchPoint_6
                    3420   ; printf("\r\nNo FREE Watch Points.....") ;
000020F2  4879 0000 3421          pea       @m68kde~1_85.L
000020F6  6990      
000020F8  4E92      3422          jsr       (A2)
000020FA  584F      3423          addq.w    #4,A7
                    3424   ; return ;
000020FC  6000 008C 3425          bra       SetWatchPoint_11
                    3426   SetWatchPoint_6:
                    3427   ; }
                    3428   ; printf("\r\nWatch Point Address: ") ;
00002100  4879 0000 3429          pea       @m68kde~1_86.L
00002104  69AC      
00002106  4E92      3430          jsr       (A2)
00002108  584F      3431          addq.w    #4,A7
                    3432   ; WPAddress = Get8HexDigits(0) ;
0000210A  42A7      3433          clr.l     -(A7)
0000210C  4EB8 0CA4 3434          jsr       _Get8HexDigits
00002110  584F      3435          addq.w    #4,A7
00002112  2600      3436          move.l    D0,D3
                    3437   ; // search for first free wp or existing same wp
                    3438   ; for(i = 0; i < 8; i++)  {
00002114  4282      3439          clr.l     D2
                    3440   SetWatchPoint_9:
00002116  0C82 0000 3441          cmp.l     #8,D2
0000211A  0008      
0000211C  6C00 006C 3442          bge       SetWatchPoint_11
                    3443   ; if(WatchPointAddress[i] == WPAddress && WPAddress != 0)   {     //so we can set a wp at 0
00002120  2002      3444          move.l    D2,D0
00002122  E588      3445          lsl.l     #2,D0
00002124  41F9 0B00 3446          lea       _WatchPointAddress.L,A0
00002128  0182      
0000212A  B6B0 0800 3447          cmp.l     0(A0,D0.L),D3
0000212E  6614      3448          bne.s     SetWatchPoint_12
00002130  4A83      3449          tst.l     D3
00002132  6710      3450          beq.s     SetWatchPoint_12
                    3451   ; printf("\r\nError: Watch Point Already Set at Address : %08x\r\n", WPAddress) ;
00002134  2F03      3452          move.l    D3,-(A7)
00002136  4879 0000 3453          pea       @m68kde~1_87.L
0000213A  69C4      
0000213C  4E92      3454          jsr       (A2)
0000213E  504F      3455          addq.w    #8,A7
                    3456   ; return ;
00002140  6000 0048 3457          bra       SetWatchPoint_11
                    3458   SetWatchPoint_12:
                    3459   ; }
                    3460   ; if(WatchPointSetOrCleared[i] == 0) {
00002144  2002      3461          move.l    D2,D0
00002146  E588      3462          lsl.l     #2,D0
00002148  2033 0800 3463          move.l    0(A3,D0.L),D0
0000214C  6600 0038 3464          bne       SetWatchPoint_14
                    3465   ; WatchPointSetOrCleared[i] = 1 ;                                 // mark this watchpoint as set
00002150  2002      3466          move.l    D2,D0
00002152  E588      3467          lsl.l     #2,D0
00002154  27BC 0000 3468          move.l    #1,0(A3,D0.L)
00002158  0001 0800 
                    3469   ; printf("\r\nWatch Point Set at Address: [$%08x]", WPAddress) ;
0000215C  2F03      3470          move.l    D3,-(A7)
0000215E  4879 0000 3471          pea       @m68kde~1_88.L
00002162  69FA      
00002164  4E92      3472          jsr       (A2)
00002166  504F      3473          addq.w    #8,A7
                    3474   ; WatchPointAddress[i] = WPAddress ;                              // record the address of this watch point in the debugger
00002168  2002      3475          move.l    D2,D0
0000216A  E588      3476          lsl.l     #2,D0
0000216C  41F9 0B00 3477          lea       _WatchPointAddress.L,A0
00002170  0182      
00002172  2183 0800 3478          move.l    D3,0(A0,D0.L)
                    3479   ; printf("\r\n") ;
00002176  4879 0000 3480          pea       @m68kde~1_1.L
0000217A  60D2      
0000217C  4E92      3481          jsr       (A2)
0000217E  584F      3482          addq.w    #4,A7
                    3483   ; WatchPointDisplay() ;       // display the break points
00002180  4EB8 1C2A 3484          jsr       _WatchPointDisplay
                    3485   ; return ;
00002184  6004      3486          bra.s     SetWatchPoint_11
                    3487   SetWatchPoint_14:
00002186  5282      3488          addq.l    #1,D2
00002188  608C      3489          bra       SetWatchPoint_9
                    3490   SetWatchPoint_11:
0000218A  4CDF 0C0C 3491          movem.l   (A7)+,D2/D3/A2/A3
0000218E  4E5E      3492          unlk      A6
00002190  4E75      3493          rts
                    3494   ; }
                    3495   ; }
                    3496   ; }
                    3497   ; void HandleBreakPoint(void)
                    3498   ; {
                    3499   _HandleBreakPoint:
00002192  4E56 FFFC 3500          link      A6,#-4
00002196  48E7 0038 3501          movem.l   A2/A3/A4,-(A7)
0000219A  45F9 0B00 3502          lea       _i.L,A2
0000219E  00C4      
000021A0  47F9 0000 3503          lea       _printf.L,A3
000021A4  5782      
000021A6  49F9 0B00 3504          lea       _PC.L,A4
000021AA  0120      
                    3505   ; volatile unsigned short int *ProgramBreakPointAddress ;
                    3506   ; // now we have to put the break point back to run the instruction
                    3507   ; // PC will contain the address of the TRAP instruction but advanced by two bytes so lets play with that
                    3508   ; PC = PC - 2 ;  // ready for user to resume after reaching breakpoint
000021AC  5594      3509          subq.l    #2,(A4)
                    3510   ; printf("\r\n\r\n\r\n\r\n@BREAKPOINT") ;
000021AE  4879 0000 3511          pea       @m68kde~1_89.L
000021B2  6A20      
000021B4  4E93      3512          jsr       (A3)
000021B6  584F      3513          addq.w    #4,A7
                    3514   ; printf("\r\nSingle Step : [ON]") ;
000021B8  4879 0000 3515          pea       @m68kde~1_90.L
000021BC  6A34      
000021BE  4E93      3516          jsr       (A3)
000021C0  584F      3517          addq.w    #4,A7
                    3518   ; printf("\r\nBreakPoints : [Enabled]") ;
000021C2  4879 0000 3519          pea       @m68kde~1_91.L
000021C6  6A4A      
000021C8  4E93      3520          jsr       (A3)
000021CA  584F      3521          addq.w    #4,A7
                    3522   ; // now clear the break point (put original instruction back)
                    3523   ; ProgramBreakPointAddress = PC ;
000021CC  2D54 FFFC 3524          move.l    (A4),-4(A6)
                    3525   ; for(i = 0; i < 8; i ++) {
000021D0  4292      3526          clr.l     (A2)
                    3527   HandleBreakPoint_1:
000021D2  2012      3528          move.l    (A2),D0
000021D4  0C80 0000 3529          cmp.l     #8,D0
000021D8  0008      
000021DA  6400 0056 3530          bhs       HandleBreakPoint_3
                    3531   ; if(BreakPointAddress[i] == PC) {        // if we have found the breakpoint
000021DE  2012      3532          move.l    (A2),D0
000021E0  E588      3533          lsl.l     #2,D0
000021E2  41F9 0B00 3534          lea       _BreakPointAddress.L,A0
000021E6  012E      
000021E8  2230 0800 3535          move.l    0(A0,D0.L),D1
000021EC  B294      3536          cmp.l     (A4),D1
000021EE  6600 003E 3537          bne       HandleBreakPoint_4
                    3538   ; BreakPointAddress[i] = 0 ;
000021F2  2012      3539          move.l    (A2),D0
000021F4  E588      3540          lsl.l     #2,D0
000021F6  41F9 0B00 3541          lea       _BreakPointAddress.L,A0
000021FA  012E      
000021FC  42B0 0800 3542          clr.l     0(A0,D0.L)
                    3543   ; BreakPointSetOrCleared[i] = 0 ;
00002200  2012      3544          move.l    (A2),D0
00002202  E588      3545          lsl.l     #2,D0
00002204  41F9 0B00 3546          lea       _BreakPointSetOrCleared.L,A0
00002208  015E      
0000220A  42B0 0800 3547          clr.l     0(A0,D0.L)
                    3548   ; *ProgramBreakPointAddress = BreakPointInstruction[i] ;  // put original instruction back
0000220E  2012      3549          move.l    (A2),D0
00002210  E388      3550          lsl.l     #1,D0
00002212  41F9 0B00 3551          lea       _BreakPointInstruction.L,A0
00002216  014E      
00002218  226E FFFC 3552          move.l    -4(A6),A1
0000221C  32B0 0800 3553          move.w    0(A0,D0.L),(A1)
                    3554   ; BreakPointInstruction[i] = 0 ;
00002220  2012      3555          move.l    (A2),D0
00002222  E388      3556          lsl.l     #1,D0
00002224  41F9 0B00 3557          lea       _BreakPointInstruction.L,A0
00002228  014E      
0000222A  4270 0800 3558          clr.w     0(A0,D0.L)
                    3559   HandleBreakPoint_4:
0000222E  5292      3560          addq.l    #1,(A2)
00002230  60A0      3561          bra       HandleBreakPoint_1
                    3562   HandleBreakPoint_3:
                    3563   ; }
                    3564   ; }
                    3565   ; DumpRegisters() ;
00002232  4EB8 135E 3566          jsr       _DumpRegisters
                    3567   ; printf("\r\nPress <SPACE> to Execute Next Instruction");
00002236  4879 0000 3568          pea       @m68kde~1_52.L
0000223A  65AC      
0000223C  4E93      3569          jsr       (A3)
0000223E  584F      3570          addq.w    #4,A7
                    3571   ; printf("\r\nPress <ESC> to Resume User Program\r\n") ;
00002240  4879 0000 3572          pea       @m68kde~1_92.L
00002244  6A64      
00002246  4E93      3573          jsr       (A3)
00002248  584F      3574          addq.w    #4,A7
                    3575   ; menu() ;
0000224A  4EB9 0000 3576          jsr       _menu
0000224E  24A0      
00002250  4CDF 1C00 3577          movem.l   (A7)+,A2/A3/A4
00002254  4E5E      3578          unlk      A6
00002256  4E75      3579          rts
                    3580   ; }
                    3581   ; void UnknownCommand()
                    3582   ; {
                    3583   _UnknownCommand:
                    3584   ; printf("\r\nUnknown Command.....\r\n") ;
00002258  4879 0000 3585          pea       @m68kde~1_93.L
0000225C  6A8C      
0000225E  4EB9 0000 3586          jsr       _printf
00002262  5782      
00002264  584F      3587          addq.w    #4,A7
                    3588   ; Help() ;
00002266  4EB9 0000 3589          jsr       _Help
0000226A  23BC      
0000226C  4E75      3590          rts
                    3591   ; }
                    3592   ; // system when the users program executes a TRAP #15 instruction to halt program and return to debug monitor
                    3593   ; void CallDebugMonitor(void)
                    3594   ; {
                    3595   _CallDebugMonitor:
                    3596   ; printf("\r\nProgram Ended (TRAP #15)....") ;
0000226E  4879 0000 3597          pea       @m68kde~1_94.L
00002272  6AA6      
00002274  4EB9 0000 3598          jsr       _printf
00002278  5782      
0000227A  584F      3599          addq.w    #4,A7
                    3600   ; menu();
0000227C  4EB9 0000 3601          jsr       _menu
00002280  24A0      
00002282  4E75      3602          rts
                    3603   ; }
                    3604   ; void Breakpoint(void)
                    3605   ; {
                    3606   _Breakpoint:
00002284  2F02      3607          move.l    D2,-(A7)
                    3608   ; char c;
                    3609   ; c = toupper(_getch());
00002286  2F00      3610          move.l    D0,-(A7)
00002288  4EB8 0B68 3611          jsr       __getch
0000228C  2200      3612          move.l    D0,D1
0000228E  201F      3613          move.l    (A7)+,D0
00002290  2F01      3614          move.l    D1,-(A7)
00002292  4EB9 0000 3615          jsr       _toupper
00002296  5756      
00002298  584F      3616          addq.w    #4,A7
0000229A  1400      3617          move.b    D0,D2
                    3618   ; if( c == (char)('D'))                                      // BreakPoint Display
0000229C  0C02 0044 3619          cmp.b     #68,D2
000022A0  6608      3620          bne.s     Breakpoint_1
                    3621   ; BreakPointDisplay() ;
000022A2  4EB8 1B30 3622          jsr       _BreakPointDisplay
000022A6  6000 0054 3623          bra       Breakpoint_10
                    3624   Breakpoint_1:
                    3625   ; else if(c == (char)('K')) {                                 // breakpoint Kill
000022AA  0C02 004B 3626          cmp.b     #75,D2
000022AE  6630      3627          bne.s     Breakpoint_3
                    3628   ; printf("\r\nKill All Break Points...(y/n)?") ;
000022B0  4879 0000 3629          pea       @m68kde~1_95.L
000022B4  6AC6      
000022B6  4EB9 0000 3630          jsr       _printf
000022BA  5782      
000022BC  584F      3631          addq.w    #4,A7
                    3632   ; c = toupper(_getch());
000022BE  2F00      3633          move.l    D0,-(A7)
000022C0  4EB8 0B68 3634          jsr       __getch
000022C4  2200      3635          move.l    D0,D1
000022C6  201F      3636          move.l    (A7)+,D0
000022C8  2F01      3637          move.l    D1,-(A7)
000022CA  4EB9 0000 3638          jsr       _toupper
000022CE  5756      
000022D0  584F      3639          addq.w    #4,A7
000022D2  1400      3640          move.b    D0,D2
                    3641   ; if(c == (char)('Y'))
000022D4  0C02 0059 3642          cmp.b     #89,D2
000022D8  6604      3643          bne.s     Breakpoint_5
                    3644   ; KillAllBreakPoints() ;
000022DA  4EB8 1EEE 3645          jsr       _KillAllBreakPoints
                    3646   Breakpoint_5:
000022DE  601C      3647          bra.s     Breakpoint_10
                    3648   Breakpoint_3:
                    3649   ; }
                    3650   ; else if(c == (char)('S')) {
000022E0  0C02 0053 3651          cmp.b     #83,D2
000022E4  6606      3652          bne.s     Breakpoint_7
                    3653   ; SetBreakPoint() ;
000022E6  4EB8 1F86 3654          jsr       _SetBreakPoint
000022EA  6010      3655          bra.s     Breakpoint_10
                    3656   Breakpoint_7:
                    3657   ; }
                    3658   ; else if(c == (char)('C')) {
000022EC  0C02 0043 3659          cmp.b     #67,D2
000022F0  6606      3660          bne.s     Breakpoint_9
                    3661   ; BreakPointClear() ;
000022F2  4EB8 1CD6 3662          jsr       _BreakPointClear
000022F6  6004      3663          bra.s     Breakpoint_10
                    3664   Breakpoint_9:
                    3665   ; }
                    3666   ; else
                    3667   ; UnknownCommand() ;
000022F8  4EB8 2258 3668          jsr       _UnknownCommand
                    3669   Breakpoint_10:
000022FC  241F      3670          move.l    (A7)+,D2
000022FE  4E75      3671          rts
                    3672   ; }
                    3673   ; void Watchpoint(void)
                    3674   ; {
                    3675   _Watchpoint:
00002300  2F02      3676          move.l    D2,-(A7)
                    3677   ; char c;
                    3678   ; c = toupper(_getch());
00002302  2F00      3679          move.l    D0,-(A7)
00002304  4EB8 0B68 3680          jsr       __getch
00002308  2200      3681          move.l    D0,D1
0000230A  201F      3682          move.l    (A7)+,D0
0000230C  2F01      3683          move.l    D1,-(A7)
0000230E  4EB9 0000 3684          jsr       _toupper
00002312  5756      
00002314  584F      3685          addq.w    #4,A7
00002316  1400      3686          move.b    D0,D2
                    3687   ; if( c == (char)('D'))                                      // WatchPoint Display
00002318  0C02 0044 3688          cmp.b     #68,D2
0000231C  6608      3689          bne.s     Watchpoint_1
                    3690   ; WatchPointDisplay() ;
0000231E  4EB8 1C2A 3691          jsr       _WatchPointDisplay
00002322  6000 0054 3692          bra       Watchpoint_10
                    3693   Watchpoint_1:
                    3694   ; else if(c == (char)('K')) {                                 // wtahcpoint Kill
00002326  0C02 004B 3695          cmp.b     #75,D2
0000232A  6630      3696          bne.s     Watchpoint_3
                    3697   ; printf("\r\nKill All Watch Points...(y/n)?") ;
0000232C  4879 0000 3698          pea       @m68kde~1_96.L
00002330  6AE8      
00002332  4EB9 0000 3699          jsr       _printf
00002336  5782      
00002338  584F      3700          addq.w    #4,A7
                    3701   ; c = toupper(_getch());
0000233A  2F00      3702          move.l    D0,-(A7)
0000233C  4EB8 0B68 3703          jsr       __getch
00002340  2200      3704          move.l    D0,D1
00002342  201F      3705          move.l    (A7)+,D0
00002344  2F01      3706          move.l    D1,-(A7)
00002346  4EB9 0000 3707          jsr       _toupper
0000234A  5756      
0000234C  584F      3708          addq.w    #4,A7
0000234E  1400      3709          move.b    D0,D2
                    3710   ; if(c == (char)('Y'))
00002350  0C02 0059 3711          cmp.b     #89,D2
00002354  6604      3712          bne.s     Watchpoint_5
                    3713   ; KillAllWatchPoints() ;
00002356  4EB8 1F56 3714          jsr       _KillAllWatchPoints
                    3715   Watchpoint_5:
0000235A  601C      3716          bra.s     Watchpoint_10
                    3717   Watchpoint_3:
                    3718   ; }
                    3719   ; else if(c == (char)('S')) {
0000235C  0C02 0053 3720          cmp.b     #83,D2
00002360  6606      3721          bne.s     Watchpoint_7
                    3722   ; SetWatchPoint() ;
00002362  4EB8 20BC 3723          jsr       _SetWatchPoint
00002366  6010      3724          bra.s     Watchpoint_10
                    3725   Watchpoint_7:
                    3726   ; }
                    3727   ; else if(c == (char)('C')) {
00002368  0C02 0043 3728          cmp.b     #67,D2
0000236C  6606      3729          bne.s     Watchpoint_9
                    3730   ; WatchPointClear() ;
0000236E  4EB8 1DB0 3731          jsr       _WatchPointClear
00002372  6004      3732          bra.s     Watchpoint_10
                    3733   Watchpoint_9:
                    3734   ; }
                    3735   ; else
                    3736   ; UnknownCommand() ;
00002374  4EB8 2258 3737          jsr       _UnknownCommand
                    3738   Watchpoint_10:
00002378  241F      3739          move.l    (A7)+,D2
0000237A  4E75      3740          rts
                    3741   ; }
                    3742   ; void DMenu(void)
                    3743   ; {
                    3744   _DMenu:
0000237C  2F02      3745          move.l    D2,-(A7)
                    3746   ; char c;
                    3747   ; c = toupper(_getch());
0000237E  2F00      3748          move.l    D0,-(A7)
00002380  4EB8 0B68 3749          jsr       __getch
00002384  2200      3750          move.l    D0,D1
00002386  201F      3751          move.l    (A7)+,D0
00002388  2F01      3752          move.l    D1,-(A7)
0000238A  4EB9 0000 3753          jsr       _toupper
0000238E  5756      
00002390  584F      3754          addq.w    #4,A7
00002392  1400      3755          move.b    D0,D2
                    3756   ; if( c == (char)('U'))                                     // Dump Memory
00002394  0C02 0055 3757          cmp.b     #85,D2
00002398  6606      3758          bne.s     DMenu_1
                    3759   ; DumpMemory() ;
0000239A  4EB8 0EE0 3760          jsr       _DumpMemory
0000239E  6018      3761          bra.s     DMenu_4
                    3762   DMenu_1:
                    3763   ; else if(c == (char)('I'))   {
000023A0  0C02 0049 3764          cmp.b     #73,D2
000023A4  660E      3765          bne.s     DMenu_3
                    3766   ; DisableBreakPoints() ;
000023A6  4EB8 1E52 3767          jsr       _DisableBreakPoints
                    3768   ; DisassembleProgram() ;
000023AA  4EB8 0D00 3769          jsr       _DisassembleProgram
                    3770   ; EnableBreakPoints() ;
000023AE  4EB8 1EA6 3771          jsr       _EnableBreakPoints
000023B2  6004      3772          bra.s     DMenu_4
                    3773   DMenu_3:
                    3774   ; }
                    3775   ; else
                    3776   ; UnknownCommand() ;
000023B4  4EB8 2258 3777          jsr       _UnknownCommand
                    3778   DMenu_4:
000023B8  241F      3779          move.l    (A7)+,D2
000023BA  4E75      3780          rts
                    3781   ; }
                    3782   ; void Help(void)
                    3783   ; {
                    3784   _Help:
000023BC  48E7 2020 3785          movem.l   D2/A2,-(A7)
000023C0  45F9 0000 3786          lea       _printf.L,A2
000023C4  5782      
                    3787   ; char *banner = "\r\n----------------------------------------------------------------" ;
000023C6  41F9 0000 3788          lea       @m68kde~1_97.L,A0
000023CA  6B0A      
000023CC  2408      3789          move.l    A0,D2
                    3790   ; printf(banner) ;
000023CE  2F02      3791          move.l    D2,-(A7)
000023D0  4E92      3792          jsr       (A2)
000023D2  584F      3793          addq.w    #4,A7
                    3794   ; printf("\r\n  Debugger Command Summary") ;
000023D4  4879 0000 3795          pea       @m68kde~1_98.L
000023D8  6B4E      
000023DA  4E92      3796          jsr       (A2)
000023DC  584F      3797          addq.w    #4,A7
                    3798   ; printf(banner) ;
000023DE  2F02      3799          move.l    D2,-(A7)
000023E0  4E92      3800          jsr       (A2)
000023E2  584F      3801          addq.w    #4,A7
                    3802   ; printf("\r\n  .(reg)       - Change Registers: e.g A0-A7,D0-D7,PC,SSP,USP,SR");
000023E4  4879 0000 3803          pea       @m68kde~1_99.L
000023E8  6B6C      
000023EA  4E92      3804          jsr       (A2)
000023EC  584F      3805          addq.w    #4,A7
                    3806   ; printf("\r\n  BD/BS/BC/BK  - Break Point: Display/Set/Clear/Kill") ;
000023EE  4879 0000 3807          pea       @m68kde~1_100.L
000023F2  6BB0      
000023F4  4E92      3808          jsr       (A2)
000023F6  584F      3809          addq.w    #4,A7
                    3810   ; printf("\r\n  C            - Copy Program from Flash to Main Memory") ;
000023F8  4879 0000 3811          pea       @m68kde~1_101.L
000023FC  6BE8      
000023FE  4E92      3812          jsr       (A2)
00002400  584F      3813          addq.w    #4,A7
                    3814   ; printf("\r\n  DI           - Disassemble Program");
00002402  4879 0000 3815          pea       @m68kde~1_102.L
00002406  6C22      
00002408  4E92      3816          jsr       (A2)
0000240A  584F      3817          addq.w    #4,A7
                    3818   ; printf("\r\n  DU           - Dump Memory Contents to Screen") ;
0000240C  4879 0000 3819          pea       @m68kde~1_103.L
00002410  6C4A      
00002412  4E92      3820          jsr       (A2)
00002414  584F      3821          addq.w    #4,A7
                    3822   ; printf("\r\n  E            - Enter String into Memory") ;
00002416  4879 0000 3823          pea       @m68kde~1_104.L
0000241A  6C7C      
0000241C  4E92      3824          jsr       (A2)
0000241E  584F      3825          addq.w    #4,A7
                    3826   ; printf("\r\n  F            - Fill Memory with Data") ;
00002420  4879 0000 3827          pea       @m68kde~1_105.L
00002424  6CA8      
00002426  4E92      3828          jsr       (A2)
00002428  584F      3829          addq.w    #4,A7
                    3830   ; printf("\r\n  G            - Go Program Starting at Address: $%08X", PC) ;
0000242A  2F39 0B00 3831          move.l    _PC.L,-(A7)
0000242E  0120      
00002430  4879 0000 3832          pea       @m68kde~1_106.L
00002434  6CD2      
00002436  4E92      3833          jsr       (A2)
00002438  504F      3834          addq.w    #8,A7
                    3835   ; printf("\r\n  L            - Load Program (.HEX file) from Laptop") ;
0000243A  4879 0000 3836          pea       @m68kde~1_107.L
0000243E  6D0C      
00002440  4E92      3837          jsr       (A2)
00002442  584F      3838          addq.w    #4,A7
                    3839   ; printf("\r\n  M            - Memory Examine and Change");
00002444  4879 0000 3840          pea       @m68kde~1_108.L
00002448  6D44      
0000244A  4E92      3841          jsr       (A2)
0000244C  584F      3842          addq.w    #4,A7
                    3843   ; printf("\r\n  P            - Program Flash Memory with User Program") ;
0000244E  4879 0000 3844          pea       @m68kde~1_109.L
00002452  6D72      
00002454  4E92      3845          jsr       (A2)
00002456  584F      3846          addq.w    #4,A7
                    3847   ; printf("\r\n  R            - Display 68000 Registers") ;
00002458  4879 0000 3848          pea       @m68kde~1_110.L
0000245C  6DAC      
0000245E  4E92      3849          jsr       (A2)
00002460  584F      3850          addq.w    #4,A7
                    3851   ; printf("\r\n  S            - Toggle ON/OFF Single Step Mode") ;
00002462  4879 0000 3852          pea       @m68kde~1_111.L
00002466  6DD8      
00002468  4E92      3853          jsr       (A2)
0000246A  584F      3854          addq.w    #4,A7
                    3855   ; printf("\r\n  TM           - Test Memory") ;
0000246C  4879 0000 3856          pea       @m68kde~1_112.L
00002470  6E0A      
00002472  4E92      3857          jsr       (A2)
00002474  584F      3858          addq.w    #4,A7
                    3859   ; printf("\r\n  TS           - Test Switches: SW7-0") ;
00002476  4879 0000 3860          pea       @m68kde~1_113.L
0000247A  6E2A      
0000247C  4E92      3861          jsr       (A2)
0000247E  584F      3862          addq.w    #4,A7
                    3863   ; printf("\r\n  TD           - Test Displays: LEDs and 7-Segment") ;
00002480  4879 0000 3864          pea       @m68kde~1_114.L
00002484  6E52      
00002486  4E92      3865          jsr       (A2)
00002488  584F      3866          addq.w    #4,A7
                    3867   ; printf("\r\n  WD/WS/WC/WK  - Watch Point: Display/Set/Clear/Kill") ;
0000248A  4879 0000 3868          pea       @m68kde~1_115.L
0000248E  6E88      
00002490  4E92      3869          jsr       (A2)
00002492  584F      3870          addq.w    #4,A7
                    3871   ; printf(banner) ;
00002494  2F02      3872          move.l    D2,-(A7)
00002496  4E92      3873          jsr       (A2)
00002498  584F      3874          addq.w    #4,A7
0000249A  4CDF 0404 3875          movem.l   (A7)+,D2/A2
0000249E  4E75      3876          rts
                    3877   ; }
                    3878   ; void menu(void)
                    3879   ; {
                    3880   _menu:
000024A0  48E7 303C 3881          movem.l   D2/D3/A2/A3/A4/A5,-(A7)
000024A4  45F9 0000 3882          lea       _printf.L,A2
000024A8  5782      
000024AA  47F9 0B00 3883          lea       _Trace.L,A3
000024AE  00D8      
000024B0  49F9 0B00 3884          lea       _x.L,A4
000024B4  00C8      
000024B6  4BF9 0B00 3885          lea       _SR.L,A5
000024BA  012C      
                    3886   ; char c,c1 ;
                    3887   ; while(1)    {
                    3888   menu_1:
                    3889   ; FlushKeyboard() ;               // dump unread characters from keyboard
000024BC  4EB8 0BA6 3890          jsr       _FlushKeyboard
                    3891   ; printf("\r\n#") ;
000024C0  4879 0000 3892          pea       @m68kde~1_116.L
000024C4  6EC0      
000024C6  4E92      3893          jsr       (A2)
000024C8  584F      3894          addq.w    #4,A7
                    3895   ; c = toupper(_getch());
000024CA  2F00      3896          move.l    D0,-(A7)
000024CC  4EB8 0B68 3897          jsr       __getch
000024D0  2200      3898          move.l    D0,D1
000024D2  201F      3899          move.l    (A7)+,D0
000024D4  2F01      3900          move.l    D1,-(A7)
000024D6  4EB9 0000 3901          jsr       _toupper
000024DA  5756      
000024DC  584F      3902          addq.w    #4,A7
000024DE  1400      3903          move.b    D0,D2
                    3904   ; if( c == (char)('L'))                  // load s record file
000024E0  0C02 004C 3905          cmp.b     #76,D2
000024E4  6608      3906          bne.s     menu_4
                    3907   ; Load_SRecordFile() ;
000024E6  4EB8 104A 3908          jsr       _Load_SRecordFile
000024EA  6000 021E 3909          bra       menu_46
                    3910   menu_4:
                    3911   ; else if( c == (char)('D'))             // dump memory
000024EE  0C02 0044 3912          cmp.b     #68,D2
000024F2  6608      3913          bne.s     menu_6
                    3914   ; DMenu() ;
000024F4  4EB8 237C 3915          jsr       _DMenu
000024F8  6000 0210 3916          bra       menu_46
                    3917   menu_6:
                    3918   ; else if( c == (char)('E'))             // Enter String into memory
000024FC  0C02 0045 3919          cmp.b     #69,D2
00002500  660A      3920          bne.s     menu_8
                    3921   ; EnterString() ;
00002502  4EB9 0000 3922          jsr       _EnterString
00002506  2852      
00002508  6000 0200 3923          bra       menu_46
                    3924   menu_8:
                    3925   ; else if( c == (char)('F'))             // fill memory
0000250C  0C02 0046 3926          cmp.b     #70,D2
00002510  6608      3927          bne.s     menu_10
                    3928   ; FillMemory() ;
00002512  4EB8 0FD0 3929          jsr       _FillMemory
00002516  6000 01F2 3930          bra       menu_46
                    3931   menu_10:
                    3932   ; else if( c == (char)('G'))  {           // go user program
0000251A  0C02 0047 3933          cmp.b     #71,D2
0000251E  6626      3934          bne.s     menu_12
                    3935   ; printf("\r\nProgram Running.....") ;
00002520  4879 0000 3936          pea       @m68kde~1_117.L
00002524  6EC4      
00002526  4E92      3937          jsr       (A2)
00002528  584F      3938          addq.w    #4,A7
                    3939   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
0000252A  4879 0000 3940          pea       @m68kde~1_118.L
0000252E  6EDC      
00002530  4E92      3941          jsr       (A2)
00002532  584F      3942          addq.w    #4,A7
                    3943   ; GoFlag = 1 ;
00002534  23FC 0000 3944          move.l    #1,_GoFlag.L
00002538  0001 0B00 
0000253C  00DC      
                    3945   ; go() ;
0000253E  4EB8 08B8 3946          jsr       _go
00002542  6000 01C6 3947          bra       menu_46
                    3948   menu_12:
                    3949   ; }
                    3950   ; else if( c == (char)('M'))           // memory examine and modify
00002546  0C02 004D 3951          cmp.b     #77,D2
0000254A  6608      3952          bne.s     menu_14
                    3953   ; MemoryChange() ;
0000254C  4EB8 11D8 3954          jsr       _MemoryChange
00002550  6000 01B8 3955          bra       menu_46
                    3956   menu_14:
                    3957   ; else if( c == (char)('P'))            // Program Flash Chip
00002554  0C02 0050 3958          cmp.b     #80,D2
00002558  6608      3959          bne.s     menu_16
                    3960   ; ProgramFlashChip() ;
0000255A  4EB8 12D8 3961          jsr       _ProgramFlashChip
0000255E  6000 01AA 3962          bra       menu_46
                    3963   menu_16:
                    3964   ; else if( c == (char)('C'))             // copy flash chip to ram and go
00002562  0C02 0043 3965          cmp.b     #67,D2
00002566  6608      3966          bne.s     menu_18
                    3967   ; LoadFromFlashChip();
00002568  4EB8 12DA 3968          jsr       _LoadFromFlashChip
0000256C  6000 019C 3969          bra       menu_46
                    3970   menu_18:
                    3971   ; else if( c == (char)('R'))             // dump registers
00002570  0C02 0052 3972          cmp.b     #82,D2
00002574  6608      3973          bne.s     menu_20
                    3974   ; DumpRegisters() ;
00002576  4EB8 135E 3975          jsr       _DumpRegisters
0000257A  6000 018E 3976          bra       menu_46
                    3977   menu_20:
                    3978   ; else if( c == (char)('.'))           // change registers
0000257E  0C02 002E 3979          cmp.b     #46,D2
00002582  6608      3980          bne.s     menu_22
                    3981   ; ChangeRegisters() ;
00002584  4EB8 1874 3982          jsr       _ChangeRegisters
00002588  6000 0180 3983          bra       menu_46
                    3984   menu_22:
                    3985   ; else if( c == (char)('B'))              // breakpoint command
0000258C  0C02 0042 3986          cmp.b     #66,D2
00002590  6608      3987          bne.s     menu_24
                    3988   ; Breakpoint() ;
00002592  4EB8 2284 3989          jsr       _Breakpoint
00002596  6000 0172 3990          bra       menu_46
                    3991   menu_24:
                    3992   ; else if( c == (char)('T'))  {          // Test command
0000259A  0C02 0054 3993          cmp.b     #84,D2
0000259E  6600 0046 3994          bne       menu_26
                    3995   ; c1 = toupper(_getch()) ;
000025A2  2F00      3996          move.l    D0,-(A7)
000025A4  4EB8 0B68 3997          jsr       __getch
000025A8  2200      3998          move.l    D0,D1
000025AA  201F      3999          move.l    (A7)+,D0
000025AC  2F01      4000          move.l    D1,-(A7)
000025AE  4EB9 0000 4001          jsr       _toupper
000025B2  5756      
000025B4  584F      4002          addq.w    #4,A7
000025B6  1600      4003          move.b    D0,D3
                    4004   ; if(c1 == (char)('M'))                    // memory test
000025B8  0C03 004D 4005          cmp.b     #77,D3
000025BC  6608      4006          bne.s     menu_28
                    4007   ; MemoryTest() ;
000025BE  4EB9 0000 4008          jsr       _MemoryTest
000025C2  28A2      
000025C4  601C      4009          bra.s     menu_33
                    4010   menu_28:
                    4011   ; else if( c1 == (char)('S'))              // Switch Test command
000025C6  0C03 0053 4012          cmp.b     #83,D3
000025CA  6606      4013          bne.s     menu_30
                    4014   ; SwitchTest() ;
000025CC  4EB8 0AA4 4015          jsr       _SwitchTest
000025D0  6010      4016          bra.s     menu_33
                    4017   menu_30:
                    4018   ; else if( c1 == (char)('D'))              // display Test command
000025D2  0C03 0044 4019          cmp.b     #68,D3
000025D6  6606      4020          bne.s     menu_32
                    4021   ; TestLEDS() ;
000025D8  4EB8 0A50 4022          jsr       _TestLEDS
000025DC  6004      4023          bra.s     menu_33
                    4024   menu_32:
                    4025   ; else
                    4026   ; UnknownCommand() ;
000025DE  4EB8 2258 4027          jsr       _UnknownCommand
                    4028   menu_33:
000025E2  6000 0126 4029          bra       menu_46
                    4030   menu_26:
                    4031   ; }
                    4032   ; else if( c == (char)(' ')) {             // Next instruction command
000025E6  0C02 0020 4033          cmp.b     #32,D2
000025EA  6636      4034          bne.s     menu_34
                    4035   ; DisableBreakPoints() ;
000025EC  4EB8 1E52 4036          jsr       _DisableBreakPoints
                    4037   ; if(Trace == 1 && GoFlag == 1)   {    // if the program is running and trace mode on then 'N' is valid
000025F0  2013      4038          move.l    (A3),D0
000025F2  0C80 0000 4039          cmp.l     #1,D0
000025F6  0001      
000025F8  661A      4040          bne.s     menu_36
000025FA  2039 0B00 4041          move.l    _GoFlag.L,D0
000025FE  00DC      
00002600  0C80 0000 4042          cmp.l     #1,D0
00002604  0001      
00002606  660C      4043          bne.s     menu_36
                    4044   ; TraceException = 1 ;             // generate a trace exception for the next instruction if user wants to single step though next instruction
00002608  13FC 0001 4045          move.b    #1,4194314
0000260C  0040 000A 
                    4046   ; return ;
00002610  6000 00FC 4047          bra       menu_38
                    4048   menu_36:
                    4049   ; }
                    4050   ; else
                    4051   ; printf("\r\nError: Press 'G' first to start program") ;
00002614  4879 0000 4052          pea       @m68kde~1_119.L
00002618  6F0A      
0000261A  4E92      4053          jsr       (A2)
0000261C  584F      4054          addq.w    #4,A7
0000261E  6000 00EA 4055          bra       menu_46
                    4056   menu_34:
                    4057   ; }
                    4058   ; else if( c == (char)('S')) {             // single step
00002622  0C02 0053 4059          cmp.b     #83,D2
00002626  6600 008C 4060          bne       menu_39
                    4061   ; if(Trace == 0) {
0000262A  2013      4062          move.l    (A3),D0
0000262C  6600 0050 4063          bne       menu_41
                    4064   ; DisableBreakPoints() ;
00002630  4EB8 1E52 4065          jsr       _DisableBreakPoints
                    4066   ; printf("\r\nSingle Step  :[ON]") ;
00002634  4879 0000 4067          pea       @m68kde~1_120.L
00002638  6F34      
0000263A  4E92      4068          jsr       (A2)
0000263C  584F      4069          addq.w    #4,A7
                    4070   ; printf("\r\nBreak Points :[Disabled]") ;
0000263E  4879 0000 4071          pea       @m68kde~1_51.L
00002642  6590      
00002644  4E92      4072          jsr       (A2)
00002646  584F      4073          addq.w    #4,A7
                    4074   ; SR = SR | (unsigned short int)(0x8000) ;    // set T bit in status register
00002648  0055 8000 4075          or.w      #32768,(A5)
                    4076   ; printf("\r\nPress 'G' to Trace Program from address $%X.....",PC) ;
0000264C  2F39 0B00 4077          move.l    _PC.L,-(A7)
00002650  0120      
00002652  4879 0000 4078          pea       @m68kde~1_121.L
00002656  6F4A      
00002658  4E92      4079          jsr       (A2)
0000265A  504F      4080          addq.w    #8,A7
                    4081   ; printf("\r\nPush <RESET Button> to Stop.....") ;
0000265C  4879 0000 4082          pea       @m68kde~1_122.L
00002660  6F7E      
00002662  4E92      4083          jsr       (A2)
00002664  584F      4084          addq.w    #4,A7
                    4085   ; DumpRegisters() ;
00002666  4EB8 135E 4086          jsr       _DumpRegisters
                    4087   ; Trace = 1;
0000266A  26BC 0000 4088          move.l    #1,(A3)
0000266E  0001      
                    4089   ; TraceException = 1;
00002670  13FC 0001 4090          move.b    #1,4194314
00002674  0040 000A 
                    4091   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002678  28B8 0074 4092          move.l    116,(A4)
0000267C  6032      4093          bra.s     menu_42
                    4094   menu_41:
                    4095   ; }
                    4096   ; else {
                    4097   ; Trace = 0 ;
0000267E  4293      4098          clr.l     (A3)
                    4099   ; TraceException = 0 ;
00002680  4239 0040 4100          clr.b     4194314
00002684  000A      
                    4101   ; x = *(unsigned int *)(0x00000074) ;       // simulate responding to a Level 5 IRQ by reading vector to reset Trace exception generator
00002686  28B8 0074 4102          move.l    116,(A4)
                    4103   ; EnableBreakPoints() ;
0000268A  4EB8 1EA6 4104          jsr       _EnableBreakPoints
                    4105   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
0000268E  0255 7FFF 4106          and.w     #32767,(A5)
                    4107   ; printf("\r\nSingle Step : [OFF]") ;
00002692  4879 0000 4108          pea       @m68kde~1_123.L
00002696  6FA2      
00002698  4E92      4109          jsr       (A2)
0000269A  584F      4110          addq.w    #4,A7
                    4111   ; printf("\r\nBreak Points :[Enabled]") ;
0000269C  4879 0000 4112          pea       @m68kde~1_124.L
000026A0  6FB8      
000026A2  4E92      4113          jsr       (A2)
000026A4  584F      4114          addq.w    #4,A7
                    4115   ; printf("\r\nPress <ESC> to Resume User Program.....") ;
000026A6  4879 0000 4116          pea       @m68kde~1_125.L
000026AA  6FD2      
000026AC  4E92      4117          jsr       (A2)
000026AE  584F      4118          addq.w    #4,A7
                    4119   menu_42:
000026B0  6000 0058 4120          bra       menu_46
                    4121   menu_39:
                    4122   ; }
                    4123   ; }
                    4124   ; else if(c == (char)(0x1b))  {   // if user choses to end trace and run program
000026B4  0C02 001B 4125          cmp.b     #27,D2
000026B8  6600 0040 4126          bne       menu_43
                    4127   ; Trace = 0;
000026BC  4293      4128          clr.l     (A3)
                    4129   ; TraceException = 0;
000026BE  4239 0040 4130          clr.b     4194314
000026C2  000A      
                    4131   ; x = *(unsigned int *)(0x00000074) ;   // read IRQ 5 vector to reset trace vector generator
000026C4  28B8 0074 4132          move.l    116,(A4)
                    4133   ; EnableBreakPoints() ;
000026C8  4EB8 1EA6 4134          jsr       _EnableBreakPoints
                    4135   ; SR = SR & (unsigned short int)(0x7FFF) ;    // clear T bit in status register
000026CC  0255 7FFF 4136          and.w     #32767,(A5)
                    4137   ; printf("\r\nSingle Step  :[OFF]") ;
000026D0  4879 0000 4138          pea       @m68kde~1_126.L
000026D4  6FFC      
000026D6  4E92      4139          jsr       (A2)
000026D8  584F      4140          addq.w    #4,A7
                    4141   ; printf("\r\nBreak Points :[Enabled]");
000026DA  4879 0000 4142          pea       @m68kde~1_124.L
000026DE  6FB8      
000026E0  4E92      4143          jsr       (A2)
000026E2  584F      4144          addq.w    #4,A7
                    4145   ; printf("\r\nProgram Running.....") ;
000026E4  4879 0000 4146          pea       @m68kde~1_117.L
000026E8  6EC4      
000026EA  4E92      4147          jsr       (A2)
000026EC  584F      4148          addq.w    #4,A7
                    4149   ; printf("\r\nPress <RESET> button <Key0> on DE1 to stop") ;
000026EE  4879 0000 4150          pea       @m68kde~1_118.L
000026F2  6EDC      
000026F4  4E92      4151          jsr       (A2)
000026F6  584F      4152          addq.w    #4,A7
                    4153   ; return ;
000026F8  6014      4154          bra.s     menu_38
                    4155   menu_43:
                    4156   ; }
                    4157   ; else if( c == (char)('W'))              // Watchpoint command
000026FA  0C02 0057 4158          cmp.b     #87,D2
000026FE  6606      4159          bne.s     menu_45
                    4160   ; Watchpoint() ;
00002700  4EB8 2300 4161          jsr       _Watchpoint
00002704  6004      4162          bra.s     menu_46
                    4163   menu_45:
                    4164   ; else
                    4165   ; UnknownCommand() ;
00002706  4EB8 2258 4166          jsr       _UnknownCommand
                    4167   menu_46:
0000270A  6000 FDB0 4168          bra       menu_1
                    4169   menu_38:
0000270E  4CDF 3C0C 4170          movem.l   (A7)+,D2/D3/A2/A3/A4/A5
00002712  4E75      4171          rts
                    4172   ; }
                    4173   ; }
                    4174   ; void PrintErrorMessageandAbort(char *string) {
                    4175   _PrintErrorMessageandAbort:
00002714  4E56 0000 4176          link      A6,#0
                    4177   ; printf("\r\n\r\nProgram ABORT !!!!!!\r\n") ;
00002718  4879 0000 4178          pea       @m68kde~1_127.L
0000271C  7012      
0000271E  4EB9 0000 4179          jsr       _printf
00002722  5782      
00002724  584F      4180          addq.w    #4,A7
                    4181   ; printf("%s\r\n", string) ;
00002726  2F2E 0008 4182          move.l    8(A6),-(A7)
0000272A  4879 0000 4183          pea       @m68kde~1_128.L
0000272E  702E      
00002730  4EB9 0000 4184          jsr       _printf
00002734  5782      
00002736  504F      4185          addq.w    #8,A7
                    4186   ; menu() ;
00002738  4EB8 24A0 4187          jsr       _menu
0000273C  4E5E      4188          unlk      A6
0000273E  4E75      4189          rts
                    4190   ; }
                    4191   ; void IRQMessage(int level) {
                    4192   _IRQMessage:
00002740  4E56 0000 4193          link      A6,#0
                    4194   ; printf("\r\n\r\nProgram ABORT !!!!!");
00002744  4879 0000 4195          pea       @m68kde~1_129.L
00002748  7034      
0000274A  4EB9 0000 4196          jsr       _printf
0000274E  5782      
00002750  584F      4197          addq.w    #4,A7
                    4198   ; printf("\r\nUnhandled Interrupt: IRQ%d !!!!!", level) ;
00002752  2F2E 0008 4199          move.l    8(A6),-(A7)
00002756  4879 0000 4200          pea       @m68kde~1_130.L
0000275A  704C      
0000275C  4EB9 0000 4201          jsr       _printf
00002760  5782      
00002762  504F      4202          addq.w    #8,A7
                    4203   ; menu() ;
00002764  4EB8 24A0 4204          jsr       _menu
00002768  4E5E      4205          unlk      A6
0000276A  4E75      4206          rts
                    4207   ; }
                    4208   ; void UnhandledIRQ1(void) {
                    4209   _UnhandledIRQ1:
                    4210   ; IRQMessage(1);
0000276C  4878 0001 4211          pea       1
00002770  4EB8 2740 4212          jsr       _IRQMessage
00002774  584F      4213          addq.w    #4,A7
00002776  4E75      4214          rts
                    4215   ; }
                    4216   ; void UnhandledIRQ2(void) {
                    4217   _UnhandledIRQ2:
                    4218   ; IRQMessage(2);
00002778  4878 0002 4219          pea       2
0000277C  4EB8 2740 4220          jsr       _IRQMessage
00002780  584F      4221          addq.w    #4,A7
00002782  4E75      4222          rts
                    4223   ; }
                    4224   ; void UnhandledIRQ3(void){
                    4225   _UnhandledIRQ3:
                    4226   ; IRQMessage(3);
00002784  4878 0003 4227          pea       3
00002788  4EB8 2740 4228          jsr       _IRQMessage
0000278C  584F      4229          addq.w    #4,A7
0000278E  4E75      4230          rts
                    4231   ; }
                    4232   ; void UnhandledIRQ4(void) {
                    4233   _UnhandledIRQ4:
                    4234   ; IRQMessage(4);
00002790  4878 0004 4235          pea       4
00002794  4EB8 2740 4236          jsr       _IRQMessage
00002798  584F      4237          addq.w    #4,A7
0000279A  4E75      4238          rts
                    4239   ; }
                    4240   ; void UnhandledIRQ5(void) {
                    4241   _UnhandledIRQ5:
                    4242   ; IRQMessage(5);
0000279C  4878 0005 4243          pea       5
000027A0  4EB8 2740 4244          jsr       _IRQMessage
000027A4  584F      4245          addq.w    #4,A7
000027A6  4E75      4246          rts
                    4247   ; }
                    4248   ; void UnhandledIRQ6(void) {
                    4249   _UnhandledIRQ6:
                    4250   ; PrintErrorMessageandAbort("ADDRESS ERROR: 16 or 32 Bit Transfer to/from an ODD Address....") ;
000027A8  4879 0000 4251          pea       @m68kde~1_131.L
000027AC  7070      
000027AE  4EB8 2714 4252          jsr       _PrintErrorMessageandAbort
000027B2  584F      4253          addq.w    #4,A7
                    4254   ; menu() ;
000027B4  4EB8 24A0 4255          jsr       _menu
000027B8  4E75      4256          rts
                    4257   ; }
                    4258   ; void UnhandledIRQ7(void) {
                    4259   _UnhandledIRQ7:
                    4260   ; IRQMessage(7);
000027BA  4878 0007 4261          pea       7
000027BE  4EB8 2740 4262          jsr       _IRQMessage
000027C2  584F      4263          addq.w    #4,A7
000027C4  4E75      4264          rts
                    4265   ; }
                    4266   ; void UnhandledTrap(void) {
                    4267   _UnhandledTrap:
                    4268   ; PrintErrorMessageandAbort("Unhandled Trap !!!!!") ;
000027C6  4879 0000 4269          pea       @m68kde~1_132.L
000027CA  70B0      
000027CC  4EB8 2714 4270          jsr       _PrintErrorMessageandAbort
000027D0  584F      4271          addq.w    #4,A7
000027D2  4E75      4272          rts
                    4273   ; }
                    4274   ; void BusError() {
                    4275   _BusError:
                    4276   ; PrintErrorMessageandAbort("BUS Error!") ;
000027D4  4879 0000 4277          pea       @m68kde~1_133.L
000027D8  70C6      
000027DA  4EB8 2714 4278          jsr       _PrintErrorMessageandAbort
000027DE  584F      4279          addq.w    #4,A7
000027E0  4E75      4280          rts
                    4281   ; }
                    4282   ; void AddressError() {
                    4283   _AddressError:
                    4284   ; PrintErrorMessageandAbort("ADDRESS Error!") ;
000027E2  4879 0000 4285          pea       @m68kde~1_134.L
000027E6  70D2      
000027E8  4EB8 2714 4286          jsr       _PrintErrorMessageandAbort
000027EC  584F      4287          addq.w    #4,A7
000027EE  4E75      4288          rts
                    4289   ; }
                    4290   ; void IllegalInstruction() {
                    4291   _IllegalInstruction:
                    4292   ; PrintErrorMessageandAbort("ILLEGAL INSTRUCTION") ;
000027F0  4879 0000 4293          pea       @m68kde~1_135.L
000027F4  70E2      
000027F6  4EB8 2714 4294          jsr       _PrintErrorMessageandAbort
000027FA  584F      4295          addq.w    #4,A7
000027FC  4E75      4296          rts
                    4297   ; }
                    4298   ; void Dividebyzero() {
                    4299   _Dividebyzero:
                    4300   ; PrintErrorMessageandAbort("DIVIDE BY ZERO") ;
000027FE  4879 0000 4301          pea       @m68kde~1_136.L
00002802  70F6      
00002804  4EB8 2714 4302          jsr       _PrintErrorMessageandAbort
00002808  584F      4303          addq.w    #4,A7
0000280A  4E75      4304          rts
                    4305   ; }
                    4306   ; void Check() {
                    4307   _Check:
                    4308   ; PrintErrorMessageandAbort("'CHK' INSTRUCTION") ;
0000280C  4879 0000 4309          pea       @m68kde~1_137.L
00002810  7106      
00002812  4EB8 2714 4310          jsr       _PrintErrorMessageandAbort
00002816  584F      4311          addq.w    #4,A7
00002818  4E75      4312          rts
                    4313   ; }
                    4314   ; void Trapv() {
                    4315   _Trapv:
                    4316   ; PrintErrorMessageandAbort("TRAPV INSTRUCTION") ;
0000281A  4879 0000 4317          pea       @m68kde~1_138.L
0000281E  7118      
00002820  4EB8 2714 4318          jsr       _PrintErrorMessageandAbort
00002824  584F      4319          addq.w    #4,A7
00002826  4E75      4320          rts
                    4321   ; }
                    4322   ; void PrivError() {
                    4323   _PrivError:
                    4324   ; PrintErrorMessageandAbort("PRIVILEGE VIOLATION") ;
00002828  4879 0000 4325          pea       @m68kde~1_139.L
0000282C  712A      
0000282E  4EB8 2714 4326          jsr       _PrintErrorMessageandAbort
00002832  584F      4327          addq.w    #4,A7
00002834  4E75      4328          rts
                    4329   ; }
                    4330   ; void UnitIRQ() {
                    4331   _UnitIRQ:
                    4332   ; PrintErrorMessageandAbort("UNINITIALISED IRQ") ;
00002836  4879 0000 4333          pea       @m68kde~1_140.L
0000283A  713E      
0000283C  4EB8 2714 4334          jsr       _PrintErrorMessageandAbort
00002840  584F      4335          addq.w    #4,A7
00002842  4E75      4336          rts
                    4337   ; }
                    4338   ; void Spurious() {
                    4339   _Spurious:
                    4340   ; PrintErrorMessageandAbort("SPURIOUS IRQ") ;
00002844  4879 0000 4341          pea       @m68kde~1_141.L
00002848  7150      
0000284A  4EB8 2714 4342          jsr       _PrintErrorMessageandAbort
0000284E  584F      4343          addq.w    #4,A7
00002850  4E75      4344          rts
                    4345   ; }
                    4346   ; void EnterString(void)
                    4347   ; {
                    4348   _EnterString:
00002852  4E56 FFFC 4349          link      A6,#-4
00002856  2F02      4350          move.l    D2,-(A7)
                    4351   ; unsigned char *Start;
                    4352   ; unsigned char c;
                    4353   ; printf("\r\nStart Address in Memory: ") ;
00002858  4879 0000 4354          pea       @m68kde~1_142.L
0000285C  715E      
0000285E  4EB9 0000 4355          jsr       _printf
00002862  5782      
00002864  584F      4356          addq.w    #4,A7
                    4357   ; Start = Get8HexDigits(0) ;
00002866  42A7      4358          clr.l     -(A7)
00002868  4EB8 0CA4 4359          jsr       _Get8HexDigits
0000286C  584F      4360          addq.w    #4,A7
0000286E  2400      4361          move.l    D0,D2
                    4362   ; printf("\r\nEnter String (ESC to end) :") ;
00002870  4879 0000 4363          pea       @m68kde~1_143.L
00002874  717A      
00002876  4EB9 0000 4364          jsr       _printf
0000287A  5782      
0000287C  584F      4365          addq.w    #4,A7
                    4366   ; while((c = getchar()) != 0x1b)
                    4367   EnterString_1:
0000287E  4EB9 0000 4368          jsr       _getch
00002882  56A4      
00002884  1D40 FFFF 4369          move.b    D0,-1(A6)
00002888  0C00 001B 4370          cmp.b     #27,D0
0000288C  670A      4371          beq.s     EnterString_3
                    4372   ; *Start++ = c ;
0000288E  2042      4373          move.l    D2,A0
00002890  5282      4374          addq.l    #1,D2
00002892  10AE FFFF 4375          move.b    -1(A6),(A0)
00002896  60E6      4376          bra       EnterString_1
                    4377   EnterString_3:
                    4378   ; *Start = 0x00;  // terminate with a null
00002898  2042      4379          move.l    D2,A0
0000289A  4210      4380          clr.b     (A0)
0000289C  241F      4381          move.l    (A7)+,D2
0000289E  4E5E      4382          unlk      A6
000028A0  4E75      4383          rts
                    4384   ; }
                    4385   ; void MemoryTest(void)
                    4386   ; {
                    4387   _MemoryTest:
000028A2  4E56 FFFC 4388          link      A6,#-4
000028A6  48E7 3F30 4389          movem.l   D2/D3/D4/D5/D6/D7/A2/A3,-(A7)
000028AA  45F9 0000 4390          lea       _printf.L,A2
000028AE  5782      
                    4391   ; unsigned int *RamPtr, counter1=1 ;
000028B0  367C 0001 4392          move.w    #1,A3
                    4393   ; register unsigned int i ;
                    4394   ; unsigned int Start, End ;
                    4395   ; char c ;
                    4396   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4397   ; unsigned long int pattern;
                    4398   ; unsigned long int data;
                    4399   ; // add your code to test memory here using 32 bit reads and writes of data between the start and end of memory
                    4400   ; // prompt user for data pattern
                    4401   ; while (1) {
                    4402   MemoryTest_1:
                    4403   ; printf("Enter one of the following characters to create a test data pattern to write [5, A, F, 0]: \n");
000028B4  4879 0000 4404          pea       @m68kde~1_144.L
000028B8  7198      
000028BA  4E92      4405          jsr       (A2)
000028BC  584F      4406          addq.w    #4,A7
                    4407   ; c = _getch();
000028BE  4EB8 0B68 4408          jsr       __getch
000028C2  1600      4409          move.b    D0,D3
                    4410   ; if (c == (char)('5')) {
000028C4  0C03 0035 4411          cmp.b     #53,D3
000028C8  6612      4412          bne.s     MemoryTest_4
                    4413   ; pattern = 0x55;
000028CA  7455      4414          moveq     #85,D2
                    4415   ; printf("\r\nPattern: 0x%x selected\n", pattern);
000028CC  2F02      4416          move.l    D2,-(A7)
000028CE  4879 0000 4417          pea       @m68kde~1_145.L
000028D2  71F6      
000028D4  4E92      4418          jsr       (A2)
000028D6  504F      4419          addq.w    #8,A7
                    4420   ; break;
000028D8  6000 005A 4421          bra       MemoryTest_3
                    4422   MemoryTest_4:
                    4423   ; }
                    4424   ; else if (c == (char)('A')) {
000028DC  0C03 0041 4425          cmp.b     #65,D3
000028E0  6616      4426          bne.s     MemoryTest_6
                    4427   ; pattern = 0xAA;
000028E2  243C 0000 4428          move.l    #170,D2
000028E6  00AA      
                    4429   ; printf("\r\nPattern: 0x%x selected\n", pattern);
000028E8  2F02      4430          move.l    D2,-(A7)
000028EA  4879 0000 4431          pea       @m68kde~1_145.L
000028EE  71F6      
000028F0  4E92      4432          jsr       (A2)
000028F2  504F      4433          addq.w    #8,A7
                    4434   ; break;
000028F4  6000 003E 4435          bra       MemoryTest_3
                    4436   MemoryTest_6:
                    4437   ; }
                    4438   ; else if (c == (char)('F')) {
000028F8  0C03 0046 4439          cmp.b     #70,D3
000028FC  6614      4440          bne.s     MemoryTest_8
                    4441   ; pattern = 0xFF;
000028FE  243C 0000 4442          move.l    #255,D2
00002902  00FF      
                    4443   ; printf("\r\nPattern: 0x%x selected\n", pattern);
00002904  2F02      4444          move.l    D2,-(A7)
00002906  4879 0000 4445          pea       @m68kde~1_145.L
0000290A  71F6      
0000290C  4E92      4446          jsr       (A2)
0000290E  504F      4447          addq.w    #8,A7
                    4448   ; break;
00002910  6022      4449          bra.s     MemoryTest_3
                    4450   MemoryTest_8:
                    4451   ; }
                    4452   ; else if (c == (char)('0')) {
00002912  0C03 0030 4453          cmp.b     #48,D3
00002916  6610      4454          bne.s     MemoryTest_10
                    4455   ; pattern = 0x00;
00002918  4282      4456          clr.l     D2
                    4457   ; printf("\r\nPattern: 0x%x selected\n", pattern);
0000291A  2F02      4458          move.l    D2,-(A7)
0000291C  4879 0000 4459          pea       @m68kde~1_145.L
00002920  71F6      
00002922  4E92      4460          jsr       (A2)
00002924  504F      4461          addq.w    #8,A7
                    4462   ; break;
00002926  600C      4463          bra.s     MemoryTest_3
                    4464   MemoryTest_10:
                    4465   ; }
                    4466   ; else {
                    4467   ; printf("\r\nPattern Invalid.\n");
00002928  4879 0000 4468          pea       @m68kde~1_146.L
0000292C  7210      
0000292E  4E92      4469          jsr       (A2)
00002930  584F      4470          addq.w    #4,A7
00002932  6080      4471          bra       MemoryTest_1
                    4472   MemoryTest_3:
                    4473   ; }
                    4474   ; }
                    4475   ; // prompt user for data size
                    4476   ; while (1) {
                    4477   MemoryTest_12:
                    4478   ; printf("Enter [1] for Bytes, [2] for Words, or [3] for Long Words\n");
00002934  4879 0000 4479          pea       @m68kde~1_147.L
00002938  7224      
0000293A  4E92      4480          jsr       (A2)
0000293C  584F      4481          addq.w    #4,A7
                    4482   ; c = _getch();
0000293E  4EB8 0B68 4483          jsr       __getch
00002942  1600      4484          move.b    D0,D3
                    4485   ; if (c == (char)('1')) {         // 1 byte (8 bits)
00002944  0C03 0031 4486          cmp.b     #49,D3
00002948  6612      4487          bne.s     MemoryTest_15
                    4488   ; data = pattern;
0000294A  2A02      4489          move.l    D2,D5
                    4490   ; printf("\r\nByte selected: 0x%x\n", data);
0000294C  2F05      4491          move.l    D5,-(A7)
0000294E  4879 0000 4492          pea       @m68kde~1_148.L
00002952  7260      
00002954  4E92      4493          jsr       (A2)
00002956  504F      4494          addq.w    #8,A7
                    4495   ; break;
00002958  6000 0062 4496          bra       MemoryTest_14
                    4497   MemoryTest_15:
                    4498   ; }
                    4499   ; else if (c == (char)('2')) {    // 2 bytes (16 bits)
0000295C  0C03 0032 4500          cmp.b     #50,D3
00002960  661A      4501          bne.s     MemoryTest_17
                    4502   ; data = pattern | pattern << 8;
00002962  2002      4503          move.l    D2,D0
00002964  2202      4504          move.l    D2,D1
00002966  E189      4505          lsl.l     #8,D1
00002968  8081      4506          or.l      D1,D0
0000296A  2A00      4507          move.l    D0,D5
                    4508   ; printf("\r\nWord selected: 0x%x\n", data);
0000296C  2F05      4509          move.l    D5,-(A7)
0000296E  4879 0000 4510          pea       @m68kde~1_149.L
00002972  7278      
00002974  4E92      4511          jsr       (A2)
00002976  504F      4512          addq.w    #8,A7
                    4513   ; break;
00002978  6000 0042 4514          bra       MemoryTest_14
                    4515   MemoryTest_17:
                    4516   ; }
                    4517   ; else if (c == (char)('3')) {    // 4 bytes (32 bites)
0000297C  0C03 0033 4518          cmp.b     #51,D3
00002980  6600 002C 4519          bne       MemoryTest_19
                    4520   ; data = pattern | pattern << 8 | pattern << 16 | pattern << 24;
00002984  2002      4521          move.l    D2,D0
00002986  2202      4522          move.l    D2,D1
00002988  E189      4523          lsl.l     #8,D1
0000298A  8081      4524          or.l      D1,D0
0000298C  2202      4525          move.l    D2,D1
0000298E  E189      4526          lsl.l     #8,D1
00002990  E189      4527          lsl.l     #8,D1
00002992  8081      4528          or.l      D1,D0
00002994  2202      4529          move.l    D2,D1
00002996  E189      4530          lsl.l     #8,D1
00002998  E189      4531          lsl.l     #8,D1
0000299A  E189      4532          lsl.l     #8,D1
0000299C  8081      4533          or.l      D1,D0
0000299E  2A00      4534          move.l    D0,D5
                    4535   ; printf("\r\nLong Word selected: 0x%x\n", data);
000029A0  2F05      4536          move.l    D5,-(A7)
000029A2  4879 0000 4537          pea       @m68kde~1_150.L
000029A6  7290      
000029A8  4E92      4538          jsr       (A2)
000029AA  504F      4539          addq.w    #8,A7
                    4540   ; break;
000029AC  600E      4541          bra.s     MemoryTest_14
                    4542   MemoryTest_19:
                    4543   ; }
                    4544   ; else {
                    4545   ; printf("\r\nInvalid data size.\n");
000029AE  4879 0000 4546          pea       @m68kde~1_151.L
000029B2  72AC      
000029B4  4E92      4547          jsr       (A2)
000029B6  584F      4548          addq.w    #4,A7
000029B8  6000 FF7A 4549          bra       MemoryTest_12
                    4550   MemoryTest_14:
                    4551   ; }
                    4552   ; }
                    4553   ; // prompt user for a start and end address for the test
                    4554   ; while (1) {
                    4555   MemoryTest_21:
                    4556   ; printf("Enter a 4 byte start address for the test (eg. 09000000).\n");
000029BC  4879 0000 4557          pea       @m68kde~1_152.L
000029C0  72C2      
000029C2  4E92      4558          jsr       (A2)
000029C4  584F      4559          addq.w    #4,A7
                    4560   ; printf("Note 1: Addresses should align to an even address.\n");
000029C6  4879 0000 4561          pea       @m68kde~1_153.L
000029CA  72FE      
000029CC  4E92      4562          jsr       (A2)
000029CE  584F      4563          addq.w    #4,A7
                    4564   ; printf("Note 2: Addresses should be in range 0x09000000 - 0x097FFFFF.\n");
000029D0  4879 0000 4565          pea       @m68kde~1_154.L
000029D4  7332      
000029D6  4E92      4566          jsr       (A2)
000029D8  584F      4567          addq.w    #4,A7
                    4568   ; Start = Get8HexDigits(0);
000029DA  42A7      4569          clr.l     -(A7)
000029DC  4EB8 0CA4 4570          jsr       _Get8HexDigits
000029E0  584F      4571          addq.w    #4,A7
000029E2  2E00      4572          move.l    D0,D7
                    4573   ; //start_addr = (int)strtol(hexstring, NULL, 0);
                    4574   ; //if (Start >= 0x08020000 && Start <= 0x08030000) {
                    4575   ; if (Start >= 0x09000000 && Start <= 0x097FFFFF) {
000029E4  0C87 0900 4576          cmp.l     #150994944,D7
000029E8  0000      
000029EA  652C      4577          blo.s     MemoryTest_24
000029EC  0C87 097F 4578          cmp.l     #159383551,D7
000029F0  FFFF      
000029F2  6224      4579          bhi.s     MemoryTest_24
                    4580   ; if (Start % 2 == 0) {
000029F4  2F07      4581          move.l    D7,-(A7)
000029F6  4878 0002 4582          pea       2
000029FA  4EB9 0000 4583          jsr       ULDIV
000029FE  5596      
00002A00  202F 0004 4584          move.l    4(A7),D0
00002A04  504F      4585          addq.w    #8,A7
00002A06  4A80      4586          tst.l     D0
00002A08  6602      4587          bne.s     MemoryTest_26
                    4588   ; break;
00002A0A  6018      4589          bra.s     MemoryTest_23
                    4590   MemoryTest_26:
                    4591   ; }
                    4592   ; else {
                    4593   ; printf("\r\nStart address not even.\n");
00002A0C  4879 0000 4594          pea       @m68kde~1_155.L
00002A10  7372      
00002A12  4E92      4595          jsr       (A2)
00002A14  584F      4596          addq.w    #4,A7
00002A16  600A      4597          bra.s     MemoryTest_25
                    4598   MemoryTest_24:
                    4599   ; }
                    4600   ; }
                    4601   ; else {
                    4602   ; printf("\r\nStart address not within range.\n");
00002A18  4879 0000 4603          pea       @m68kde~1_156.L
00002A1C  738E      
00002A1E  4E92      4604          jsr       (A2)
00002A20  584F      4605          addq.w    #4,A7
                    4606   MemoryTest_25:
00002A22  6098      4607          bra       MemoryTest_21
                    4608   MemoryTest_23:
                    4609   ; }
                    4610   ; }
                    4611   ; while (1) {
                    4612   MemoryTest_28:
                    4613   ; printf("\r\nEnter a 4 byte end address for the test (eg. 097FFFFF).\n");
00002A24  4879 0000 4614          pea       @m68kde~1_157.L
00002A28  73B2      
00002A2A  4E92      4615          jsr       (A2)
00002A2C  584F      4616          addq.w    #4,A7
                    4617   ; printf("Note 1: Addresses should align to an even address.\n");
00002A2E  4879 0000 4618          pea       @m68kde~1_153.L
00002A32  72FE      
00002A34  4E92      4619          jsr       (A2)
00002A36  584F      4620          addq.w    #4,A7
                    4621   ; printf("Note 2: Addresses should be in range 0x09000000 - 0x097FFFFF.\n");
00002A38  4879 0000 4622          pea       @m68kde~1_154.L
00002A3C  7332      
00002A3E  4E92      4623          jsr       (A2)
00002A40  584F      4624          addq.w    #4,A7
                    4625   ; End = Get8HexDigits(0);
00002A42  42A7      4626          clr.l     -(A7)
00002A44  4EB8 0CA4 4627          jsr       _Get8HexDigits
00002A48  584F      4628          addq.w    #4,A7
00002A4A  2C00      4629          move.l    D0,D6
                    4630   ; //start_addr = (int)strtol(hexstring, NULL, 0);
                    4631   ; //if (End >= 0x08020000 && End <= 0x08030000 && End >= Start) {
                    4632   ; if (End >= 0x09000000 && End <= 0x097FFFFF && End >= Start) {
00002A4C  0C86 0900 4633          cmp.l     #150994944,D6
00002A50  0000      
00002A52  6500 0032 4634          blo       MemoryTest_31
00002A56  0C86 097F 4635          cmp.l     #159383551,D6
00002A5A  FFFF      
00002A5C  6228      4636          bhi.s     MemoryTest_31
00002A5E  BC87      4637          cmp.l     D7,D6
00002A60  6524      4638          blo.s     MemoryTest_31
                    4639   ; if (End % 2 == 0) {
00002A62  2F06      4640          move.l    D6,-(A7)
00002A64  4878 0002 4641          pea       2
00002A68  4EB9 0000 4642          jsr       ULDIV
00002A6C  5596      
00002A6E  202F 0004 4643          move.l    4(A7),D0
00002A72  504F      4644          addq.w    #8,A7
00002A74  4A80      4645          tst.l     D0
00002A76  6602      4646          bne.s     MemoryTest_33
                    4647   ; break;
00002A78  6018      4648          bra.s     MemoryTest_30
                    4649   MemoryTest_33:
                    4650   ; }
                    4651   ; else {
                    4652   ; printf("\r\nEnd address not even.\n");
00002A7A  4879 0000 4653          pea       @m68kde~1_158.L
00002A7E  73EE      
00002A80  4E92      4654          jsr       (A2)
00002A82  584F      4655          addq.w    #4,A7
00002A84  600A      4656          bra.s     MemoryTest_32
                    4657   MemoryTest_31:
                    4658   ; }
                    4659   ; }
                    4660   ; else {
                    4661   ; printf("\r\nEnd address not within range or before Start address.\n");
00002A86  4879 0000 4662          pea       @m68kde~1_159.L
00002A8A  7408      
00002A8C  4E92      4663          jsr       (A2)
00002A8E  584F      4664          addq.w    #4,A7
                    4665   MemoryTest_32:
00002A90  6092      4666          bra       MemoryTest_28
                    4667   MemoryTest_30:
                    4668   ; }
                    4669   ; }
                    4670   ; // WRITING
                    4671   ; // pointer at start address
                    4672   ; RamPtr = Start;
00002A92  2807      4673          move.l    D7,D4
                    4674   ; while (RamPtr <= End) {
                    4675   MemoryTest_35:
00002A94  B886      4676          cmp.l     D6,D4
00002A96  6208      4677          bhi.s     MemoryTest_37
                    4678   ; *RamPtr = data;
00002A98  2044      4679          move.l    D4,A0
00002A9A  2085      4680          move.l    D5,(A0)
                    4681   ; RamPtr++;
00002A9C  5884      4682          addq.l    #4,D4
00002A9E  60F4      4683          bra       MemoryTest_35
                    4684   MemoryTest_37:
                    4685   ; }
                    4686   ; printf("\r\nWriting complete.\n");
00002AA0  4879 0000 4687          pea       @m68kde~1_160.L
00002AA4  7442      
00002AA6  4E92      4688          jsr       (A2)
00002AA8  584F      4689          addq.w    #4,A7
                    4690   ; // READING
                    4691   ; // pointer at start address
                    4692   ; RamPtr = Start;
00002AAA  2807      4693          move.l    D7,D4
                    4694   ; while (RamPtr <= End) {
                    4695   MemoryTest_38:
00002AAC  B886      4696          cmp.l     D6,D4
00002AAE  6210      4697          bhi.s     MemoryTest_40
                    4698   ; if (*RamPtr != data) {
00002AB0  2044      4699          move.l    D4,A0
00002AB2  BA90      4700          cmp.l     (A0),D5
00002AB4  6706      4701          beq.s     MemoryTest_41
                    4702   ; counter1 = 0;
00002AB6  367C 0000 4703          move.w    #0,A3
                    4704   ; break;
00002ABA  6004      4705          bra.s     MemoryTest_40
                    4706   MemoryTest_41:
                    4707   ; }
                    4708   ; RamPtr++;
00002ABC  5884      4709          addq.l    #4,D4
00002ABE  60EC      4710          bra       MemoryTest_38
                    4711   MemoryTest_40:
                    4712   ; }
                    4713   ; if (counter1) {
00002AC0  200B      4714          move.l    A3,D0
00002AC2  670C      4715          beq.s     MemoryTest_43
                    4716   ; printf("\r\nRead Data in Address Range Matches Written Data Pattern - Memory Test Successful!\n");
00002AC4  4879 0000 4717          pea       @m68kde~1_161.L
00002AC8  7458      
00002ACA  4E92      4718          jsr       (A2)
00002ACC  584F      4719          addq.w    #4,A7
00002ACE  600A      4720          bra.s     MemoryTest_44
                    4721   MemoryTest_43:
                    4722   ; }
                    4723   ; else {
                    4724   ; printf("\r\nMemory Test data mis-match, ending test.\n");
00002AD0  4879 0000 4725          pea       @m68kde~1_162.L
00002AD4  74AE      
00002AD6  4E92      4726          jsr       (A2)
00002AD8  584F      4727          addq.w    #4,A7
                    4728   MemoryTest_44:
00002ADA  4CDF 0CFC 4729          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3
00002ADE  4E5E      4730          unlk      A6
00002AE0  4E75      4731          rts
                    4732   ; }
                    4733   ; }
                    4734   ; void main(void)
                    4735   ; {
                    4736   _main:
00002AE2  4E56 FFF0 4737          link      A6,#-16
00002AE6  48E7 3030 4738          movem.l   D2/D3/A2/A3,-(A7)
00002AEA  45F8 0A30 4739          lea       _InstallExceptionHandler.L,A2
00002AEE  47F9 0000 4740          lea       _printf.L,A3
00002AF2  5782      
                    4741   ; char c ;
                    4742   ; int i, j ;
                    4743   ; char *BugMessage = "DE1-68k Bug V1.77";
00002AF4  41F9 0000 4744          lea       @m68kde~1_163.L,A0
00002AF8  74DA      
00002AFA  2608      4745          move.l    A0,D3
                    4746   ; char *CopyrightMessage = "Copyright (C) PJ Davies 2016";
00002AFC  41F9 0000 4747          lea       @m68kde~1_164.L,A0
00002B00  74EC      
00002B02  2D48 FFF8 4748          move.l    A0,-8(A6)
                    4749   ; char* LabMessage = "Name: Isabelle Andre - Stu#: 12521589";
00002B06  41F9 0000 4750          lea       @m68kde~1_165.L,A0
00002B0A  750A      
00002B0C  2D48 FFFC 4751          move.l    A0,-4(A6)
                    4752   ; KillAllBreakPoints() ;
00002B10  4EB8 1EEE 4753          jsr       _KillAllBreakPoints
                    4754   ; i = x = y = z = PortA_Count = 0;
00002B14  42B9 0B00 4755          clr.l     _PortA_Count.L
00002B18  00D4      
00002B1A  42B9 0B00 4756          clr.l     _z.L
00002B1E  00D0      
00002B20  42B9 0B00 4757          clr.l     _y.L
00002B24  00CC      
00002B26  42B9 0B00 4758          clr.l     _x.L
00002B2A  00C8      
00002B2C  4282      4759          clr.l     D2
                    4760   ; Trace = GoFlag = 0;                       // used in tracing/single stepping
00002B2E  42B9 0B00 4761          clr.l     _GoFlag.L
00002B32  00DC      
00002B34  42B9 0B00 4762          clr.l     _Trace.L
00002B38  00D8      
                    4763   ; Echo = 1 ;
00002B3A  23FC 0000 4764          move.l    #1,_Echo.L
00002B3E  0001 0B00 
00002B42  00E0      
                    4765   ; d0=d1=d2=d3=d4=d5=d6=d7=0 ;
00002B44  42B9 0B00 4766          clr.l     _d7.L
00002B48  0100      
00002B4A  42B9 0B00 4767          clr.l     _d6.L
00002B4E  00FC      
00002B50  42B9 0B00 4768          clr.l     _d5.L
00002B54  00F8      
00002B56  42B9 0B00 4769          clr.l     _d4.L
00002B5A  00F4      
00002B5C  42B9 0B00 4770          clr.l     _d3.L
00002B60  00F0      
00002B62  42B9 0B00 4771          clr.l     _d2.L
00002B66  00EC      
00002B68  42B9 0B00 4772          clr.l     _d1.L
00002B6C  00E8      
00002B6E  42B9 0B00 4773          clr.l     _d0.L
00002B72  00E4      
                    4774   ; a0=a1=a2=a3=a4=a5=a6=0 ;
00002B74  42B9 0B00 4775          clr.l     _a6.L
00002B78  011C      
00002B7A  42B9 0B00 4776          clr.l     _a5.L
00002B7E  0118      
00002B80  42B9 0B00 4777          clr.l     _a4.L
00002B84  0114      
00002B86  42B9 0B00 4778          clr.l     _a3.L
00002B8A  0110      
00002B8C  42B9 0B00 4779          clr.l     _a2.L
00002B90  010C      
00002B92  42B9 0B00 4780          clr.l     _a1.L
00002B96  0108      
00002B98  42B9 0B00 4781          clr.l     _a0.L
00002B9C  0104      
                    4782   ; PC = ProgramStart, SSP=TopOfStack, USP = TopOfStack;
00002B9E  23FC 0800 4783          move.l    #134217728,_PC.L
00002BA2  0000 0B00 
00002BA6  0120      
00002BA8  23FC 0C00 4784          move.l    #201326592,_SSP.L
00002BAC  0000 0B00 
00002BB0  0124      
00002BB2  23FC 0C00 4785          move.l    #201326592,_USP.L
00002BB6  0000 0B00 
00002BBA  0128      
                    4786   ; SR = 0x2000;                            // clear interrupts enable tracing  uses IRQ6
00002BBC  33FC 2000 4787          move.w    #8192,_SR.L
00002BC0  0B00 012C 
                    4788   ; // Initialise Breakpoint variables
                    4789   ; for(i = 0; i < 8; i++)  {
00002BC4  4282      4790          clr.l     D2
                    4791   main_1:
00002BC6  0C82 0000 4792          cmp.l     #8,D2
00002BCA  0008      
00002BCC  6C00 004C 4793          bge       main_3
                    4794   ; BreakPointAddress[i] = 0;               //array of 8 breakpoint addresses
00002BD0  2002      4795          move.l    D2,D0
00002BD2  E588      4796          lsl.l     #2,D0
00002BD4  41F9 0B00 4797          lea       _BreakPointAddress.L,A0
00002BD8  012E      
00002BDA  42B0 0800 4798          clr.l     0(A0,D0.L)
                    4799   ; WatchPointAddress[i] = 0 ;
00002BDE  2002      4800          move.l    D2,D0
00002BE0  E588      4801          lsl.l     #2,D0
00002BE2  41F9 0B00 4802          lea       _WatchPointAddress.L,A0
00002BE6  0182      
00002BE8  42B0 0800 4803          clr.l     0(A0,D0.L)
                    4804   ; BreakPointInstruction[i] = 0;           // to hold the instruction at the break point
00002BEC  2002      4805          move.l    D2,D0
00002BEE  E388      4806          lsl.l     #1,D0
00002BF0  41F9 0B00 4807          lea       _BreakPointInstruction.L,A0
00002BF4  014E      
00002BF6  4270 0800 4808          clr.w     0(A0,D0.L)
                    4809   ; BreakPointSetOrCleared[i] = 0;          // indicates if break point set
00002BFA  2002      4810          move.l    D2,D0
00002BFC  E588      4811          lsl.l     #2,D0
00002BFE  41F9 0B00 4812          lea       _BreakPointSetOrCleared.L,A0
00002C02  015E      
00002C04  42B0 0800 4813          clr.l     0(A0,D0.L)
                    4814   ; WatchPointSetOrCleared[i] = 0;
00002C08  2002      4815          move.l    D2,D0
00002C0A  E588      4816          lsl.l     #2,D0
00002C0C  41F9 0B00 4817          lea       _WatchPointSetOrCleared.L,A0
00002C10  01A2      
00002C12  42B0 0800 4818          clr.l     0(A0,D0.L)
00002C16  5282      4819          addq.l    #1,D2
00002C18  60AC      4820          bra       main_1
                    4821   main_3:
                    4822   ; }
                    4823   ; Init_RS232() ;     // initialise the RS232 port
00002C1A  4EB8 0B12 4824          jsr       _Init_RS232
                    4825   ; Init_LCD() ;
00002C1E  4EB8 095E 4826          jsr       _Init_LCD
                    4827   ; for( i = 32; i < 48; i++)
00002C22  7420      4828          moveq     #32,D2
                    4829   main_4:
00002C24  0C82 0000 4830          cmp.l     #48,D2
00002C28  0030      
00002C2A  6C0E      4831          bge.s     main_6
                    4832   ; InstallExceptionHandler(UnhandledTrap, i) ;		        // install Trap exception handler on vector 32-47
00002C2C  2F02      4833          move.l    D2,-(A7)
00002C2E  4878 27C6 4834          pea       _UnhandledTrap.L
00002C32  4E92      4835          jsr       (A2)
00002C34  504F      4836          addq.w    #8,A7
00002C36  5282      4837          addq.l    #1,D2
00002C38  60EA      4838          bra       main_4
                    4839   main_6:
                    4840   ; InstallExceptionHandler(menu, 47) ;		                   // TRAP #15 call debug and end program
00002C3A  4878 002F 4841          pea       47
00002C3E  4878 24A0 4842          pea       _menu.L
00002C42  4E92      4843          jsr       (A2)
00002C44  504F      4844          addq.w    #8,A7
                    4845   ; InstallExceptionHandler(UnhandledIRQ1, 25) ;		      // install handler for interrupts
00002C46  4878 0019 4846          pea       25
00002C4A  4878 276C 4847          pea       _UnhandledIRQ1.L
00002C4E  4E92      4848          jsr       (A2)
00002C50  504F      4849          addq.w    #8,A7
                    4850   ; InstallExceptionHandler(UnhandledIRQ2, 26) ;		      // install handler for interrupts
00002C52  4878 001A 4851          pea       26
00002C56  4878 2778 4852          pea       _UnhandledIRQ2.L
00002C5A  4E92      4853          jsr       (A2)
00002C5C  504F      4854          addq.w    #8,A7
                    4855   ; InstallExceptionHandler(UnhandledIRQ3, 27) ;		      // install handler for interrupts
00002C5E  4878 001B 4856          pea       27
00002C62  4878 2784 4857          pea       _UnhandledIRQ3.L
00002C66  4E92      4858          jsr       (A2)
00002C68  504F      4859          addq.w    #8,A7
                    4860   ; InstallExceptionHandler(UnhandledIRQ4, 28) ;		      // install handler for interrupts
00002C6A  4878 001C 4861          pea       28
00002C6E  4878 2790 4862          pea       _UnhandledIRQ4.L
00002C72  4E92      4863          jsr       (A2)
00002C74  504F      4864          addq.w    #8,A7
                    4865   ; InstallExceptionHandler(UnhandledIRQ5, 29) ;		      // install handler for interrupts
00002C76  4878 001D 4866          pea       29
00002C7A  4878 279C 4867          pea       _UnhandledIRQ5.L
00002C7E  4E92      4868          jsr       (A2)
00002C80  504F      4869          addq.w    #8,A7
                    4870   ; InstallExceptionHandler(UnhandledIRQ6, 30) ;		      // install handler for interrupts
00002C82  4878 001E 4871          pea       30
00002C86  4878 27A8 4872          pea       _UnhandledIRQ6.L
00002C8A  4E92      4873          jsr       (A2)
00002C8C  504F      4874          addq.w    #8,A7
                    4875   ; InstallExceptionHandler(UnhandledIRQ7, 31) ;		      // install handler for interrupts
00002C8E  4878 001F 4876          pea       31
00002C92  4878 27BA 4877          pea       _UnhandledIRQ7.L
00002C96  4E92      4878          jsr       (A2)
00002C98  504F      4879          addq.w    #8,A7
                    4880   ; InstallExceptionHandler(HandleBreakPoint, 46) ;		           // install Trap 14 Break Point exception handler on vector 46
00002C9A  4878 002E 4881          pea       46
00002C9E  4878 2192 4882          pea       _HandleBreakPoint.L
00002CA2  4E92      4883          jsr       (A2)
00002CA4  504F      4884          addq.w    #8,A7
                    4885   ; InstallExceptionHandler(DumpRegistersandPause, 29) ;		   // install TRACE handler for IRQ5 on vector 29
00002CA6  4878 001D 4886          pea       29
00002CAA  4878 1836 4887          pea       _DumpRegistersandPause.L
00002CAE  4E92      4888          jsr       (A2)
00002CB0  504F      4889          addq.w    #8,A7
                    4890   ; InstallExceptionHandler(BusError,2) ;                          // install Bus error handler
00002CB2  4878 0002 4891          pea       2
00002CB6  4878 27D4 4892          pea       _BusError.L
00002CBA  4E92      4893          jsr       (A2)
00002CBC  504F      4894          addq.w    #8,A7
                    4895   ; InstallExceptionHandler(AddressError,3) ;                      // install address error handler (doesn't work on soft core 68k implementation)
00002CBE  4878 0003 4896          pea       3
00002CC2  4878 27E2 4897          pea       _AddressError.L
00002CC6  4E92      4898          jsr       (A2)
00002CC8  504F      4899          addq.w    #8,A7
                    4900   ; InstallExceptionHandler(IllegalInstruction,4) ;                // install illegal instruction exception handler
00002CCA  4878 0004 4901          pea       4
00002CCE  4878 27F0 4902          pea       _IllegalInstruction.L
00002CD2  4E92      4903          jsr       (A2)
00002CD4  504F      4904          addq.w    #8,A7
                    4905   ; InstallExceptionHandler(Dividebyzero,5) ;                      // install /0 exception handler
00002CD6  4878 0005 4906          pea       5
00002CDA  4878 27FE 4907          pea       _Dividebyzero.L
00002CDE  4E92      4908          jsr       (A2)
00002CE0  504F      4909          addq.w    #8,A7
                    4910   ; InstallExceptionHandler(Check,6) ;                             // install check instruction exception handler
00002CE2  4878 0006 4911          pea       6
00002CE6  4878 280C 4912          pea       _Check.L
00002CEA  4E92      4913          jsr       (A2)
00002CEC  504F      4914          addq.w    #8,A7
                    4915   ; InstallExceptionHandler(Trapv,7) ;                             // install trapv instruction exception handler
00002CEE  4878 0007 4916          pea       7
00002CF2  4878 281A 4917          pea       _Trapv.L
00002CF6  4E92      4918          jsr       (A2)
00002CF8  504F      4919          addq.w    #8,A7
                    4920   ; InstallExceptionHandler(PrivError,8) ;                         // install Priv Violation exception handler
00002CFA  4878 0008 4921          pea       8
00002CFE  4878 2828 4922          pea       _PrivError.L
00002D02  4E92      4923          jsr       (A2)
00002D04  504F      4924          addq.w    #8,A7
                    4925   ; InstallExceptionHandler(UnitIRQ,15) ;                          // install uninitialised IRQ exception handler
00002D06  4878 000F 4926          pea       15
00002D0A  4878 2836 4927          pea       _UnitIRQ.L
00002D0E  4E92      4928          jsr       (A2)
00002D10  504F      4929          addq.w    #8,A7
                    4930   ; InstallExceptionHandler(Check,24) ;                            // install spurious IRQ exception handler
00002D12  4878 0018 4931          pea       24
00002D16  4878 280C 4932          pea       _Check.L
00002D1A  4E92      4933          jsr       (A2)
00002D1C  504F      4934          addq.w    #8,A7
                    4935   ; FlushKeyboard() ;                        // dump unread characters from keyboard
00002D1E  4EB8 0BA6 4936          jsr       _FlushKeyboard
                    4937   ; TraceException = 0 ;                     // clear trace exception port to remove any software generated single step/trace
00002D22  4239 0040 4938          clr.b     4194314
00002D26  000A      
                    4939   ; // test for auto flash boot and run from Flash by reading switch 9 on DE1-soc board. If set, copy program from flash into Dram and run
                    4940   ; while(((char)(PortB & 0x02)) == (char)(0x02))    {
                    4941   main_7:
00002D28  1039 0040 4942          move.b    4194306,D0
00002D2C  0002      
00002D2E  C03C 0002 4943          and.b     #2,D0
00002D32  0C00 0002 4944          cmp.b     #2,D0
00002D36  662A      4945          bne.s     main_9
                    4946   ; LoadFromFlashChip();
00002D38  4EB8 12DA 4947          jsr       _LoadFromFlashChip
                    4948   ; printf("\r\nRunning.....") ;
00002D3C  4879 0000 4949          pea       @m68kde~1_166.L
00002D40  7530      
00002D42  4E93      4950          jsr       (A3)
00002D44  584F      4951          addq.w    #4,A7
                    4952   ; Oline1("Running.....") ;
00002D46  4879 0000 4953          pea       @m68kde~1_167.L
00002D4A  7540      
00002D4C  4EB8 0A02 4954          jsr       _Oline1
00002D50  584F      4955          addq.w    #4,A7
                    4956   ; GoFlag = 1;
00002D52  23FC 0000 4957          move.l    #1,_GoFlag.L
00002D56  0001 0B00 
00002D5A  00DC      
                    4958   ; go() ;
00002D5C  4EB8 08B8 4959          jsr       _go
00002D60  60C6      4960          bra       main_7
                    4961   main_9:
                    4962   ; }
                    4963   ; // otherwise start the debug monitor
                    4964   ; Oline0(BugMessage) ;
00002D62  2F03      4965          move.l    D3,-(A7)
00002D64  4EB8 09D4 4966          jsr       _Oline0
00002D68  584F      4967          addq.w    #4,A7
                    4968   ; Oline1("By: PJ Davies") ;
00002D6A  4879 0000 4969          pea       @m68kde~1_168.L
00002D6E  754E      
00002D70  4EB8 0A02 4970          jsr       _Oline1
00002D74  584F      4971          addq.w    #4,A7
                    4972   ; printf("\r\n%s", BugMessage) ;
00002D76  2F03      4973          move.l    D3,-(A7)
00002D78  4879 0000 4974          pea       @m68kde~1_169.L
00002D7C  755C      
00002D7E  4E93      4975          jsr       (A3)
00002D80  504F      4976          addq.w    #8,A7
                    4977   ; printf("\r\n%s", CopyrightMessage) ;
00002D82  2F2E FFF8 4978          move.l    -8(A6),-(A7)
00002D86  4879 0000 4979          pea       @m68kde~1_169.L
00002D8A  755C      
00002D8C  4E93      4980          jsr       (A3)
00002D8E  504F      4981          addq.w    #8,A7
                    4982   ; printf("\r\n%s", LabMessage);
00002D90  2F2E FFFC 4983          move.l    -4(A6),-(A7)
00002D94  4879 0000 4984          pea       @m68kde~1_169.L
00002D98  755C      
00002D9A  4E93      4985          jsr       (A3)
00002D9C  504F      4986          addq.w    #8,A7
                    4987   ; menu();
00002D9E  4EB8 24A0 4988          jsr       _menu
00002DA2  4CDF 0C0C 4989          movem.l   (A7)+,D2/D3/A2/A3
00002DA6  4E5E      4990          unlk      A6
00002DA8  4E75      4991          rts
                    4992   ; }
                    4993   ; void FormatInstruction(void)    // for disassembly
                    4994   ; {
                    4995   _FormatInstruction:
00002DAA  4E56 FEC0 4996          link      A6,#-320
00002DAE  48E7 3C20 4997          movem.l   D2/D3/D4/D5/A2,-(A7)
00002DB2  45EE FEC0 4998          lea       -320(A6),A2
                    4999   ; short i, ilen = 0 ;
00002DB6  4245      5000          clr.w     D5
                    5001   ; char *iptr = Instruction ;
00002DB8  41F9 0B00 5002          lea       _Instruction.L,A0
00002DBC  04E2      
00002DBE  2608      5003          move.l    A0,D3
                    5004   ; char *Formatted[80], *fptr ;
                    5005   ; fptr = Formatted ;
00002DC0  280A      5006          move.l    A2,D4
                    5007   ; for(i = 0; i < (short)(80); i ++)
00002DC2  4242      5008          clr.w     D2
                    5009   FormatInstruction_1:
00002DC4  0C42 0050 5010          cmp.w     #80,D2
00002DC8  6C0E      5011          bge.s     FormatInstruction_3
                    5012   ; Formatted[i] = (char)(0);          // set formatted string to null
00002DCA  48C2      5013          ext.l     D2
00002DCC  2002      5014          move.l    D2,D0
00002DCE  E588      5015          lsl.l     #2,D0
00002DD0  42B2 0800 5016          clr.l     0(A2,D0.L)
00002DD4  5242      5017          addq.w    #1,D2
00002DD6  60EC      5018          bra       FormatInstruction_1
                    5019   FormatInstruction_3:
                    5020   ; while((*iptr != ' '))   {   // while ot a space char
                    5021   FormatInstruction_4:
00002DD8  2043      5022          move.l    D3,A0
00002DDA  1010      5023          move.b    (A0),D0
00002DDC  0C00 0020 5024          cmp.b     #32,D0
00002DE0  6718      5025          beq.s     FormatInstruction_6
                    5026   ; *fptr++ = *iptr++ ;     // copy string until space or end encountered
00002DE2  2043      5027          move.l    D3,A0
00002DE4  5283      5028          addq.l    #1,D3
00002DE6  2244      5029          move.l    D4,A1
00002DE8  5284      5030          addq.l    #1,D4
00002DEA  1290      5031          move.b    (A0),(A1)
                    5032   ; ilen ++ ;               // count length of string as we go
00002DEC  5245      5033          addq.w    #1,D5
                    5034   ; if(*iptr == 0)          // if we got the end and copied the NUL then return
00002DEE  2043      5035          move.l    D3,A0
00002DF0  1010      5036          move.b    (A0),D0
00002DF2  6604      5037          bne.s     FormatInstruction_7
                    5038   ; return ;
00002DF4  6000 003E 5039          bra       FormatInstruction_9
                    5040   FormatInstruction_7:
00002DF8  60DE      5041          bra       FormatInstruction_4
                    5042   FormatInstruction_6:
                    5043   ; }
                    5044   ; // must still be more text to process otherwise we would have returned above if got to the end
                    5045   ; for(i = 0; i < ((short)(8) - ilen); i++)
00002DFA  4242      5046          clr.w     D2
                    5047   FormatInstruction_10:
00002DFC  7008      5048          moveq     #8,D0
00002DFE  4880      5049          ext.w     D0
00002E00  9045      5050          sub.w     D5,D0
00002E02  B440      5051          cmp.w     D0,D2
00002E04  6C0C      5052          bge.s     FormatInstruction_12
                    5053   ; *fptr++ = ' ' ;        // make sure first operand appears in field 8 of formatted string
00002E06  2044      5054          move.l    D4,A0
00002E08  5284      5055          addq.l    #1,D4
00002E0A  10BC 0020 5056          move.b    #32,(A0)
00002E0E  5242      5057          addq.w    #1,D2
00002E10  60EA      5058          bra       FormatInstruction_10
                    5059   FormatInstruction_12:
                    5060   ; // now skip over any spaces in original unformatted string before copying the rest
                    5061   ; while((*iptr == ' '))
                    5062   FormatInstruction_13:
00002E12  2043      5063          move.l    D3,A0
00002E14  1010      5064          move.b    (A0),D0
00002E16  0C00 0020 5065          cmp.b     #32,D0
00002E1A  6604      5066          bne.s     FormatInstruction_15
                    5067   ; iptr++ ;
00002E1C  5283      5068          addq.l    #1,D3
00002E1E  60F2      5069          bra       FormatInstruction_13
                    5070   FormatInstruction_15:
                    5071   ; strcat(fptr,iptr) ;
00002E20  2F03      5072          move.l    D3,-(A7)
00002E22  2F04      5073          move.l    D4,-(A7)
00002E24  4EB9 0000 5074          jsr       _strcat
00002E28  5740      
00002E2A  504F      5075          addq.w    #8,A7
                    5076   ; strcpyInstruction(Formatted) ;
00002E2C  2F0A      5077          move.l    A2,-(A7)
00002E2E  4EB8 0CE6 5078          jsr       _strcpyInstruction
00002E32  584F      5079          addq.w    #4,A7
                    5080   FormatInstruction_9:
00002E34  4CDF 043C 5081          movem.l   (A7)+,D2/D3/D4/D5/A2
00002E38  4E5E      5082          unlk      A6
00002E3A  4E75      5083          rts
                    5084   ; }
                    5085   ; unsigned short int Decode2BitOperandSize(unsigned short int OpCode)
                    5086   ; {
                    5087   _Decode2BitOperandSize:
00002E3C  4E56 0000 5088          link      A6,#0
00002E40  48E7 3020 5089          movem.l   D2/D3/A2,-(A7)
00002E44  362E 000A 5090          move.w    10(A6),D3
00002E48  C6BC 0000 5091          and.l     #65535,D3
00002E4C  FFFF      
00002E4E  45F8 0CCC 5092          lea       _strcatInstruction.L,A2
                    5093   ; unsigned short int DataSize ;       // used to determine the size of data following say an immediate instruction such as addi etc
                    5094   ; OpCode = (OpCode & (unsigned short int)(0x00C0)) >> 6 ;             // get bits 7 and 6 into positions 1,0
00002E52  3003      5095          move.w    D3,D0
00002E54  C07C 00C0 5096          and.w     #192,D0
00002E58  EC48      5097          lsr.w     #6,D0
00002E5A  3600      5098          move.w    D0,D3
                    5099   ; if(OpCode == (unsigned short int)(0))   {
00002E5C  4A43      5100          tst.w     D3
00002E5E  660E      5101          bne.s     Decode2BitOperandSize_1
                    5102   ; strcatInstruction(".B ") ;
00002E60  4879 0000 5103          pea       @m68kde~1_170.L
00002E64  7562      
00002E66  4E92      5104          jsr       (A2)
00002E68  584F      5105          addq.w    #4,A7
                    5106   ; DataSize = 1 ;
00002E6A  7401      5107          moveq     #1,D2
00002E6C  6020      5108          bra.s     Decode2BitOperandSize_4
                    5109   Decode2BitOperandSize_1:
                    5110   ; }
                    5111   ; else if(OpCode == (unsigned short int)(1)) {
00002E6E  0C43 0001 5112          cmp.w     #1,D3
00002E72  660E      5113          bne.s     Decode2BitOperandSize_3
                    5114   ; strcatInstruction(".W ") ;
00002E74  4879 0000 5115          pea       @m68kde~1_171.L
00002E78  7566      
00002E7A  4E92      5116          jsr       (A2)
00002E7C  584F      5117          addq.w    #4,A7
                    5118   ; DataSize = 1 ;
00002E7E  7401      5119          moveq     #1,D2
00002E80  600C      5120          bra.s     Decode2BitOperandSize_4
                    5121   Decode2BitOperandSize_3:
                    5122   ; }
                    5123   ; else {
                    5124   ; strcatInstruction(".L ") ;
00002E82  4879 0000 5125          pea       @m68kde~1_172.L
00002E86  756A      
00002E88  4E92      5126          jsr       (A2)
00002E8A  584F      5127          addq.w    #4,A7
                    5128   ; DataSize = 2 ;
00002E8C  7402      5129          moveq     #2,D2
                    5130   Decode2BitOperandSize_4:
                    5131   ; }
                    5132   ; return DataSize;
00002E8E  3002      5133          move.w    D2,D0
00002E90  4CDF 040C 5134          movem.l   (A7)+,D2/D3/A2
00002E94  4E5E      5135          unlk      A6
00002E96  4E75      5136          rts
                    5137   ; }
                    5138   ; void Decode3BitDataRegister(unsigned short int OpCode)                // Data Register in Bits 11, 10 and 9
                    5139   ; {
                    5140   _Decode3BitDataRegister:
00002E98  4E56 FFFC 5141          link      A6,#-4
00002E9C  2F0A      5142          move.l    A2,-(A7)
00002E9E  45EE FFFC 5143          lea       -4(A6),A2
                    5144   ; unsigned char RegNumber[3] ;
                    5145   ; RegNumber[0] = 'D' ;
00002EA2  14BC 0044 5146          move.b    #68,(A2)
                    5147   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)((OpCode & 0x0E00) >> 9) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002EA6  7030      5148          moveq     #48,D0
00002EA8  322E 000A 5149          move.w    10(A6),D1
00002EAC  C27C 0E00 5150          and.w     #3584,D1
00002EB0  E049      5151          lsr.w     #8,D1
00002EB2  E249      5152          lsr.w     #1,D1
00002EB4  D001      5153          add.b     D1,D0
00002EB6  1540 0001 5154          move.b    D0,1(A2)
                    5155   ; RegNumber[2] = 0 ;
00002EBA  422A 0002 5156          clr.b     2(A2)
                    5157   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002EBE  2F0A      5158          move.l    A2,-(A7)
00002EC0  4EB8 0CCC 5159          jsr       _strcatInstruction
00002EC4  584F      5160          addq.w    #4,A7
00002EC6  245F      5161          move.l    (A7)+,A2
00002EC8  4E5E      5162          unlk      A6
00002ECA  4E75      5163          rts
                    5164   ; }
                    5165   ; void Decode3BitAddressRegister(unsigned short int Reg)                // Address Register in Bits 2,1,0
                    5166   ; {
                    5167   _Decode3BitAddressRegister:
00002ECC  4E56 FFFC 5168          link      A6,#-4
00002ED0  2F0A      5169          move.l    A2,-(A7)
00002ED2  45EE FFFC 5170          lea       -4(A6),A2
                    5171   ; unsigned char RegNumber[3];
                    5172   ; RegNumber[0] = 'A' ;
00002ED6  14BC 0041 5173          move.b    #65,(A2)
                    5174   ; RegNumber[1] = (unsigned char)(0x30) + (unsigned char)(Reg) ;   // get data register number in bits 2,1,0 and convert to ASCII equiv
00002EDA  7030      5175          moveq     #48,D0
00002EDC  322E 000A 5176          move.w    10(A6),D1
00002EE0  D001      5177          add.b     D1,D0
00002EE2  1540 0001 5178          move.b    D0,1(A2)
                    5179   ; RegNumber[2] = 0 ;
00002EE6  422A 0002 5180          clr.b     2(A2)
                    5181   ; strcatInstruction(RegNumber) ;        // write register number to the disassembled instruction
00002EEA  2F0A      5182          move.l    A2,-(A7)
00002EEC  4EB8 0CCC 5183          jsr       _strcatInstruction
00002EF0  584F      5184          addq.w    #4,A7
00002EF2  245F      5185          move.l    (A7)+,A2
00002EF4  4E5E      5186          unlk      A6
00002EF6  4E75      5187          rts
                    5188   ; }
                    5189   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5190   ; // Special function is used to print 8,16, 32 bit operands after move #
                    5191   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5192   ; void DecodeBWLDataAfterOpCodeForMove(unsigned short int *OpCode )
                    5193   ; {
                    5194   _DecodeBWLDataAfterOpCodeForMove:
00002EF8  4E56 0000 5195          link      A6,#0
00002EFC  48E7 3030 5196          movem.l   D2/D3/A2/A3,-(A7)
00002F00  242E 0008 5197          move.l    8(A6),D2
00002F04  45F9 0B00 5198          lea       _TempString.L,A2
00002F08  0546      
00002F0A  47F9 0000 5199          lea       _sprintf.L,A3
00002F0E  570C      
                    5200   ; unsigned char OperandSize ;
                    5201   ; OperandSize = (*OpCode >> 12) & (unsigned short int)(0x0003) ;               // get bits 13,12 into 1,0 as these define size of #operand
00002F10  2042      5202          move.l    D2,A0
00002F12  3010      5203          move.w    (A0),D0
00002F14  E048      5204          lsr.w     #8,D0
00002F16  E848      5205          lsr.w     #4,D0
00002F18  C07C 0003 5206          and.w     #3,D0
00002F1C  1600      5207          move.b    D0,D3
                    5208   ; InstructionSize += 1;
00002F1E  52B9 0B00 5209          addq.l    #1,_InstructionSize.L
00002F22  017E      
                    5210   ; if(OperandSize == (char)(1))                // #byte value
00002F24  0C03 0001 5211          cmp.b     #1,D3
00002F28  6620      5212          bne.s     DecodeBWLDataAfterOpCodeForMove_1
                    5213   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F2A  2042      5214          move.l    D2,A0
00002F2C  3228 0002 5215          move.w    2(A0),D1
00002F30  C2BC 0000 5216          and.l     #65535,D1
00002F34  FFFF      
00002F36  2F01      5217          move.l    D1,-(A7)
00002F38  4879 0000 5218          pea       @m68kde~1_173.L
00002F3C  756E      
00002F3E  2F0A      5219          move.l    A2,-(A7)
00002F40  4E93      5220          jsr       (A3)
00002F42  DEFC 000C 5221          add.w     #12,A7
00002F46  6000 0068 5222          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5223   DecodeBWLDataAfterOpCodeForMove_1:
                    5224   ; else if(OperandSize == (char)(3))          // #word value
00002F4A  0C03 0003 5225          cmp.b     #3,D3
00002F4E  6620      5226          bne.s     DecodeBWLDataAfterOpCodeForMove_3
                    5227   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002F50  2042      5228          move.l    D2,A0
00002F52  3228 0002 5229          move.w    2(A0),D1
00002F56  C2BC 0000 5230          and.l     #65535,D1
00002F5A  FFFF      
00002F5C  2F01      5231          move.l    D1,-(A7)
00002F5E  4879 0000 5232          pea       @m68kde~1_173.L
00002F62  756E      
00002F64  2F0A      5233          move.l    A2,-(A7)
00002F66  4E93      5234          jsr       (A3)
00002F68  DEFC 000C 5235          add.w     #12,A7
00002F6C  6000 0042 5236          bra       DecodeBWLDataAfterOpCodeForMove_5
                    5237   DecodeBWLDataAfterOpCodeForMove_3:
                    5238   ; else if(OperandSize == (char)(2)) {                                       // long value
00002F70  0C03 0002 5239          cmp.b     #2,D3
00002F74  6600 003A 5240          bne       DecodeBWLDataAfterOpCodeForMove_5
                    5241   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2])); // create 3
00002F78  2042      5242          move.l    D2,A0
00002F7A  3228 0002 5243          move.w    2(A0),D1
00002F7E  C2BC 0000 5244          and.l     #65535,D1
00002F82  FFFF      
00002F84  E189      5245          lsl.l     #8,D1
00002F86  E189      5246          lsl.l     #8,D1
00002F88  2042      5247          move.l    D2,A0
00002F8A  2F00      5248          move.l    D0,-(A7)
00002F8C  3028 0004 5249          move.w    4(A0),D0
00002F90  C0BC 0000 5250          and.l     #65535,D0
00002F94  FFFF      
00002F96  8280      5251          or.l      D0,D1
00002F98  201F      5252          move.l    (A7)+,D0
00002F9A  2F01      5253          move.l    D1,-(A7)
00002F9C  4879 0000 5254          pea       @m68kde~1_173.L
00002FA0  756E      
00002FA2  2F0A      5255          move.l    A2,-(A7)
00002FA4  4E93      5256          jsr       (A3)
00002FA6  DEFC 000C 5257          add.w     #12,A7
                    5258   ; InstructionSize += 1;
00002FAA  52B9 0B00 5259          addq.l    #1,_InstructionSize.L
00002FAE  017E      
                    5260   DecodeBWLDataAfterOpCodeForMove_5:
                    5261   ; }
                    5262   ; strcatInstruction(TempString) ;
00002FB0  2F0A      5263          move.l    A2,-(A7)
00002FB2  4EB8 0CCC 5264          jsr       _strcatInstruction
00002FB6  584F      5265          addq.w    #4,A7
00002FB8  4CDF 0C0C 5266          movem.l   (A7)+,D2/D3/A2/A3
00002FBC  4E5E      5267          unlk      A6
00002FBE  4E75      5268          rts
                    5269   ; }
                    5270   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5271   ; // This function is used to print 8,16, 32 bit operands after the opcode, this is in instruction like ADD # where immediate addressing is used as source
                    5272   ; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5273   ; void DecodeBWLDataAfterOpCode(unsigned short int *OpCode )
                    5274   ; {
                    5275   _DecodeBWLDataAfterOpCode:
00002FC0  4E56 0000 5276          link      A6,#0
00002FC4  48E7 3038 5277          movem.l   D2/D3/A2/A3/A4,-(A7)
00002FC8  262E 0008 5278          move.l    8(A6),D3
00002FCC  45F9 0B00 5279          lea       _TempString.L,A2
00002FD0  0546      
00002FD2  47F9 0000 5280          lea       _sprintf.L,A3
00002FD6  570C      
00002FD8  49F9 0B00 5281          lea       _InstructionSize.L,A4
00002FDC  017E      
                    5282   ; unsigned char OperandSize ;
                    5283   ; OperandSize = (*OpCode & (unsigned short int)(0x01C0)) >> 6 ;               // get bits 8,7 and 6 into positions 1,0, these define size of operand
00002FDE  2043      5284          move.l    D3,A0
00002FE0  3010      5285          move.w    (A0),D0
00002FE2  C07C 01C0 5286          and.w     #448,D0
00002FE6  EC48      5287          lsr.w     #6,D0
00002FE8  1400      5288          move.b    D0,D2
                    5289   ; InstructionSize += 1;
00002FEA  5294      5290          addq.l    #1,(A4)
                    5291   ; if((OperandSize == (char)(0)) || (OperandSize == (char)(4)))                // #byte value
00002FEC  4A02      5292          tst.b     D2
00002FEE  6706      5293          beq.s     DecodeBWLDataAfterOpCode_3
00002FF0  0C02 0004 5294          cmp.b     #4,D2
00002FF4  6620      5295          bne.s     DecodeBWLDataAfterOpCode_1
                    5296   DecodeBWLDataAfterOpCode_3:
                    5297   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00002FF6  2043      5298          move.l    D3,A0
00002FF8  3228 0002 5299          move.w    2(A0),D1
00002FFC  C2BC 0000 5300          and.l     #65535,D1
00003000  FFFF      
00003002  2F01      5301          move.l    D1,-(A7)
00003004  4879 0000 5302          pea       @m68kde~1_173.L
00003008  756E      
0000300A  2F0A      5303          move.l    A2,-(A7)
0000300C  4E93      5304          jsr       (A3)
0000300E  DEFC 000C 5305          add.w     #12,A7
00003012  6000 007C 5306          bra       DecodeBWLDataAfterOpCode_7
                    5307   DecodeBWLDataAfterOpCode_1:
                    5308   ; // #word value 7 is used by divs.w instruction (not divu)
                    5309   ; // however used by instructions like adda, cmpa, suba # to mean long value -
                    5310   ; // bugger - have to build a special case and look at opcode to see what instruction is
                    5311   ; else if((OperandSize == (char)(1)) || (OperandSize == (char)(5)) || (OperandSize == (char)(3)))         //# byte or word value
00003016  0C02 0001 5312          cmp.b     #1,D2
0000301A  670C      5313          beq.s     DecodeBWLDataAfterOpCode_6
0000301C  0C02 0005 5314          cmp.b     #5,D2
00003020  6706      5315          beq.s     DecodeBWLDataAfterOpCode_6
00003022  0C02 0003 5316          cmp.b     #3,D2
00003026  6620      5317          bne.s     DecodeBWLDataAfterOpCode_4
                    5318   DecodeBWLDataAfterOpCode_6:
                    5319   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
00003028  2043      5320          move.l    D3,A0
0000302A  3228 0002 5321          move.w    2(A0),D1
0000302E  C2BC 0000 5322          and.l     #65535,D1
00003032  FFFF      
00003034  2F01      5323          move.l    D1,-(A7)
00003036  4879 0000 5324          pea       @m68kde~1_173.L
0000303A  756E      
0000303C  2F0A      5325          move.l    A2,-(A7)
0000303E  4E93      5326          jsr       (A3)
00003040  DEFC 000C 5327          add.w     #12,A7
00003044  6000 004A 5328          bra       DecodeBWLDataAfterOpCode_7
                    5329   DecodeBWLDataAfterOpCode_4:
                    5330   ; else if((OperandSize == (char)(2))  || (OperandSize == (char)(6)) || (OperandSize == (char)(7)))    {    //# long value
00003048  0C02 0002 5331          cmp.b     #2,D2
0000304C  670E      5332          beq.s     DecodeBWLDataAfterOpCode_9
0000304E  0C02 0006 5333          cmp.b     #6,D2
00003052  6708      5334          beq.s     DecodeBWLDataAfterOpCode_9
00003054  0C02 0007 5335          cmp.b     #7,D2
00003058  6600 0036 5336          bne       DecodeBWLDataAfterOpCode_7
                    5337   DecodeBWLDataAfterOpCode_9:
                    5338   ; sprintf(TempString, "#$%X", ((unsigned int)(OpCode[1]) << 16) | (unsigned int)(OpCode[2]) ); // create 3
0000305C  2043      5339          move.l    D3,A0
0000305E  3228 0002 5340          move.w    2(A0),D1
00003062  C2BC 0000 5341          and.l     #65535,D1
00003066  FFFF      
00003068  E189      5342          lsl.l     #8,D1
0000306A  E189      5343          lsl.l     #8,D1
0000306C  2043      5344          move.l    D3,A0
0000306E  2F00      5345          move.l    D0,-(A7)
00003070  3028 0004 5346          move.w    4(A0),D0
00003074  C0BC 0000 5347          and.l     #65535,D0
00003078  FFFF      
0000307A  8280      5348          or.l      D0,D1
0000307C  201F      5349          move.l    (A7)+,D0
0000307E  2F01      5350          move.l    D1,-(A7)
00003080  4879 0000 5351          pea       @m68kde~1_173.L
00003084  756E      
00003086  2F0A      5352          move.l    A2,-(A7)
00003088  4E93      5353          jsr       (A3)
0000308A  DEFC 000C 5354          add.w     #12,A7
                    5355   ; InstructionSize += 1;
0000308E  5294      5356          addq.l    #1,(A4)
                    5357   DecodeBWLDataAfterOpCode_7:
                    5358   ; }
                    5359   ; // special case for divs - bugger!!!
                    5360   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x81C0)) // it's the divs instruction
00003090  2043      5361          move.l    D3,A0
00003092  3010      5362          move.w    (A0),D0
00003094  C07C F1C0 5363          and.w     #61888,D0
00003098  0C40 81C0 5364          cmp.w     #33216,D0
0000309C  6622      5365          bne.s     DecodeBWLDataAfterOpCode_10
                    5366   ; {
                    5367   ; InstructionSize = 2 ;
0000309E  28BC 0000 5368          move.l    #2,(A4)
000030A2  0002      
                    5369   ; sprintf(TempString, "#$%X", (unsigned int)(OpCode[1]));
000030A4  2043      5370          move.l    D3,A0
000030A6  3228 0002 5371          move.w    2(A0),D1
000030AA  C2BC 0000 5372          and.l     #65535,D1
000030AE  FFFF      
000030B0  2F01      5373          move.l    D1,-(A7)
000030B2  4879 0000 5374          pea       @m68kde~1_173.L
000030B6  756E      
000030B8  2F0A      5375          move.l    A2,-(A7)
000030BA  4E93      5376          jsr       (A3)
000030BC  DEFC 000C 5377          add.w     #12,A7
                    5378   DecodeBWLDataAfterOpCode_10:
                    5379   ; }
                    5380   ; strcatInstruction(TempString) ;
000030C0  2F0A      5381          move.l    A2,-(A7)
000030C2  4EB8 0CCC 5382          jsr       _strcatInstruction
000030C6  584F      5383          addq.w    #4,A7
000030C8  4CDF 1C0C 5384          movem.l   (A7)+,D2/D3/A2/A3/A4
000030CC  4E5E      5385          unlk      A6
000030CE  4E75      5386          rts
                    5387   ; }
                    5388   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5389   ; // This function decodes the MODE|EA bits opcode in bits 5,4,3,2,1,0 or 11-6
                    5390   ; // DataSize is used to gain access to the operand used by EA, e.g. ADDI  #$2344422,$234234
                    5391   ; // since the data following the opcode is actually the immediate data which could be 1 or 2 words
                    5392   ; //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    5393   ; void Decode6BitEA(unsigned short int *OpCode, int EAChoice, unsigned short int DataSize, unsigned short int IsItMoveInstruction)     // decode Mode/Register
                    5394   ; {
                    5395   _Decode6BitEA:
000030D0  4E56 FFF4 5396          link      A6,#-12
000030D4  48E7 3F3C 5397          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000030D8  45F8 0CCC 5398          lea       _strcatInstruction.L,A2
000030DC  47F9 0B00 5399          lea       _TempString.L,A3
000030E0  0546      
000030E2  282E 0008 5400          move.l    8(A6),D4
000030E6  49F9 0000 5401          lea       _sprintf.L,A4
000030EA  570C      
000030EC  4BF9 0B00 5402          lea       _InstructionSize.L,A5
000030F0  017E      
000030F2  3C2E 0012 5403          move.w    18(A6),D6
000030F6  CCBC 0000 5404          and.l     #65535,D6
000030FA  FFFF      
                    5405   ; unsigned char OperandMode, OperandRegister, OperandSize;
                    5406   ; short int ExWord1, ExWord2 ;                       // get any extra 16 bit word associated with EA
                    5407   ; unsigned char RegNumber[3];
                    5408   ; signed char offset ;
                    5409   ; unsigned short int Xn, XnSize ;
                    5410   ; if(EAChoice == 0)   {   // if EA in bits 5-0
000030FC  202E 000C 5411          move.l    12(A6),D0
00003100  6620      5412          bne.s     Decode6BitEA_1
                    5413   ; OperandMode = ((unsigned char)(*OpCode >> 3) & (unsigned short int)(0x7)) ;    // get bits 5,4,3 into position 2,1,0
00003102  2044      5414          move.l    D4,A0
00003104  3010      5415          move.w    (A0),D0
00003106  E648      5416          lsr.w     #3,D0
00003108  C07C 00FF 5417          and.w     #255,D0
0000310C  C07C 0007 5418          and.w     #7,D0
00003110  1A00      5419          move.b    D0,D5
                    5420   ; OperandRegister = ((unsigned char)(*OpCode) & (unsigned short int)(0x7)) ;
00003112  2044      5421          move.l    D4,A0
00003114  3010      5422          move.w    (A0),D0
00003116  C07C 00FF 5423          and.w     #255,D0
0000311A  C07C 0007 5424          and.w     #7,D0
0000311E  1600      5425          move.b    D0,D3
00003120  6022      5426          bra.s     Decode6BitEA_2
                    5427   Decode6BitEA_1:
                    5428   ; }
                    5429   ; else    {               // else EA in bits 11-6
                    5430   ; OperandMode = ((unsigned char)(*OpCode >> 6) & (unsigned short int)(0x7)) ;
00003122  2044      5431          move.l    D4,A0
00003124  3010      5432          move.w    (A0),D0
00003126  EC48      5433          lsr.w     #6,D0
00003128  C07C 00FF 5434          and.w     #255,D0
0000312C  C07C 0007 5435          and.w     #7,D0
00003130  1A00      5436          move.b    D0,D5
                    5437   ; OperandRegister = ((unsigned char)(*OpCode >> 9) & (unsigned short int)(0x7)) ;
00003132  2044      5438          move.l    D4,A0
00003134  3010      5439          move.w    (A0),D0
00003136  E048      5440          lsr.w     #8,D0
00003138  E248      5441          lsr.w     #1,D0
0000313A  C07C 00FF 5442          and.w     #255,D0
0000313E  C07C 0007 5443          and.w     #7,D0
00003142  1600      5444          move.b    D0,D3
                    5445   Decode6BitEA_2:
                    5446   ; }
                    5447   ; if(EAChoice == 0)    {
00003144  202E 000C 5448          move.l    12(A6),D0
00003148  6600 0034 5449          bne       Decode6BitEA_3
                    5450   ; ExWord1 = OpCode[1+DataSize] ;
0000314C  2044      5451          move.l    D4,A0
0000314E  7001      5452          moveq     #1,D0
00003150  4880      5453          ext.w     D0
00003152  48C0      5454          ext.l     D0
00003154  CCBC 0000 5455          and.l     #65535,D6
00003158  FFFF      
0000315A  D086      5456          add.l     D6,D0
0000315C  E388      5457          lsl.l     #1,D0
0000315E  3430 0800 5458          move.w    0(A0,D0.L),D2
                    5459   ; ExWord2 = OpCode[2+DataSize] ;
00003162  2044      5460          move.l    D4,A0
00003164  7002      5461          moveq     #2,D0
00003166  4880      5462          ext.w     D0
00003168  48C0      5463          ext.l     D0
0000316A  CCBC 0000 5464          and.l     #65535,D6
0000316E  FFFF      
00003170  D086      5465          add.l     D6,D0
00003172  E388      5466          lsl.l     #1,D0
00003174  3D70 0800 5467          move.w    0(A0,D0.L),-8(A6)
00003178  FFF8      
0000317A  6000 007E 5468          bra       Decode6BitEA_7
                    5469   Decode6BitEA_3:
                    5470   ; }
                    5471   ; else if(EAChoice == 1)   {
0000317E  202E 000C 5472          move.l    12(A6),D0
00003182  0C80 0000 5473          cmp.l     #1,D0
00003186  0001      
00003188  6600 0034 5474          bne       Decode6BitEA_5
                    5475   ; ExWord1 = OpCode[3+DataSize] ;
0000318C  2044      5476          move.l    D4,A0
0000318E  7003      5477          moveq     #3,D0
00003190  4880      5478          ext.w     D0
00003192  48C0      5479          ext.l     D0
00003194  CCBC 0000 5480          and.l     #65535,D6
00003198  FFFF      
0000319A  D086      5481          add.l     D6,D0
0000319C  E388      5482          lsl.l     #1,D0
0000319E  3430 0800 5483          move.w    0(A0,D0.L),D2
                    5484   ; ExWord2 = OpCode[4+DataSize] ;
000031A2  2044      5485          move.l    D4,A0
000031A4  7004      5486          moveq     #4,D0
000031A6  4880      5487          ext.w     D0
000031A8  48C0      5488          ext.l     D0
000031AA  CCBC 0000 5489          and.l     #65535,D6
000031AE  FFFF      
000031B0  D086      5490          add.l     D6,D0
000031B2  E388      5491          lsl.l     #1,D0
000031B4  3D70 0800 5492          move.w    0(A0,D0.L),-8(A6)
000031B8  FFF8      
000031BA  6000 003E 5493          bra       Decode6BitEA_7
                    5494   Decode6BitEA_5:
                    5495   ; }
                    5496   ; else if(EAChoice == 2)   {  // for move instruction
000031BE  202E 000C 5497          move.l    12(A6),D0
000031C2  0C80 0000 5498          cmp.l     #2,D0
000031C6  0002      
000031C8  6600 0030 5499          bne       Decode6BitEA_7
                    5500   ; ExWord1 = OpCode[1+DataSize] ;
000031CC  2044      5501          move.l    D4,A0
000031CE  7001      5502          moveq     #1,D0
000031D0  4880      5503          ext.w     D0
000031D2  48C0      5504          ext.l     D0
000031D4  CCBC 0000 5505          and.l     #65535,D6
000031D8  FFFF      
000031DA  D086      5506          add.l     D6,D0
000031DC  E388      5507          lsl.l     #1,D0
000031DE  3430 0800 5508          move.w    0(A0,D0.L),D2
                    5509   ; ExWord2 = OpCode[2+DataSize] ;
000031E2  2044      5510          move.l    D4,A0
000031E4  7002      5511          moveq     #2,D0
000031E6  4880      5512          ext.w     D0
000031E8  48C0      5513          ext.l     D0
000031EA  CCBC 0000 5514          and.l     #65535,D6
000031EE  FFFF      
000031F0  D086      5515          add.l     D6,D0
000031F2  E388      5516          lsl.l     #1,D0
000031F4  3D70 0800 5517          move.w    0(A0,D0.L),-8(A6)
000031F8  FFF8      
                    5518   Decode6BitEA_7:
                    5519   ; }
                    5520   ; if(OperandMode == (unsigned char)(0)) {                    // Effective Address = Dn
000031FA  4A05      5521          tst.b     D5
000031FC  661E      5522          bne.s     Decode6BitEA_9
                    5523   ; RegNumber[0] = 'D' ;
000031FE  1D7C 0044 5524          move.b    #68,-6+0(A6)
00003202  FFFA      
                    5525   ; RegNumber[1] = (unsigned char)(0x30 + OperandRegister) ;
00003204  7030      5526          moveq     #48,D0
00003206  D003      5527          add.b     D3,D0
00003208  1D40 FFFB 5528          move.b    D0,-6+1(A6)
                    5529   ; RegNumber[2] = 0 ;
0000320C  422E FFFC 5530          clr.b     -6+2(A6)
                    5531   ; strcatInstruction(RegNumber) ;
00003210  486E FFFA 5532          pea       -6(A6)
00003214  4E92      5533          jsr       (A2)
00003216  584F      5534          addq.w    #4,A7
00003218  6000 02D6 5535          bra       Decode6BitEA_44
                    5536   Decode6BitEA_9:
                    5537   ; }
                    5538   ; else if(OperandMode == (unsigned char)(1)) {                    // Effective Address = An
0000321C  0C05 0001 5539          cmp.b     #1,D5
00003220  6616      5540          bne.s     Decode6BitEA_11
                    5541   ; Decode3BitAddressRegister(OperandRegister) ;
00003222  C67C 00FF 5542          and.w     #255,D3
00003226  C6BC 0000 5543          and.l     #65535,D3
0000322A  FFFF      
0000322C  2F03      5544          move.l    D3,-(A7)
0000322E  4EB8 2ECC 5545          jsr       _Decode3BitAddressRegister
00003232  584F      5546          addq.w    #4,A7
00003234  6000 02BA 5547          bra       Decode6BitEA_44
                    5548   Decode6BitEA_11:
                    5549   ; }
                    5550   ; else if(OperandMode == (unsigned char)(2)) {                    // Effective Address = (An)
00003238  0C05 0002 5551          cmp.b     #2,D5
0000323C  662A      5552          bne.s     Decode6BitEA_13
                    5553   ; strcatInstruction("(") ;
0000323E  4879 0000 5554          pea       @m68kde~1_174.L
00003242  7574      
00003244  4E92      5555          jsr       (A2)
00003246  584F      5556          addq.w    #4,A7
                    5557   ; Decode3BitAddressRegister(OperandRegister) ;
00003248  C67C 00FF 5558          and.w     #255,D3
0000324C  C6BC 0000 5559          and.l     #65535,D3
00003250  FFFF      
00003252  2F03      5560          move.l    D3,-(A7)
00003254  4EB8 2ECC 5561          jsr       _Decode3BitAddressRegister
00003258  584F      5562          addq.w    #4,A7
                    5563   ; strcatInstruction(")") ;
0000325A  4879 0000 5564          pea       @m68kde~1_175.L
0000325E  7576      
00003260  4E92      5565          jsr       (A2)
00003262  584F      5566          addq.w    #4,A7
00003264  6000 028A 5567          bra       Decode6BitEA_44
                    5568   Decode6BitEA_13:
                    5569   ; }
                    5570   ; else if(OperandMode == (unsigned char)(3)) {                    // Effective Address = (An)+
00003268  0C05 0003 5571          cmp.b     #3,D5
0000326C  662A      5572          bne.s     Decode6BitEA_15
                    5573   ; strcatInstruction("(") ;
0000326E  4879 0000 5574          pea       @m68kde~1_174.L
00003272  7574      
00003274  4E92      5575          jsr       (A2)
00003276  584F      5576          addq.w    #4,A7
                    5577   ; Decode3BitAddressRegister(OperandRegister) ;
00003278  C67C 00FF 5578          and.w     #255,D3
0000327C  C6BC 0000 5579          and.l     #65535,D3
00003280  FFFF      
00003282  2F03      5580          move.l    D3,-(A7)
00003284  4EB8 2ECC 5581          jsr       _Decode3BitAddressRegister
00003288  584F      5582          addq.w    #4,A7
                    5583   ; strcatInstruction(")+") ;
0000328A  4879 0000 5584          pea       @m68kde~1_176.L
0000328E  7578      
00003290  4E92      5585          jsr       (A2)
00003292  584F      5586          addq.w    #4,A7
00003294  6000 025A 5587          bra       Decode6BitEA_44
                    5588   Decode6BitEA_15:
                    5589   ; }
                    5590   ; else if(OperandMode == (unsigned char)(4)) {                    // Effective Address = -(An)
00003298  0C05 0004 5591          cmp.b     #4,D5
0000329C  662A      5592          bne.s     Decode6BitEA_17
                    5593   ; strcatInstruction("-(") ;
0000329E  4879 0000 5594          pea       @m68kde~1_177.L
000032A2  757C      
000032A4  4E92      5595          jsr       (A2)
000032A6  584F      5596          addq.w    #4,A7
                    5597   ; Decode3BitAddressRegister(OperandRegister) ;
000032A8  C67C 00FF 5598          and.w     #255,D3
000032AC  C6BC 0000 5599          and.l     #65535,D3
000032B0  FFFF      
000032B2  2F03      5600          move.l    D3,-(A7)
000032B4  4EB8 2ECC 5601          jsr       _Decode3BitAddressRegister
000032B8  584F      5602          addq.w    #4,A7
                    5603   ; strcatInstruction(")") ;
000032BA  4879 0000 5604          pea       @m68kde~1_175.L
000032BE  7576      
000032C0  4E92      5605          jsr       (A2)
000032C2  584F      5606          addq.w    #4,A7
000032C4  6000 022A 5607          bra       Decode6BitEA_44
                    5608   Decode6BitEA_17:
                    5609   ; }
                    5610   ; else if(OperandMode == (unsigned char)(5)) {                    // Effective Address = (d16, An)
000032C8  0C05 0005 5611          cmp.b     #5,D5
000032CC  6626      5612          bne.s     Decode6BitEA_19
                    5613   ; sprintf(TempString, "%d(A%d)", ExWord1, OperandRegister) ;
000032CE  C6BC 0000 5614          and.l     #255,D3
000032D2  00FF      
000032D4  2F03      5615          move.l    D3,-(A7)
000032D6  48C2      5616          ext.l     D2
000032D8  2F02      5617          move.l    D2,-(A7)
000032DA  4879 0000 5618          pea       @m68kde~1_178.L
000032DE  7580      
000032E0  2F0B      5619          move.l    A3,-(A7)
000032E2  4E94      5620          jsr       (A4)
000032E4  DEFC 0010 5621          add.w     #16,A7
                    5622   ; strcatInstruction(TempString) ;
000032E8  2F0B      5623          move.l    A3,-(A7)
000032EA  4E92      5624          jsr       (A2)
000032EC  584F      5625          addq.w    #4,A7
                    5626   ; InstructionSize += 1;
000032EE  5295      5627          addq.l    #1,(A5)
000032F0  6000 01FE 5628          bra       Decode6BitEA_44
                    5629   Decode6BitEA_19:
                    5630   ; }
                    5631   ; else if(OperandMode == (unsigned char)(6)) {                    // Effective Address = (d8, An, Xn)
000032F4  0C05 0006 5632          cmp.b     #6,D5
000032F8  6600 00AA 5633          bne       Decode6BitEA_21
                    5634   ; offset = ExWord1 & (short int)(0x00FF);
000032FC  3002      5635          move.w    D2,D0
000032FE  C07C 00FF 5636          and.w     #255,D0
00003302  1D40 FFFD 5637          move.b    D0,-3(A6)
                    5638   ; sprintf(TempString, "%d(A%d,", offset, OperandRegister) ;
00003306  C6BC 0000 5639          and.l     #255,D3
0000330A  00FF      
0000330C  2F03      5640          move.l    D3,-(A7)
0000330E  122E FFFD 5641          move.b    -3(A6),D1
00003312  4881      5642          ext.w     D1
00003314  48C1      5643          ext.l     D1
00003316  2F01      5644          move.l    D1,-(A7)
00003318  4879 0000 5645          pea       @m68kde~1_179.L
0000331C  7588      
0000331E  2F0B      5646          move.l    A3,-(A7)
00003320  4E94      5647          jsr       (A4)
00003322  DEFC 0010 5648          add.w     #16,A7
                    5649   ; strcatInstruction(TempString) ;
00003326  2F0B      5650          move.l    A3,-(A7)
00003328  4E92      5651          jsr       (A2)
0000332A  584F      5652          addq.w    #4,A7
                    5653   ; InstructionSize += 1;
0000332C  5295      5654          addq.l    #1,(A5)
                    5655   ; // decode the Xn bit
                    5656   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000332E  3002      5657          move.w    D2,D0
00003330  C07C 8000 5658          and.w     #32768,D0
00003334  660C      5659          bne.s     Decode6BitEA_23
                    5660   ; strcatInstruction("D") ;
00003336  4879 0000 5661          pea       @m68kde~1_180.L
0000333A  7590      
0000333C  4E92      5662          jsr       (A2)
0000333E  584F      5663          addq.w    #4,A7
00003340  600A      5664          bra.s     Decode6BitEA_24
                    5665   Decode6BitEA_23:
                    5666   ; else
                    5667   ; strcatInstruction("A") ;
00003342  4879 0000 5668          pea       @m68kde~1_181.L
00003346  7592      
00003348  4E92      5669          jsr       (A2)
0000334A  584F      5670          addq.w    #4,A7
                    5671   Decode6BitEA_24:
                    5672   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000334C  3002      5673          move.w    D2,D0
0000334E  C07C 7000 5674          and.w     #28672,D0
00003352  E048      5675          lsr.w     #8,D0
00003354  E848      5676          lsr.w     #4,D0
00003356  3D40 FFFE 5677          move.w    D0,-2(A6)
                    5678   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
0000335A  322E FFFE 5679          move.w    -2(A6),D1
0000335E  C2BC 0000 5680          and.l     #65535,D1
00003362  FFFF      
00003364  2F01      5681          move.l    D1,-(A7)
00003366  4879 0000 5682          pea       @m68kde~1_182.L
0000336A  7594      
0000336C  2F0B      5683          move.l    A3,-(A7)
0000336E  4E94      5684          jsr       (A4)
00003370  DEFC 000C 5685          add.w     #12,A7
                    5686   ; strcatInstruction(TempString) ;
00003374  2F0B      5687          move.l    A3,-(A7)
00003376  4E92      5688          jsr       (A2)
00003378  584F      5689          addq.w    #4,A7
                    5690   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
0000337A  3002      5691          move.w    D2,D0
0000337C  C07C 0800 5692          and.w     #2048,D0
00003380  E048      5693          lsr.w     #8,D0
00003382  E648      5694          lsr.w     #3,D0
00003384  3E00      5695          move.w    D0,D7
                    5696   ; if(XnSize == 0)
00003386  4A47      5697          tst.w     D7
00003388  660C      5698          bne.s     Decode6BitEA_25
                    5699   ; strcatInstruction(".W)") ;
0000338A  4879 0000 5700          pea       @m68kde~1_183.L
0000338E  7598      
00003390  4E92      5701          jsr       (A2)
00003392  584F      5702          addq.w    #4,A7
00003394  600A      5703          bra.s     Decode6BitEA_26
                    5704   Decode6BitEA_25:
                    5705   ; else
                    5706   ; strcatInstruction(".L)") ;
00003396  4879 0000 5707          pea       @m68kde~1_184.L
0000339A  759C      
0000339C  4E92      5708          jsr       (A2)
0000339E  584F      5709          addq.w    #4,A7
                    5710   Decode6BitEA_26:
000033A0  6000 014E 5711          bra       Decode6BitEA_44
                    5712   Decode6BitEA_21:
                    5713   ; }
                    5714   ; else if(OperandMode == (unsigned char)(7)) {
000033A4  0C05 0007 5715          cmp.b     #7,D5
000033A8  6600 0146 5716          bne       Decode6BitEA_44
                    5717   ; if(OperandRegister == 0) {                               // EA = (xxx).W
000033AC  4A03      5718          tst.b     D3
000033AE  661E      5719          bne.s     Decode6BitEA_29
                    5720   ; sprintf(TempString, "$%X", ExWord1) ;
000033B0  48C2      5721          ext.l     D2
000033B2  2F02      5722          move.l    D2,-(A7)
000033B4  4879 0000 5723          pea       @m68kde~1_185.L
000033B8  75A0      
000033BA  2F0B      5724          move.l    A3,-(A7)
000033BC  4E94      5725          jsr       (A4)
000033BE  DEFC 000C 5726          add.w     #12,A7
                    5727   ; strcatInstruction(TempString) ;
000033C2  2F0B      5728          move.l    A3,-(A7)
000033C4  4E92      5729          jsr       (A2)
000033C6  584F      5730          addq.w    #4,A7
                    5731   ; InstructionSize += 1;
000033C8  5295      5732          addq.l    #1,(A5)
000033CA  6000 0124 5733          bra       Decode6BitEA_44
                    5734   Decode6BitEA_29:
                    5735   ; }
                    5736   ; else if(OperandRegister == 1)   {                         // EA = (xxx).L
000033CE  0C03 0001 5737          cmp.b     #1,D3
000033D2  6600 0032 5738          bne       Decode6BitEA_31
                    5739   ; sprintf(TempString, "$%X", ((unsigned int)(ExWord1) << 16) | (unsigned int)(ExWord2)); // create 32 bit address
000033D6  3202      5740          move.w    D2,D1
000033D8  48C1      5741          ext.l     D1
000033DA  E189      5742          lsl.l     #8,D1
000033DC  E189      5743          lsl.l     #8,D1
000033DE  2F00      5744          move.l    D0,-(A7)
000033E0  302E FFF8 5745          move.w    -8(A6),D0
000033E4  48C0      5746          ext.l     D0
000033E6  8280      5747          or.l      D0,D1
000033E8  201F      5748          move.l    (A7)+,D0
000033EA  2F01      5749          move.l    D1,-(A7)
000033EC  4879 0000 5750          pea       @m68kde~1_185.L
000033F0  75A0      
000033F2  2F0B      5751          move.l    A3,-(A7)
000033F4  4E94      5752          jsr       (A4)
000033F6  DEFC 000C 5753          add.w     #12,A7
                    5754   ; strcatInstruction(TempString) ;
000033FA  2F0B      5755          move.l    A3,-(A7)
000033FC  4E92      5756          jsr       (A2)
000033FE  584F      5757          addq.w    #4,A7
                    5758   ; InstructionSize += 2;
00003400  5495      5759          addq.l    #2,(A5)
00003402  6000 00EC 5760          bra       Decode6BitEA_44
                    5761   Decode6BitEA_31:
                    5762   ; }
                    5763   ; else if(OperandRegister == 4) {                                 // source EA = #Immediate addressing
00003406  0C03 0004 5764          cmp.b     #4,D3
0000340A  661C      5765          bne.s     Decode6BitEA_33
                    5766   ; if(IsItMoveInstruction == 0)        //not move instruction
0000340C  302E 0016 5767          move.w    22(A6),D0
00003410  660A      5768          bne.s     Decode6BitEA_35
                    5769   ; DecodeBWLDataAfterOpCode(OpCode);
00003412  2F04      5770          move.l    D4,-(A7)
00003414  4EB8 2FC0 5771          jsr       _DecodeBWLDataAfterOpCode
00003418  584F      5772          addq.w    #4,A7
0000341A  6008      5773          bra.s     Decode6BitEA_36
                    5774   Decode6BitEA_35:
                    5775   ; else
                    5776   ; DecodeBWLDataAfterOpCodeForMove(OpCode);
0000341C  2F04      5777          move.l    D4,-(A7)
0000341E  4EB8 2EF8 5778          jsr       _DecodeBWLDataAfterOpCodeForMove
00003422  584F      5779          addq.w    #4,A7
                    5780   Decode6BitEA_36:
00003424  6000 00CA 5781          bra       Decode6BitEA_44
                    5782   Decode6BitEA_33:
                    5783   ; }
                    5784   ; else if(OperandRegister == 2) {                                 // source EA = (d16,PC)
00003428  0C03 0002 5785          cmp.b     #2,D3
0000342C  661E      5786          bne.s     Decode6BitEA_37
                    5787   ; sprintf(TempString, "%d(PC)", ExWord1) ;
0000342E  48C2      5788          ext.l     D2
00003430  2F02      5789          move.l    D2,-(A7)
00003432  4879 0000 5790          pea       @m68kde~1_186.L
00003436  75A4      
00003438  2F0B      5791          move.l    A3,-(A7)
0000343A  4E94      5792          jsr       (A4)
0000343C  DEFC 000C 5793          add.w     #12,A7
                    5794   ; strcatInstruction(TempString) ;
00003440  2F0B      5795          move.l    A3,-(A7)
00003442  4E92      5796          jsr       (A2)
00003444  584F      5797          addq.w    #4,A7
                    5798   ; InstructionSize += 1;
00003446  5295      5799          addq.l    #1,(A5)
00003448  6000 00A6 5800          bra       Decode6BitEA_44
                    5801   Decode6BitEA_37:
                    5802   ; }
                    5803   ; else if(OperandRegister == 3) {                                 // source EA = (d8,PC, Xn)
0000344C  0C03 0003 5804          cmp.b     #3,D3
00003450  6600 009E 5805          bne       Decode6BitEA_44
                    5806   ; offset = ExWord1 & (short int)(0x00FF);
00003454  3002      5807          move.w    D2,D0
00003456  C07C 00FF 5808          and.w     #255,D0
0000345A  1D40 FFFD 5809          move.b    D0,-3(A6)
                    5810   ; sprintf(TempString, "%d(PC,", offset ) ;
0000345E  122E FFFD 5811          move.b    -3(A6),D1
00003462  4881      5812          ext.w     D1
00003464  48C1      5813          ext.l     D1
00003466  2F01      5814          move.l    D1,-(A7)
00003468  4879 0000 5815          pea       @m68kde~1_187.L
0000346C  75AC      
0000346E  2F0B      5816          move.l    A3,-(A7)
00003470  4E94      5817          jsr       (A4)
00003472  DEFC 000C 5818          add.w     #12,A7
                    5819   ; strcatInstruction(TempString) ;
00003476  2F0B      5820          move.l    A3,-(A7)
00003478  4E92      5821          jsr       (A2)
0000347A  584F      5822          addq.w    #4,A7
                    5823   ; InstructionSize += 1;
0000347C  5295      5824          addq.l    #1,(A5)
                    5825   ; // decode the Xn bit
                    5826   ; if((ExWord1 & (unsigned short int)(0x8000)) == (unsigned short int)(0x0000))
0000347E  3002      5827          move.w    D2,D0
00003480  C07C 8000 5828          and.w     #32768,D0
00003484  660C      5829          bne.s     Decode6BitEA_41
                    5830   ; strcatInstruction("D") ;
00003486  4879 0000 5831          pea       @m68kde~1_180.L
0000348A  7590      
0000348C  4E92      5832          jsr       (A2)
0000348E  584F      5833          addq.w    #4,A7
00003490  600A      5834          bra.s     Decode6BitEA_42
                    5835   Decode6BitEA_41:
                    5836   ; else
                    5837   ; strcatInstruction("A") ;
00003492  4879 0000 5838          pea       @m68kde~1_181.L
00003496  7592      
00003498  4E92      5839          jsr       (A2)
0000349A  584F      5840          addq.w    #4,A7
                    5841   Decode6BitEA_42:
                    5842   ; Xn = (ExWord1 & (unsigned short int)(0x7000)) >> 12 ;        // get Xn register Number into bits 2,1,0
0000349C  3002      5843          move.w    D2,D0
0000349E  C07C 7000 5844          and.w     #28672,D0
000034A2  E048      5845          lsr.w     #8,D0
000034A4  E848      5846          lsr.w     #4,D0
000034A6  3D40 FFFE 5847          move.w    D0,-2(A6)
                    5848   ; sprintf(TempString, "%d",Xn) ;                               // generate string for reg number 0 -7
000034AA  322E FFFE 5849          move.w    -2(A6),D1
000034AE  C2BC 0000 5850          and.l     #65535,D1
000034B2  FFFF      
000034B4  2F01      5851          move.l    D1,-(A7)
000034B6  4879 0000 5852          pea       @m68kde~1_182.L
000034BA  7594      
000034BC  2F0B      5853          move.l    A3,-(A7)
000034BE  4E94      5854          jsr       (A4)
000034C0  DEFC 000C 5855          add.w     #12,A7
                    5856   ; strcatInstruction(TempString) ;
000034C4  2F0B      5857          move.l    A3,-(A7)
000034C6  4E92      5858          jsr       (A2)
000034C8  584F      5859          addq.w    #4,A7
                    5860   ; XnSize = (ExWord1 & (unsigned short int)(0x0800)) >> 11 ;    // get xn size into bit 0
000034CA  3002      5861          move.w    D2,D0
000034CC  C07C 0800 5862          and.w     #2048,D0
000034D0  E048      5863          lsr.w     #8,D0
000034D2  E648      5864          lsr.w     #3,D0
000034D4  3E00      5865          move.w    D0,D7
                    5866   ; if(XnSize == 0)
000034D6  4A47      5867          tst.w     D7
000034D8  660C      5868          bne.s     Decode6BitEA_43
                    5869   ; strcatInstruction(".W)") ;
000034DA  4879 0000 5870          pea       @m68kde~1_183.L
000034DE  7598      
000034E0  4E92      5871          jsr       (A2)
000034E2  584F      5872          addq.w    #4,A7
000034E4  600A      5873          bra.s     Decode6BitEA_44
                    5874   Decode6BitEA_43:
                    5875   ; else
                    5876   ; strcatInstruction(".L)") ;
000034E6  4879 0000 5877          pea       @m68kde~1_184.L
000034EA  759C      
000034EC  4E92      5878          jsr       (A2)
000034EE  584F      5879          addq.w    #4,A7
                    5880   Decode6BitEA_44:
000034F0  4CDF 3CFC 5881          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
000034F4  4E5E      5882          unlk      A6
000034F6  4E75      5883          rts
                    5884   ; }
                    5885   ; }
                    5886   ; }
                    5887   ; void Decode3BitOperandMode(unsigned short int *OpCode)               // used with instructions like ADD determines source/destination
                    5888   ; {
                    5889   _Decode3BitOperandMode:
000034F8  4E56 FFFC 5890          link      A6,#-4
000034FC  2F02      5891          move.l    D2,-(A7)
000034FE  242E 0008 5892          move.l    8(A6),D2
                    5893   ; unsigned short int OperandMode;
                    5894   ; OperandMode = (*OpCode & (unsigned short int)(0x0100)) >> 8 ;    // get bit 8 into position 0, defines source and destination
00003502  2042      5895          move.l    D2,A0
00003504  3010      5896          move.w    (A0),D0
00003506  C07C 0100 5897          and.w     #256,D0
0000350A  E048      5898          lsr.w     #8,D0
0000350C  3D40 FFFE 5899          move.w    D0,-2(A6)
                    5900   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003510  2042      5901          move.l    D2,A0
00003512  3210      5902          move.w    (A0),D1
00003514  C2BC 0000 5903          and.l     #65535,D1
00003518  FFFF      
0000351A  2F01      5904          move.l    D1,-(A7)
0000351C  4EB8 2E3C 5905          jsr       _Decode2BitOperandSize
00003520  584F      5906          addq.w    #4,A7
                    5907   ; if(OperandMode == 0)     {                                      // Destination is a Data Register
00003522  302E FFFE 5908          move.w    -2(A6),D0
00003526  6600 0032 5909          bne       Decode3BitOperandMode_1
                    5910   ; Decode6BitEA(OpCode,0,0,0) ;
0000352A  42A7      5911          clr.l     -(A7)
0000352C  42A7      5912          clr.l     -(A7)
0000352E  42A7      5913          clr.l     -(A7)
00003530  2F02      5914          move.l    D2,-(A7)
00003532  4EB8 30D0 5915          jsr       _Decode6BitEA
00003536  DEFC 0010 5916          add.w     #16,A7
                    5917   ; strcatInstruction(",") ;
0000353A  4879 0000 5918          pea       @m68kde~1_188.L
0000353E  75B4      
00003540  4EB8 0CCC 5919          jsr       _strcatInstruction
00003544  584F      5920          addq.w    #4,A7
                    5921   ; Decode3BitDataRegister(*OpCode) ;
00003546  2042      5922          move.l    D2,A0
00003548  3210      5923          move.w    (A0),D1
0000354A  C2BC 0000 5924          and.l     #65535,D1
0000354E  FFFF      
00003550  2F01      5925          move.l    D1,-(A7)
00003552  4EB8 2E98 5926          jsr       _Decode3BitDataRegister
00003556  584F      5927          addq.w    #4,A7
00003558  602E      5928          bra.s     Decode3BitOperandMode_2
                    5929   Decode3BitOperandMode_1:
                    5930   ; }
                    5931   ; else {                                                         // Destination is in EA
                    5932   ; Decode3BitDataRegister(*OpCode) ;
0000355A  2042      5933          move.l    D2,A0
0000355C  3210      5934          move.w    (A0),D1
0000355E  C2BC 0000 5935          and.l     #65535,D1
00003562  FFFF      
00003564  2F01      5936          move.l    D1,-(A7)
00003566  4EB8 2E98 5937          jsr       _Decode3BitDataRegister
0000356A  584F      5938          addq.w    #4,A7
                    5939   ; strcatInstruction(",") ;
0000356C  4879 0000 5940          pea       @m68kde~1_188.L
00003570  75B4      
00003572  4EB8 0CCC 5941          jsr       _strcatInstruction
00003576  584F      5942          addq.w    #4,A7
                    5943   ; Decode6BitEA(OpCode,0,0,0) ;
00003578  42A7      5944          clr.l     -(A7)
0000357A  42A7      5945          clr.l     -(A7)
0000357C  42A7      5946          clr.l     -(A7)
0000357E  2F02      5947          move.l    D2,-(A7)
00003580  4EB8 30D0 5948          jsr       _Decode6BitEA
00003584  DEFC 0010 5949          add.w     #16,A7
                    5950   Decode3BitOperandMode_2:
00003588  241F      5951          move.l    (A7)+,D2
0000358A  4E5E      5952          unlk      A6
0000358C  4E75      5953          rts
                    5954   ; }
                    5955   ; }
                    5956   ; void DecodeBranchCondition(unsigned short int Condition)
                    5957   ; {
                    5958   _DecodeBranchCondition:
0000358E  4E56 0000 5959          link      A6,#0
00003592  48E7 2020 5960          movem.l   D2/A2,-(A7)
00003596  45F8 0CCC 5961          lea       _strcatInstruction.L,A2
0000359A  342E 000A 5962          move.w    10(A6),D2
0000359E  C4BC 0000 5963          and.l     #65535,D2
000035A2  FFFF      
                    5964   ; if(Condition == (unsigned short int)(0x04))
000035A4  0C42 0004 5965          cmp.w     #4,D2
000035A8  660E      5966          bne.s     DecodeBranchCondition_1
                    5967   ; strcatInstruction("CC") ;
000035AA  4879 0000 5968          pea       @m68kde~1_189.L
000035AE  75B6      
000035B0  4E92      5969          jsr       (A2)
000035B2  584F      5970          addq.w    #4,A7
000035B4  6000 011C 5971          bra       DecodeBranchCondition_30
                    5972   DecodeBranchCondition_1:
                    5973   ; else if(Condition == (unsigned short int)(0x05))
000035B8  0C42 0005 5974          cmp.w     #5,D2
000035BC  660E      5975          bne.s     DecodeBranchCondition_3
                    5976   ; strcatInstruction("CS") ;
000035BE  4879 0000 5977          pea       @m68kde~1_190.L
000035C2  75BA      
000035C4  4E92      5978          jsr       (A2)
000035C6  584F      5979          addq.w    #4,A7
000035C8  6000 0108 5980          bra       DecodeBranchCondition_30
                    5981   DecodeBranchCondition_3:
                    5982   ; else if(Condition == (unsigned short int)(0x07))
000035CC  0C42 0007 5983          cmp.w     #7,D2
000035D0  660E      5984          bne.s     DecodeBranchCondition_5
                    5985   ; strcatInstruction("EQ") ;
000035D2  4879 0000 5986          pea       @m68kde~1_191.L
000035D6  75BE      
000035D8  4E92      5987          jsr       (A2)
000035DA  584F      5988          addq.w    #4,A7
000035DC  6000 00F4 5989          bra       DecodeBranchCondition_30
                    5990   DecodeBranchCondition_5:
                    5991   ; else if(Condition == (unsigned short int)(0x0C))
000035E0  0C42 000C 5992          cmp.w     #12,D2
000035E4  660E      5993          bne.s     DecodeBranchCondition_7
                    5994   ; strcatInstruction("GE") ;
000035E6  4879 0000 5995          pea       @m68kde~1_192.L
000035EA  75C2      
000035EC  4E92      5996          jsr       (A2)
000035EE  584F      5997          addq.w    #4,A7
000035F0  6000 00E0 5998          bra       DecodeBranchCondition_30
                    5999   DecodeBranchCondition_7:
                    6000   ; else if(Condition == (unsigned short int)(0x0E))
000035F4  0C42 000E 6001          cmp.w     #14,D2
000035F8  660E      6002          bne.s     DecodeBranchCondition_9
                    6003   ; strcatInstruction("GT") ;
000035FA  4879 0000 6004          pea       @m68kde~1_193.L
000035FE  75C6      
00003600  4E92      6005          jsr       (A2)
00003602  584F      6006          addq.w    #4,A7
00003604  6000 00CC 6007          bra       DecodeBranchCondition_30
                    6008   DecodeBranchCondition_9:
                    6009   ; else if(Condition == (unsigned short int)(0x02))
00003608  0C42 0002 6010          cmp.w     #2,D2
0000360C  660E      6011          bne.s     DecodeBranchCondition_11
                    6012   ; strcatInstruction("HI") ;
0000360E  4879 0000 6013          pea       @m68kde~1_194.L
00003612  75CA      
00003614  4E92      6014          jsr       (A2)
00003616  584F      6015          addq.w    #4,A7
00003618  6000 00B8 6016          bra       DecodeBranchCondition_30
                    6017   DecodeBranchCondition_11:
                    6018   ; else if(Condition == (unsigned short int)(0x0F))
0000361C  0C42 000F 6019          cmp.w     #15,D2
00003620  660E      6020          bne.s     DecodeBranchCondition_13
                    6021   ; strcatInstruction("LE") ;
00003622  4879 0000 6022          pea       @m68kde~1_195.L
00003626  75CE      
00003628  4E92      6023          jsr       (A2)
0000362A  584F      6024          addq.w    #4,A7
0000362C  6000 00A4 6025          bra       DecodeBranchCondition_30
                    6026   DecodeBranchCondition_13:
                    6027   ; else if(Condition == (unsigned short int)(0x03))
00003630  0C42 0003 6028          cmp.w     #3,D2
00003634  660E      6029          bne.s     DecodeBranchCondition_15
                    6030   ; strcatInstruction("LS") ;
00003636  4879 0000 6031          pea       @m68kde~1_196.L
0000363A  75D2      
0000363C  4E92      6032          jsr       (A2)
0000363E  584F      6033          addq.w    #4,A7
00003640  6000 0090 6034          bra       DecodeBranchCondition_30
                    6035   DecodeBranchCondition_15:
                    6036   ; else if(Condition == (unsigned short int)(0x0D))
00003644  0C42 000D 6037          cmp.w     #13,D2
00003648  660E      6038          bne.s     DecodeBranchCondition_17
                    6039   ; strcatInstruction("LT") ;
0000364A  4879 0000 6040          pea       @m68kde~1_197.L
0000364E  75D6      
00003650  4E92      6041          jsr       (A2)
00003652  584F      6042          addq.w    #4,A7
00003654  6000 007C 6043          bra       DecodeBranchCondition_30
                    6044   DecodeBranchCondition_17:
                    6045   ; else if(Condition == (unsigned short int)(0x0B))
00003658  0C42 000B 6046          cmp.w     #11,D2
0000365C  660E      6047          bne.s     DecodeBranchCondition_19
                    6048   ; strcatInstruction("MI") ;
0000365E  4879 0000 6049          pea       @m68kde~1_198.L
00003662  75DA      
00003664  4E92      6050          jsr       (A2)
00003666  584F      6051          addq.w    #4,A7
00003668  6000 0068 6052          bra       DecodeBranchCondition_30
                    6053   DecodeBranchCondition_19:
                    6054   ; else if(Condition == (unsigned short int)(0x06))
0000366C  0C42 0006 6055          cmp.w     #6,D2
00003670  660E      6056          bne.s     DecodeBranchCondition_21
                    6057   ; strcatInstruction("NE") ;
00003672  4879 0000 6058          pea       @m68kde~1_199.L
00003676  75DE      
00003678  4E92      6059          jsr       (A2)
0000367A  584F      6060          addq.w    #4,A7
0000367C  6000 0054 6061          bra       DecodeBranchCondition_30
                    6062   DecodeBranchCondition_21:
                    6063   ; else if(Condition == (unsigned short int)(0x0A))
00003680  0C42 000A 6064          cmp.w     #10,D2
00003684  660E      6065          bne.s     DecodeBranchCondition_23
                    6066   ; strcatInstruction("PL") ;
00003686  4879 0000 6067          pea       @m68kde~1_200.L
0000368A  75E2      
0000368C  4E92      6068          jsr       (A2)
0000368E  584F      6069          addq.w    #4,A7
00003690  6000 0040 6070          bra       DecodeBranchCondition_30
                    6071   DecodeBranchCondition_23:
                    6072   ; else if(Condition == (unsigned short int)(0x09))
00003694  0C42 0009 6073          cmp.w     #9,D2
00003698  660C      6074          bne.s     DecodeBranchCondition_25
                    6075   ; strcatInstruction("VS") ;
0000369A  4879 0000 6076          pea       @m68kde~1_201.L
0000369E  75E6      
000036A0  4E92      6077          jsr       (A2)
000036A2  584F      6078          addq.w    #4,A7
000036A4  602C      6079          bra.s     DecodeBranchCondition_30
                    6080   DecodeBranchCondition_25:
                    6081   ; else if(Condition == (unsigned short int)(0x08))
000036A6  0C42 0008 6082          cmp.w     #8,D2
000036AA  660C      6083          bne.s     DecodeBranchCondition_27
                    6084   ; strcatInstruction("VC") ;
000036AC  4879 0000 6085          pea       @m68kde~1_202.L
000036B0  75EA      
000036B2  4E92      6086          jsr       (A2)
000036B4  584F      6087          addq.w    #4,A7
000036B6  601A      6088          bra.s     DecodeBranchCondition_30
                    6089   DecodeBranchCondition_27:
                    6090   ; else if(Condition == (unsigned short int)(0))
000036B8  4A42      6091          tst.w     D2
000036BA  660C      6092          bne.s     DecodeBranchCondition_29
                    6093   ; strcatInstruction("RA") ;
000036BC  4879 0000 6094          pea       @m68kde~1_203.L
000036C0  75EE      
000036C2  4E92      6095          jsr       (A2)
000036C4  584F      6096          addq.w    #4,A7
000036C6  600A      6097          bra.s     DecodeBranchCondition_30
                    6098   DecodeBranchCondition_29:
                    6099   ; else
                    6100   ; strcatInstruction("SR");
000036C8  4879 0000 6101          pea       @m68kde~1_204.L
000036CC  75F2      
000036CE  4E92      6102          jsr       (A2)
000036D0  584F      6103          addq.w    #4,A7
                    6104   DecodeBranchCondition_30:
                    6105   ; strcatInstruction(" ") ;
000036D2  4879 0000 6106          pea       @m68kde~1_30.L
000036D6  640E      
000036D8  4E92      6107          jsr       (A2)
000036DA  584F      6108          addq.w    #4,A7
000036DC  4CDF 0404 6109          movem.l   (A7)+,D2/A2
000036E0  4E5E      6110          unlk      A6
000036E2  4E75      6111          rts
                    6112   ; }
                    6113   ; void DisassembleInstruction( short int *OpCode)         // pointer to Opcode
                    6114   ; {
                    6115   _DisassembleInstruction:
000036E4  4E56 FFD8 6116          link      A6,#-40
000036E8  48E7 3F3C 6117          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
000036EC  242E 0008 6118          move.l    8(A6),D2
000036F0  45F9 0B00 6119          lea       _InstructionSize.L,A2
000036F4  017E      
000036F6  47F8 0CE6 6120          lea       _strcpyInstruction.L,A3
000036FA  49F9 0B00 6121          lea       _TempString.L,A4
000036FE  0546      
00003700  4BF9 0000 6122          lea       _sprintf.L,A5
00003704  570C      
                    6123   ; unsigned short int MSBits = (*OpCode >> 12);    //mask off the lower 12 bits leaving top 4 bit to analyse
00003706  2042      6124          move.l    D2,A0
00003708  3010      6125          move.w    (A0),D0
0000370A  E040      6126          asr.w     #8,D0
0000370C  E840      6127          asr.w     #4,D0
0000370E  3D40 FFDA 6128          move.w    D0,-38(A6)
                    6129   ; unsigned short int LS12Bits = (*OpCode & (unsigned short int)(0x0FFF));
00003712  2042      6130          move.l    D2,A0
00003714  3010      6131          move.w    (A0),D0
00003716  C07C 0FFF 6132          and.w     #4095,D0
0000371A  3D40 FFDC 6133          move.w    D0,-36(A6)
                    6134   ; unsigned short int SourceBits, DestBits, Size ;
                    6135   ; unsigned char *Mode, Condition;
                    6136   ; unsigned short int Register, OpMode, EAMode, EARegister, Rx, Ry, EXGOpMode, DataSize, SourceReg;
                    6137   ; unsigned short int DataRegister, AddressRegister;
                    6138   ; signed char Displacement8Bit ;  // used for Bcc type instruction signed 8 bit displacement
                    6139   ; signed short int Displacement16Bit;
                    6140   ; short int Mask, DoneSlash;
                    6141   ; int i;
                    6142   ; strcpyInstruction("Unknown") ;
0000371E  4879 0000 6143          pea       @m68kde~1_205.L
00003722  75F6      
00003724  4E93      6144          jsr       (A3)
00003726  584F      6145          addq.w    #4,A7
                    6146   ; /////////////////////////////////////////////////////////////////////////////////
                    6147   ; // if instruction is ABCD
                    6148   ; /////////////////////////////////////////////////////////////////////////////////
                    6149   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0xC100))   {
00003728  2042      6150          move.l    D2,A0
0000372A  3010      6151          move.w    (A0),D0
0000372C  C07C F1F0 6152          and.w     #61936,D0
00003730  0C40 C100 6153          cmp.w     #49408,D0
00003734  6600 008C 6154          bne       DisassembleInstruction_4
                    6155   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
00003738  2042      6156          move.l    D2,A0
0000373A  3010      6157          move.w    (A0),D0
0000373C  E040      6158          asr.w     #8,D0
0000373E  E240      6159          asr.w     #1,D0
00003740  C07C 0007 6160          and.w     #7,D0
00003744  3D40 FFE0 6161          move.w    D0,-32(A6)
                    6162   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
00003748  2042      6163          move.l    D2,A0
0000374A  3010      6164          move.w    (A0),D0
0000374C  C07C 0007 6165          and.w     #7,D0
00003750  3D40 FFDE 6166          move.w    D0,-34(A6)
                    6167   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
00003754  2042      6168          move.l    D2,A0
00003756  3010      6169          move.w    (A0),D0
00003758  E640      6170          asr.w     #3,D0
0000375A  48C0      6171          ext.l     D0
0000375C  C0BC 0000 6172          and.l     #1,D0
00003760  0001      
00003762  2D40 FFE4 6173          move.l    D0,-28(A6)
                    6174   ; if(Mode == 0)
00003766  202E FFE4 6175          move.l    -28(A6),D0
0000376A  662C      6176          bne.s     DisassembleInstruction_3
                    6177   ; sprintf(Instruction, "ABCD D%d,D%d", SourceBits, DestBits) ;
0000376C  322E FFE0 6178          move.w    -32(A6),D1
00003770  C2BC 0000 6179          and.l     #65535,D1
00003774  FFFF      
00003776  2F01      6180          move.l    D1,-(A7)
00003778  322E FFDE 6181          move.w    -34(A6),D1
0000377C  C2BC 0000 6182          and.l     #65535,D1
00003780  FFFF      
00003782  2F01      6183          move.l    D1,-(A7)
00003784  4879 0000 6184          pea       @m68kde~1_206.L
00003788  75FE      
0000378A  4879 0B00 6185          pea       _Instruction.L
0000378E  04E2      
00003790  4E95      6186          jsr       (A5)
00003792  DEFC 0010 6187          add.w     #16,A7
00003796  602A      6188          bra.s     DisassembleInstruction_4
                    6189   DisassembleInstruction_3:
                    6190   ; else
                    6191   ; sprintf(Instruction, "ABCD -(A%d),-(A%d)", SourceBits, DestBits) ;
00003798  322E FFE0 6192          move.w    -32(A6),D1
0000379C  C2BC 0000 6193          and.l     #65535,D1
000037A0  FFFF      
000037A2  2F01      6194          move.l    D1,-(A7)
000037A4  322E FFDE 6195          move.w    -34(A6),D1
000037A8  C2BC 0000 6196          and.l     #65535,D1
000037AC  FFFF      
000037AE  2F01      6197          move.l    D1,-(A7)
000037B0  4879 0000 6198          pea       @m68kde~1_207.L
000037B4  760C      
000037B6  4879 0B00 6199          pea       _Instruction.L
000037BA  04E2      
000037BC  4E95      6200          jsr       (A5)
000037BE  DEFC 0010 6201          add.w     #16,A7
                    6202   DisassembleInstruction_4:
                    6203   ; }
                    6204   ; /////////////////////////////////////////////////////////////////////////////////
                    6205   ; // if instruction is ADD or ADDA
                    6206   ; /////////////////////////////////////////////////////////////////////////////////
                    6207   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xD000))   {
000037C2  2042      6208          move.l    D2,A0
000037C4  3010      6209          move.w    (A0),D0
000037C6  C07C F000 6210          and.w     #61440,D0
000037CA  0C40 D000 6211          cmp.w     #53248,D0
000037CE  6600 008C 6212          bne       DisassembleInstruction_8
                    6213   ; InstructionSize = 1;
000037D2  24BC 0000 6214          move.l    #1,(A2)
000037D6  0001      
                    6215   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
000037D8  2042      6216          move.l    D2,A0
000037DA  3010      6217          move.w    (A0),D0
000037DC  EC40      6218          asr.w     #6,D0
000037DE  C07C 0007 6219          and.w     #7,D0
000037E2  3600      6220          move.w    D0,D3
                    6221   ; if( (OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
000037E4  0C43 0003 6222          cmp.w     #3,D3
000037E8  6708      6223          beq.s     DisassembleInstruction_9
000037EA  0C43 0007 6224          cmp.w     #7,D3
000037EE  6600 005A 6225          bne       DisassembleInstruction_7
                    6226   DisassembleInstruction_9:
                    6227   ; {
                    6228   ; if(OpMode == (unsigned short int)(0x0003))
000037F2  0C43 0003 6229          cmp.w     #3,D3
000037F6  660C      6230          bne.s     DisassembleInstruction_10
                    6231   ; strcpyInstruction("ADDA.W ") ;
000037F8  4879 0000 6232          pea       @m68kde~1_208.L
000037FC  7620      
000037FE  4E93      6233          jsr       (A3)
00003800  584F      6234          addq.w    #4,A7
00003802  600A      6235          bra.s     DisassembleInstruction_11
                    6236   DisassembleInstruction_10:
                    6237   ; else
                    6238   ; strcpyInstruction("ADDA.L ") ;
00003804  4879 0000 6239          pea       @m68kde~1_209.L
00003808  7628      
0000380A  4E93      6240          jsr       (A3)
0000380C  584F      6241          addq.w    #4,A7
                    6242   DisassembleInstruction_11:
                    6243   ; Decode6BitEA(OpCode,0,0,0)  ;
0000380E  42A7      6244          clr.l     -(A7)
00003810  42A7      6245          clr.l     -(A7)
00003812  42A7      6246          clr.l     -(A7)
00003814  2F02      6247          move.l    D2,-(A7)
00003816  4EB8 30D0 6248          jsr       _Decode6BitEA
0000381A  DEFC 0010 6249          add.w     #16,A7
                    6250   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000381E  2042      6251          move.l    D2,A0
00003820  3210      6252          move.w    (A0),D1
00003822  E041      6253          asr.w     #8,D1
00003824  E241      6254          asr.w     #1,D1
00003826  C27C 0007 6255          and.w     #7,D1
0000382A  C2BC 0000 6256          and.l     #65535,D1
0000382E  FFFF      
00003830  2F01      6257          move.l    D1,-(A7)
00003832  4879 0000 6258          pea       @m68kde~1_210.L
00003836  7630      
00003838  2F0C      6259          move.l    A4,-(A7)
0000383A  4E95      6260          jsr       (A5)
0000383C  DEFC 000C 6261          add.w     #12,A7
                    6262   ; strcatInstruction(TempString) ;
00003840  2F0C      6263          move.l    A4,-(A7)
00003842  4EB8 0CCC 6264          jsr       _strcatInstruction
00003846  584F      6265          addq.w    #4,A7
00003848  6012      6266          bra.s     DisassembleInstruction_8
                    6267   DisassembleInstruction_7:
                    6268   ; }
                    6269   ; else {
                    6270   ; strcpyInstruction("ADD") ;
0000384A  4879 0000 6271          pea       @m68kde~1_211.L
0000384E  7636      
00003850  4E93      6272          jsr       (A3)
00003852  584F      6273          addq.w    #4,A7
                    6274   ; Decode3BitOperandMode(OpCode) ;
00003854  2F02      6275          move.l    D2,-(A7)
00003856  4EB8 34F8 6276          jsr       _Decode3BitOperandMode
0000385A  584F      6277          addq.w    #4,A7
                    6278   DisassembleInstruction_8:
                    6279   ; }
                    6280   ; }
                    6281   ; /////////////////////////////////////////////////////////////////////////////////
                    6282   ; // if instruction is ADDI or ANDI or CMPI or EORI or ORI or SUBI
                    6283   ; /////////////////////////////////////////////////////////////////////////////////
                    6284   ; if( (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600) |
0000385C  2042      6285          move.l    D2,A0
0000385E  3010      6286          move.w    (A0),D0
00003860  C07C FF00 6287          and.w     #65280,D0
00003864  0C40 0600 6288          cmp.w     #1536,D0
00003868  6604      6289          bne.s     DisassembleInstruction_14
0000386A  7001      6290          moveq     #1,D0
0000386C  6002      6291          bra.s     DisassembleInstruction_15
                    6292   DisassembleInstruction_14:
0000386E  4280      6293          clr.l     D0
                    6294   DisassembleInstruction_15:
00003870  2042      6295          move.l    D2,A0
00003872  3210      6296          move.w    (A0),D1
00003874  C27C FF00 6297          and.w     #65280,D1
00003878  0C41 0200 6298          cmp.w     #512,D1
0000387C  6604      6299          bne.s     DisassembleInstruction_16
0000387E  7201      6300          moveq     #1,D1
00003880  6002      6301          bra.s     DisassembleInstruction_17
                    6302   DisassembleInstruction_16:
00003882  4281      6303          clr.l     D1
                    6304   DisassembleInstruction_17:
00003884  8041      6305          or.w      D1,D0
00003886  2042      6306          move.l    D2,A0
00003888  3210      6307          move.w    (A0),D1
0000388A  C27C FF00 6308          and.w     #65280,D1
0000388E  0C41 0C00 6309          cmp.w     #3072,D1
00003892  6604      6310          bne.s     DisassembleInstruction_18
00003894  7201      6311          moveq     #1,D1
00003896  6002      6312          bra.s     DisassembleInstruction_19
                    6313   DisassembleInstruction_18:
00003898  4281      6314          clr.l     D1
                    6315   DisassembleInstruction_19:
0000389A  8041      6316          or.w      D1,D0
0000389C  2042      6317          move.l    D2,A0
0000389E  3210      6318          move.w    (A0),D1
000038A0  C27C FF00 6319          and.w     #65280,D1
000038A4  0C41 0A00 6320          cmp.w     #2560,D1
000038A8  6604      6321          bne.s     DisassembleInstruction_20
000038AA  7201      6322          moveq     #1,D1
000038AC  6002      6323          bra.s     DisassembleInstruction_21
                    6324   DisassembleInstruction_20:
000038AE  4281      6325          clr.l     D1
                    6326   DisassembleInstruction_21:
000038B0  8041      6327          or.w      D1,D0
000038B2  2042      6328          move.l    D2,A0
000038B4  3210      6329          move.w    (A0),D1
000038B6  C27C FF00 6330          and.w     #65280,D1
000038BA  6604      6331          bne.s     DisassembleInstruction_22
000038BC  7201      6332          moveq     #1,D1
000038BE  6002      6333          bra.s     DisassembleInstruction_23
                    6334   DisassembleInstruction_22:
000038C0  4281      6335          clr.l     D1
                    6336   DisassembleInstruction_23:
000038C2  8041      6337          or.w      D1,D0
000038C4  2042      6338          move.l    D2,A0
000038C6  3210      6339          move.w    (A0),D1
000038C8  C27C FF00 6340          and.w     #65280,D1
000038CC  0C41 0400 6341          cmp.w     #1024,D1
000038D0  6604      6342          bne.s     DisassembleInstruction_24
000038D2  7201      6343          moveq     #1,D1
000038D4  6002      6344          bra.s     DisassembleInstruction_25
                    6345   DisassembleInstruction_24:
000038D6  4281      6346          clr.l     D1
                    6347   DisassembleInstruction_25:
000038D8  8041      6348          or.w      D1,D0
000038DA  6700 00E4 6349          beq       DisassembleInstruction_12
                    6350   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200) |
                    6351   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00) |
                    6352   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00) |
                    6353   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000) |
                    6354   ; (*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
                    6355   ; {
                    6356   ; InstructionSize = 1;
000038DE  24BC 0000 6357          move.l    #1,(A2)
000038E2  0001      
                    6358   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0600))
000038E4  2042      6359          move.l    D2,A0
000038E6  3010      6360          move.w    (A0),D0
000038E8  C07C FF00 6361          and.w     #65280,D0
000038EC  0C40 0600 6362          cmp.w     #1536,D0
000038F0  660E      6363          bne.s     DisassembleInstruction_26
                    6364   ; strcpyInstruction("ADDI") ;
000038F2  4879 0000 6365          pea       @m68kde~1_212.L
000038F6  763A      
000038F8  4E93      6366          jsr       (A3)
000038FA  584F      6367          addq.w    #4,A7
000038FC  6000 0084 6368          bra       DisassembleInstruction_36
                    6369   DisassembleInstruction_26:
                    6370   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0200))
00003900  2042      6371          move.l    D2,A0
00003902  3010      6372          move.w    (A0),D0
00003904  C07C FF00 6373          and.w     #65280,D0
00003908  0C40 0200 6374          cmp.w     #512,D0
0000390C  660E      6375          bne.s     DisassembleInstruction_28
                    6376   ; strcpyInstruction("ANDI") ;
0000390E  4879 0000 6377          pea       @m68kde~1_213.L
00003912  7640      
00003914  4E93      6378          jsr       (A3)
00003916  584F      6379          addq.w    #4,A7
00003918  6000 0068 6380          bra       DisassembleInstruction_36
                    6381   DisassembleInstruction_28:
                    6382   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0C00))
0000391C  2042      6383          move.l    D2,A0
0000391E  3010      6384          move.w    (A0),D0
00003920  C07C FF00 6385          and.w     #65280,D0
00003924  0C40 0C00 6386          cmp.w     #3072,D0
00003928  660E      6387          bne.s     DisassembleInstruction_30
                    6388   ; strcpyInstruction("CMPI") ;
0000392A  4879 0000 6389          pea       @m68kde~1_214.L
0000392E  7646      
00003930  4E93      6390          jsr       (A3)
00003932  584F      6391          addq.w    #4,A7
00003934  6000 004C 6392          bra       DisassembleInstruction_36
                    6393   DisassembleInstruction_30:
                    6394   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0A00))
00003938  2042      6395          move.l    D2,A0
0000393A  3010      6396          move.w    (A0),D0
0000393C  C07C FF00 6397          and.w     #65280,D0
00003940  0C40 0A00 6398          cmp.w     #2560,D0
00003944  660E      6399          bne.s     DisassembleInstruction_32
                    6400   ; strcpyInstruction("EORI") ;
00003946  4879 0000 6401          pea       @m68kde~1_215.L
0000394A  764C      
0000394C  4E93      6402          jsr       (A3)
0000394E  584F      6403          addq.w    #4,A7
00003950  6000 0030 6404          bra       DisassembleInstruction_36
                    6405   DisassembleInstruction_32:
                    6406   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0000))
00003954  2042      6407          move.l    D2,A0
00003956  3010      6408          move.w    (A0),D0
00003958  C07C FF00 6409          and.w     #65280,D0
0000395C  660C      6410          bne.s     DisassembleInstruction_34
                    6411   ; strcpyInstruction("ORI") ;
0000395E  4879 0000 6412          pea       @m68kde~1_216.L
00003962  7652      
00003964  4E93      6413          jsr       (A3)
00003966  584F      6414          addq.w    #4,A7
00003968  6018      6415          bra.s     DisassembleInstruction_36
                    6416   DisassembleInstruction_34:
                    6417   ; else if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x0400))
0000396A  2042      6418          move.l    D2,A0
0000396C  3010      6419          move.w    (A0),D0
0000396E  C07C FF00 6420          and.w     #65280,D0
00003972  0C40 0400 6421          cmp.w     #1024,D0
00003976  660A      6422          bne.s     DisassembleInstruction_36
                    6423   ; strcpyInstruction("SUBI") ;
00003978  4879 0000 6424          pea       @m68kde~1_217.L
0000397C  7656      
0000397E  4E93      6425          jsr       (A3)
00003980  584F      6426          addq.w    #4,A7
                    6427   DisassembleInstruction_36:
                    6428   ; DataSize = Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003982  2042      6429          move.l    D2,A0
00003984  3210      6430          move.w    (A0),D1
00003986  C2BC 0000 6431          and.l     #65535,D1
0000398A  FFFF      
0000398C  2F01      6432          move.l    D1,-(A7)
0000398E  4EB8 2E3C 6433          jsr       _Decode2BitOperandSize
00003992  584F      6434          addq.w    #4,A7
00003994  3E00      6435          move.w    D0,D7
                    6436   ; DecodeBWLDataAfterOpCode(OpCode);                                // go add the 8,16,32 bit data to instruction string
00003996  2F02      6437          move.l    D2,-(A7)
00003998  4EB8 2FC0 6438          jsr       _DecodeBWLDataAfterOpCode
0000399C  584F      6439          addq.w    #4,A7
                    6440   ; strcatInstruction(",") ;
0000399E  4879 0000 6441          pea       @m68kde~1_188.L
000039A2  75B4      
000039A4  4EB8 0CCC 6442          jsr       _strcatInstruction
000039A8  584F      6443          addq.w    #4,A7
                    6444   ; Decode6BitEA(OpCode,0,DataSize,0) ;                                         // decode EA
000039AA  42A7      6445          clr.l     -(A7)
000039AC  CEBC 0000 6446          and.l     #65535,D7
000039B0  FFFF      
000039B2  2F07      6447          move.l    D7,-(A7)
000039B4  42A7      6448          clr.l     -(A7)
000039B6  2F02      6449          move.l    D2,-(A7)
000039B8  4EB8 30D0 6450          jsr       _Decode6BitEA
000039BC  DEFC 0010 6451          add.w     #16,A7
                    6452   DisassembleInstruction_12:
                    6453   ; }
                    6454   ; /////////////////////////////////////////////////////////////////////////////////
                    6455   ; // if instruction is ADDI #data,SR
                    6456   ; /////////////////////////////////////////////////////////////////////////////////
                    6457   ; if(*OpCode  == (unsigned short int)(0x027c))   {
000039C0  2042      6458          move.l    D2,A0
000039C2  3010      6459          move.w    (A0),D0
000039C4  0C40 027C 6460          cmp.w     #636,D0
000039C8  6622      6461          bne.s     DisassembleInstruction_38
                    6462   ; InstructionSize = 2;
000039CA  24BC 0000 6463          move.l    #2,(A2)
000039CE  0002      
                    6464   ; sprintf(Instruction, "ANDI #$%X,SR", OpCode[1]);
000039D0  2042      6465          move.l    D2,A0
000039D2  3228 0002 6466          move.w    2(A0),D1
000039D6  48C1      6467          ext.l     D1
000039D8  2F01      6468          move.l    D1,-(A7)
000039DA  4879 0000 6469          pea       @m68kde~1_218.L
000039DE  765C      
000039E0  4879 0B00 6470          pea       _Instruction.L
000039E4  04E2      
000039E6  4E95      6471          jsr       (A5)
000039E8  DEFC 000C 6472          add.w     #12,A7
                    6473   DisassembleInstruction_38:
                    6474   ; }
                    6475   ; /////////////////////////////////////////////////////////////////////////////////
                    6476   ; // if instruction is ADDQ
                    6477   ; /////////////////////////////////////////////////////////////////////////////////
                    6478   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5000))   {
000039EC  2042      6479          move.l    D2,A0
000039EE  3010      6480          move.w    (A0),D0
000039F0  C07C F100 6481          and.w     #61696,D0
000039F4  0C40 5000 6482          cmp.w     #20480,D0
000039F8  6600 005E 6483          bne       DisassembleInstruction_40
                    6484   ; InstructionSize = 1;
000039FC  24BC 0000 6485          move.l    #1,(A2)
00003A00  0001      
                    6486   ; strcpyInstruction("ADDQ") ;
00003A02  4879 0000 6487          pea       @m68kde~1_219.L
00003A06  766A      
00003A08  4E93      6488          jsr       (A3)
00003A0A  584F      6489          addq.w    #4,A7
                    6490   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003A0C  2042      6491          move.l    D2,A0
00003A0E  3210      6492          move.w    (A0),D1
00003A10  C2BC 0000 6493          and.l     #65535,D1
00003A14  FFFF      
00003A16  2F01      6494          move.l    D1,-(A7)
00003A18  4EB8 2E3C 6495          jsr       _Decode2BitOperandSize
00003A1C  584F      6496          addq.w    #4,A7
                    6497   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00003A1E  2042      6498          move.l    D2,A0
00003A20  3210      6499          move.w    (A0),D1
00003A22  E041      6500          asr.w     #8,D1
00003A24  E241      6501          asr.w     #1,D1
00003A26  C27C 0007 6502          and.w     #7,D1
00003A2A  C2BC 0000 6503          and.l     #65535,D1
00003A2E  FFFF      
00003A30  2F01      6504          move.l    D1,-(A7)
00003A32  4879 0000 6505          pea       @m68kde~1_220.L
00003A36  7670      
00003A38  2F0C      6506          move.l    A4,-(A7)
00003A3A  4E95      6507          jsr       (A5)
00003A3C  DEFC 000C 6508          add.w     #12,A7
                    6509   ; strcatInstruction(TempString) ;
00003A40  2F0C      6510          move.l    A4,-(A7)
00003A42  4EB8 0CCC 6511          jsr       _strcatInstruction
00003A46  584F      6512          addq.w    #4,A7
                    6513   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00003A48  42A7      6514          clr.l     -(A7)
00003A4A  42A7      6515          clr.l     -(A7)
00003A4C  42A7      6516          clr.l     -(A7)
00003A4E  2F02      6517          move.l    D2,-(A7)
00003A50  4EB8 30D0 6518          jsr       _Decode6BitEA
00003A54  DEFC 0010 6519          add.w     #16,A7
                    6520   DisassembleInstruction_40:
                    6521   ; }
                    6522   ; /////////////////////////////////////////////////////////////////////////////////
                    6523   ; // if instruction is ADDX
                    6524   ; /////////////////////////////////////////////////////////////////////////////////
                    6525   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0xD100))   {
00003A58  2042      6526          move.l    D2,A0
00003A5A  3010      6527          move.w    (A0),D0
00003A5C  C07C F130 6528          and.w     #61744,D0
00003A60  0C40 D100 6529          cmp.w     #53504,D0
00003A64  6600 00A4 6530          bne       DisassembleInstruction_44
                    6531   ; InstructionSize = 1;
00003A68  24BC 0000 6532          move.l    #1,(A2)
00003A6C  0001      
                    6533   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00003A6E  2042      6534          move.l    D2,A0
00003A70  3010      6535          move.w    (A0),D0
00003A72  EC40      6536          asr.w     #6,D0
00003A74  C07C 0003 6537          and.w     #3,D0
00003A78  3600      6538          move.w    D0,D3
                    6539   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's ADDA not ADDX
00003A7A  0C43 0003 6540          cmp.w     #3,D3
00003A7E  6700 008A 6541          beq       DisassembleInstruction_44
                    6542   ; {
                    6543   ; strcpyInstruction("ADDX") ;
00003A82  4879 0000 6544          pea       @m68kde~1_221.L
00003A86  7676      
00003A88  4E93      6545          jsr       (A3)
00003A8A  584F      6546          addq.w    #4,A7
                    6547   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00003A8C  2042      6548          move.l    D2,A0
00003A8E  3210      6549          move.w    (A0),D1
00003A90  C2BC 0000 6550          and.l     #65535,D1
00003A94  FFFF      
00003A96  2F01      6551          move.l    D1,-(A7)
00003A98  4EB8 2E3C 6552          jsr       _Decode2BitOperandSize
00003A9C  584F      6553          addq.w    #4,A7
                    6554   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
00003A9E  2042      6555          move.l    D2,A0
00003AA0  3010      6556          move.w    (A0),D0
00003AA2  C07C 0008 6557          and.w     #8,D0
00003AA6  6600 0030 6558          bne       DisassembleInstruction_46
                    6559   ; sprintf(TempString, "D%X,D%X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003AAA  2042      6560          move.l    D2,A0
00003AAC  3210      6561          move.w    (A0),D1
00003AAE  E041      6562          asr.w     #8,D1
00003AB0  E241      6563          asr.w     #1,D1
00003AB2  C27C 0007 6564          and.w     #7,D1
00003AB6  48C1      6565          ext.l     D1
00003AB8  2F01      6566          move.l    D1,-(A7)
00003ABA  2042      6567          move.l    D2,A0
00003ABC  3210      6568          move.w    (A0),D1
00003ABE  C27C 0007 6569          and.w     #7,D1
00003AC2  48C1      6570          ext.l     D1
00003AC4  2F01      6571          move.l    D1,-(A7)
00003AC6  4879 0000 6572          pea       @m68kde~1_222.L
00003ACA  767C      
00003ACC  2F0C      6573          move.l    A4,-(A7)
00003ACE  4E95      6574          jsr       (A5)
00003AD0  DEFC 0010 6575          add.w     #16,A7
00003AD4  6000 002C 6576          bra       DisassembleInstruction_47
                    6577   DisassembleInstruction_46:
                    6578   ; else        // -(ax),-(ay) mode used
                    6579   ; sprintf(TempString, "-(A%X),-(A%X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
00003AD8  2042      6580          move.l    D2,A0
00003ADA  3210      6581          move.w    (A0),D1
00003ADC  E041      6582          asr.w     #8,D1
00003ADE  E241      6583          asr.w     #1,D1
00003AE0  C27C 0007 6584          and.w     #7,D1
00003AE4  48C1      6585          ext.l     D1
00003AE6  2F01      6586          move.l    D1,-(A7)
00003AE8  2042      6587          move.l    D2,A0
00003AEA  3210      6588          move.w    (A0),D1
00003AEC  C27C 0007 6589          and.w     #7,D1
00003AF0  48C1      6590          ext.l     D1
00003AF2  2F01      6591          move.l    D1,-(A7)
00003AF4  4879 0000 6592          pea       @m68kde~1_223.L
00003AF8  7684      
00003AFA  2F0C      6593          move.l    A4,-(A7)
00003AFC  4E95      6594          jsr       (A5)
00003AFE  DEFC 0010 6595          add.w     #16,A7
                    6596   DisassembleInstruction_47:
                    6597   ; strcatInstruction(TempString) ;
00003B02  2F0C      6598          move.l    A4,-(A7)
00003B04  4EB8 0CCC 6599          jsr       _strcatInstruction
00003B08  584F      6600          addq.w    #4,A7
                    6601   DisassembleInstruction_44:
                    6602   ; }
                    6603   ; }
                    6604   ; /////////////////////////////////////////////////////////////////////////////////
                    6605   ; // if instruction is AND
                    6606   ; /////////////////////////////////////////////////////////////////////////////////
                    6607   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xC000))   {
00003B0A  2042      6608          move.l    D2,A0
00003B0C  3010      6609          move.w    (A0),D0
00003B0E  C07C F000 6610          and.w     #61440,D0
00003B12  0C40 C000 6611          cmp.w     #49152,D0
00003B16  662A      6612          bne.s     DisassembleInstruction_50
                    6613   ; InstructionSize = 1;
00003B18  24BC 0000 6614          move.l    #1,(A2)
00003B1C  0001      
                    6615   ; // need to differentiate between AND and ABCD using Mode bits in 5,4,3
                    6616   ; OpMode = (*OpCode >> 4) & (unsigned short int)(0x001F);
00003B1E  2042      6617          move.l    D2,A0
00003B20  3010      6618          move.w    (A0),D0
00003B22  E840      6619          asr.w     #4,D0
00003B24  C07C 001F 6620          and.w     #31,D0
00003B28  3600      6621          move.w    D0,D3
                    6622   ; if(OpMode != (unsigned short int)(0x0010))   {
00003B2A  0C43 0010 6623          cmp.w     #16,D3
00003B2E  6712      6624          beq.s     DisassembleInstruction_50
                    6625   ; strcpyInstruction("AND") ;
00003B30  4879 0000 6626          pea       @m68kde~1_224.L
00003B34  7692      
00003B36  4E93      6627          jsr       (A3)
00003B38  584F      6628          addq.w    #4,A7
                    6629   ; Decode3BitOperandMode(OpCode) ;
00003B3A  2F02      6630          move.l    D2,-(A7)
00003B3C  4EB8 34F8 6631          jsr       _Decode3BitOperandMode
00003B40  584F      6632          addq.w    #4,A7
                    6633   DisassembleInstruction_50:
                    6634   ; }
                    6635   ; }
                    6636   ; /////////////////////////////////////////////////////////////////////////////////
                    6637   ; // if instruction is ANDI to CCR
                    6638   ; /////////////////////////////////////////////////////////////////////////////////
                    6639   ; if(*OpCode == (unsigned short int)(0x023C))   {
00003B42  2042      6640          move.l    D2,A0
00003B44  3010      6641          move.w    (A0),D0
00003B46  0C40 023C 6642          cmp.w     #572,D0
00003B4A  662A      6643          bne.s     DisassembleInstruction_52
                    6644   ; sprintf(Instruction, "ANDI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00003B4C  2042      6645          move.l    D2,A0
00003B4E  3228 0002 6646          move.w    2(A0),D1
00003B52  C27C 00FF 6647          and.w     #255,D1
00003B56  C2BC 0000 6648          and.l     #65535,D1
00003B5A  FFFF      
00003B5C  2F01      6649          move.l    D1,-(A7)
00003B5E  4879 0000 6650          pea       @m68kde~1_225.L
00003B62  7696      
00003B64  4879 0B00 6651          pea       _Instruction.L
00003B68  04E2      
00003B6A  4E95      6652          jsr       (A5)
00003B6C  DEFC 000C 6653          add.w     #12,A7
                    6654   ; InstructionSize = 2;
00003B70  24BC 0000 6655          move.l    #2,(A2)
00003B74  0002      
                    6656   DisassembleInstruction_52:
                    6657   ; }
                    6658   ; /////////////////////////////////////////////////////////////////////////////////
                    6659   ; // if instruction is ASL/ASR/LSL/LSR/ROL/ROR NOTE two versions of this with different OPCodes
                    6660   ; /////////////////////////////////////////////////////////////////////////////////
                    6661   ; if( ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE000)) |   // ASL/ASR
00003B76  2042      6662          move.l    D2,A0
00003B78  3010      6663          move.w    (A0),D0
00003B7A  C07C F018 6664          and.w     #61464,D0
00003B7E  0C40 E000 6665          cmp.w     #57344,D0
00003B82  6604      6666          bne.s     DisassembleInstruction_56
00003B84  7001      6667          moveq     #1,D0
00003B86  6002      6668          bra.s     DisassembleInstruction_57
                    6669   DisassembleInstruction_56:
00003B88  4280      6670          clr.l     D0
                    6671   DisassembleInstruction_57:
00003B8A  2042      6672          move.l    D2,A0
00003B8C  3210      6673          move.w    (A0),D1
00003B8E  C27C FEC0 6674          and.w     #65216,D1
00003B92  0C41 E0C0 6675          cmp.w     #57536,D1
00003B96  6604      6676          bne.s     DisassembleInstruction_58
00003B98  7201      6677          moveq     #1,D1
00003B9A  6002      6678          bra.s     DisassembleInstruction_59
                    6679   DisassembleInstruction_58:
00003B9C  4281      6680          clr.l     D1
                    6681   DisassembleInstruction_59:
00003B9E  8041      6682          or.w      D1,D0
00003BA0  2042      6683          move.l    D2,A0
00003BA2  3210      6684          move.w    (A0),D1
00003BA4  C27C F018 6685          and.w     #61464,D1
00003BA8  0C41 E008 6686          cmp.w     #57352,D1
00003BAC  6604      6687          bne.s     DisassembleInstruction_60
00003BAE  7201      6688          moveq     #1,D1
00003BB0  6002      6689          bra.s     DisassembleInstruction_61
                    6690   DisassembleInstruction_60:
00003BB2  4281      6691          clr.l     D1
                    6692   DisassembleInstruction_61:
00003BB4  8041      6693          or.w      D1,D0
00003BB6  2042      6694          move.l    D2,A0
00003BB8  3210      6695          move.w    (A0),D1
00003BBA  C27C FEC0 6696          and.w     #65216,D1
00003BBE  0C41 E2C0 6697          cmp.w     #58048,D1
00003BC2  6604      6698          bne.s     DisassembleInstruction_62
00003BC4  7201      6699          moveq     #1,D1
00003BC6  6002      6700          bra.s     DisassembleInstruction_63
                    6701   DisassembleInstruction_62:
00003BC8  4281      6702          clr.l     D1
                    6703   DisassembleInstruction_63:
00003BCA  8041      6704          or.w      D1,D0
00003BCC  2042      6705          move.l    D2,A0
00003BCE  3210      6706          move.w    (A0),D1
00003BD0  C27C F018 6707          and.w     #61464,D1
00003BD4  0C41 E018 6708          cmp.w     #57368,D1
00003BD8  6604      6709          bne.s     DisassembleInstruction_64
00003BDA  7201      6710          moveq     #1,D1
00003BDC  6002      6711          bra.s     DisassembleInstruction_65
                    6712   DisassembleInstruction_64:
00003BDE  4281      6713          clr.l     D1
                    6714   DisassembleInstruction_65:
00003BE0  8041      6715          or.w      D1,D0
00003BE2  2042      6716          move.l    D2,A0
00003BE4  3210      6717          move.w    (A0),D1
00003BE6  C27C FEC0 6718          and.w     #65216,D1
00003BEA  0C41 E6C0 6719          cmp.w     #59072,D1
00003BEE  6604      6720          bne.s     DisassembleInstruction_66
00003BF0  7201      6721          moveq     #1,D1
00003BF2  6002      6722          bra.s     DisassembleInstruction_67
                    6723   DisassembleInstruction_66:
00003BF4  4281      6724          clr.l     D1
                    6725   DisassembleInstruction_67:
00003BF6  8041      6726          or.w      D1,D0
00003BF8  2042      6727          move.l    D2,A0
00003BFA  3210      6728          move.w    (A0),D1
00003BFC  C27C F018 6729          and.w     #61464,D1
00003C00  0C41 E010 6730          cmp.w     #57360,D1
00003C04  6604      6731          bne.s     DisassembleInstruction_68
00003C06  7201      6732          moveq     #1,D1
00003C08  6002      6733          bra.s     DisassembleInstruction_69
                    6734   DisassembleInstruction_68:
00003C0A  4281      6735          clr.l     D1
                    6736   DisassembleInstruction_69:
00003C0C  8041      6737          or.w      D1,D0
00003C0E  2042      6738          move.l    D2,A0
00003C10  3210      6739          move.w    (A0),D1
00003C12  C27C FEC0 6740          and.w     #65216,D1
00003C16  0C41 E4C0 6741          cmp.w     #58560,D1
00003C1A  6604      6742          bne.s     DisassembleInstruction_70
00003C1C  7201      6743          moveq     #1,D1
00003C1E  6002      6744          bra.s     DisassembleInstruction_71
                    6745   DisassembleInstruction_70:
00003C20  4281      6746          clr.l     D1
                    6747   DisassembleInstruction_71:
00003C22  8041      6748          or.w      D1,D0
00003C24  6700 0252 6749          beq       DisassembleInstruction_73
                    6750   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE0C0)) |
                    6751   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE008)) |   // LSL/LSR
                    6752   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE2C0)) |
                    6753   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE018)) |   // ROR/ROL
                    6754   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE6C0)) |
                    6755   ; ((*OpCode & (unsigned short int)(0xF018 )) == (unsigned short int)(0xE010)) |   // ROXR/ROXL
                    6756   ; ((*OpCode & (unsigned short int)(0xFEC0 )) == (unsigned short int)(0xE4C0)))
                    6757   ; {
                    6758   ; InstructionSize = 1;
00003C28  24BC 0000 6759          move.l    #1,(A2)
00003C2C  0001      
                    6760   ; // 2nd version e.g. ASR/ASL/LSR/LSL/ROR/ROL/ROXL/ROXR <EA> shift a word 1 bit
                    6761   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0)) // if bits 7,6 == 1,1
00003C2E  2042      6762          move.l    D2,A0
00003C30  3010      6763          move.w    (A0),D0
00003C32  C07C 00C0 6764          and.w     #192,D0
00003C36  0C40 00C0 6765          cmp.w     #192,D0
00003C3A  6600 00EA 6766          bne       DisassembleInstruction_72
                    6767   ; {
                    6768   ; // test direction by testing bit 8
                    6769   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE0C0))    //asr/asl
00003C3E  2042      6770          move.l    D2,A0
00003C40  3010      6771          move.w    (A0),D0
00003C42  C07C FEC0 6772          and.w     #65216,D0
00003C46  0C40 E0C0 6773          cmp.w     #57536,D0
00003C4A  6624      6774          bne.s     DisassembleInstruction_77
                    6775   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C4C  2042      6776          move.l    D2,A0
00003C4E  3010      6777          move.w    (A0),D0
00003C50  C07C 0100 6778          and.w     #256,D0
00003C54  0C40 0100 6779          cmp.w     #256,D0
00003C58  660C      6780          bne.s     DisassembleInstruction_76
                    6781   ; strcpyInstruction("ASL") ;
00003C5A  4879 0000 6782          pea       @m68kde~1_226.L
00003C5E  76A6      
00003C60  4E93      6783          jsr       (A3)
00003C62  584F      6784          addq.w    #4,A7
00003C64  600A      6785          bra.s     DisassembleInstruction_77
                    6786   DisassembleInstruction_76:
                    6787   ; else
                    6788   ; strcpyInstruction("ASR") ;
00003C66  4879 0000 6789          pea       @m68kde~1_227.L
00003C6A  76AA      
00003C6C  4E93      6790          jsr       (A3)
00003C6E  584F      6791          addq.w    #4,A7
                    6792   DisassembleInstruction_77:
                    6793   ; // test direction by testing bit 8
                    6794   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE2C0))    //lsr/lsl
00003C70  2042      6795          move.l    D2,A0
00003C72  3010      6796          move.w    (A0),D0
00003C74  C07C FEC0 6797          and.w     #65216,D0
00003C78  0C40 E2C0 6798          cmp.w     #58048,D0
00003C7C  6624      6799          bne.s     DisassembleInstruction_81
                    6800   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003C7E  2042      6801          move.l    D2,A0
00003C80  3010      6802          move.w    (A0),D0
00003C82  C07C 0100 6803          and.w     #256,D0
00003C86  0C40 0100 6804          cmp.w     #256,D0
00003C8A  660C      6805          bne.s     DisassembleInstruction_80
                    6806   ; strcpyInstruction("LSL") ;
00003C8C  4879 0000 6807          pea       @m68kde~1_228.L
00003C90  76AE      
00003C92  4E93      6808          jsr       (A3)
00003C94  584F      6809          addq.w    #4,A7
00003C96  600A      6810          bra.s     DisassembleInstruction_81
                    6811   DisassembleInstruction_80:
                    6812   ; else
                    6813   ; strcpyInstruction("LSR") ;
00003C98  4879 0000 6814          pea       @m68kde~1_229.L
00003C9C  76B2      
00003C9E  4E93      6815          jsr       (A3)
00003CA0  584F      6816          addq.w    #4,A7
                    6817   DisassembleInstruction_81:
                    6818   ; // test direction by testing bit 8
                    6819   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE6C0))    //ror/rol
00003CA2  2042      6820          move.l    D2,A0
00003CA4  3010      6821          move.w    (A0),D0
00003CA6  C07C FEC0 6822          and.w     #65216,D0
00003CAA  0C40 E6C0 6823          cmp.w     #59072,D0
00003CAE  6624      6824          bne.s     DisassembleInstruction_85
                    6825   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CB0  2042      6826          move.l    D2,A0
00003CB2  3010      6827          move.w    (A0),D0
00003CB4  C07C 0100 6828          and.w     #256,D0
00003CB8  0C40 0100 6829          cmp.w     #256,D0
00003CBC  660C      6830          bne.s     DisassembleInstruction_84
                    6831   ; strcpyInstruction("ROL") ;
00003CBE  4879 0000 6832          pea       @m68kde~1_230.L
00003CC2  76B6      
00003CC4  4E93      6833          jsr       (A3)
00003CC6  584F      6834          addq.w    #4,A7
00003CC8  600A      6835          bra.s     DisassembleInstruction_85
                    6836   DisassembleInstruction_84:
                    6837   ; else
                    6838   ; strcpyInstruction("ROR") ;
00003CCA  4879 0000 6839          pea       @m68kde~1_231.L
00003CCE  76BA      
00003CD0  4E93      6840          jsr       (A3)
00003CD2  584F      6841          addq.w    #4,A7
                    6842   DisassembleInstruction_85:
                    6843   ; // test direction by testing bit 8
                    6844   ; if((*OpCode & (unsigned short int)(0xFEC0)) == (unsigned short int)(0xE4C0))    //roxr/roxl
00003CD4  2042      6845          move.l    D2,A0
00003CD6  3010      6846          move.w    (A0),D0
00003CD8  C07C FEC0 6847          and.w     #65216,D0
00003CDC  0C40 E4C0 6848          cmp.w     #58560,D0
00003CE0  6624      6849          bne.s     DisassembleInstruction_89
                    6850   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003CE2  2042      6851          move.l    D2,A0
00003CE4  3010      6852          move.w    (A0),D0
00003CE6  C07C 0100 6853          and.w     #256,D0
00003CEA  0C40 0100 6854          cmp.w     #256,D0
00003CEE  660C      6855          bne.s     DisassembleInstruction_88
                    6856   ; strcpyInstruction("ROXL") ;
00003CF0  4879 0000 6857          pea       @m68kde~1_232.L
00003CF4  76BE      
00003CF6  4E93      6858          jsr       (A3)
00003CF8  584F      6859          addq.w    #4,A7
00003CFA  600A      6860          bra.s     DisassembleInstruction_89
                    6861   DisassembleInstruction_88:
                    6862   ; else
                    6863   ; strcpyInstruction("ROXR") ;
00003CFC  4879 0000 6864          pea       @m68kde~1_233.L
00003D00  76C4      
00003D02  4E93      6865          jsr       (A3)
00003D04  584F      6866          addq.w    #4,A7
                    6867   DisassembleInstruction_89:
                    6868   ; strcatInstruction("  ") ;
00003D06  4879 0000 6869          pea       @m68kde~1_15.L
00003D0A  623C      
00003D0C  4EB8 0CCC 6870          jsr       _strcatInstruction
00003D10  584F      6871          addq.w    #4,A7
                    6872   ; Decode6BitEA(OpCode,0, 0,0) ;
00003D12  42A7      6873          clr.l     -(A7)
00003D14  42A7      6874          clr.l     -(A7)
00003D16  42A7      6875          clr.l     -(A7)
00003D18  2F02      6876          move.l    D2,-(A7)
00003D1A  4EB8 30D0 6877          jsr       _Decode6BitEA
00003D1E  DEFC 0010 6878          add.w     #16,A7
00003D22  6000 0154 6879          bra       DisassembleInstruction_73
                    6880   DisassembleInstruction_72:
                    6881   ; }
                    6882   ; // first version of above instructions, bit 5 is 0
                    6883   ; else
                    6884   ; {
                    6885   ; // test instruction and direction by testing bits 4,3
                    6886   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0))    //asr/asl
00003D26  2042      6887          move.l    D2,A0
00003D28  3010      6888          move.w    (A0),D0
00003D2A  C07C 0018 6889          and.w     #24,D0
00003D2E  6624      6890          bne.s     DisassembleInstruction_93
                    6891   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D30  2042      6892          move.l    D2,A0
00003D32  3010      6893          move.w    (A0),D0
00003D34  C07C 0100 6894          and.w     #256,D0
00003D38  0C40 0100 6895          cmp.w     #256,D0
00003D3C  660C      6896          bne.s     DisassembleInstruction_92
                    6897   ; strcpyInstruction("ASL") ;
00003D3E  4879 0000 6898          pea       @m68kde~1_226.L
00003D42  76A6      
00003D44  4E93      6899          jsr       (A3)
00003D46  584F      6900          addq.w    #4,A7
00003D48  600A      6901          bra.s     DisassembleInstruction_93
                    6902   DisassembleInstruction_92:
                    6903   ; else
                    6904   ; strcpyInstruction("ASR") ;
00003D4A  4879 0000 6905          pea       @m68kde~1_227.L
00003D4E  76AA      
00003D50  4E93      6906          jsr       (A3)
00003D52  584F      6907          addq.w    #4,A7
                    6908   DisassembleInstruction_93:
                    6909   ; // test instruction and direction by testing bits 4,3
                    6910   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0008))    //lsr/lsl
00003D54  2042      6911          move.l    D2,A0
00003D56  3010      6912          move.w    (A0),D0
00003D58  C07C 0018 6913          and.w     #24,D0
00003D5C  0C40 0008 6914          cmp.w     #8,D0
00003D60  6624      6915          bne.s     DisassembleInstruction_97
                    6916   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D62  2042      6917          move.l    D2,A0
00003D64  3010      6918          move.w    (A0),D0
00003D66  C07C 0100 6919          and.w     #256,D0
00003D6A  0C40 0100 6920          cmp.w     #256,D0
00003D6E  660C      6921          bne.s     DisassembleInstruction_96
                    6922   ; strcpyInstruction("LSL") ;
00003D70  4879 0000 6923          pea       @m68kde~1_228.L
00003D74  76AE      
00003D76  4E93      6924          jsr       (A3)
00003D78  584F      6925          addq.w    #4,A7
00003D7A  600A      6926          bra.s     DisassembleInstruction_97
                    6927   DisassembleInstruction_96:
                    6928   ; else
                    6929   ; strcpyInstruction("LSR") ;
00003D7C  4879 0000 6930          pea       @m68kde~1_229.L
00003D80  76B2      
00003D82  4E93      6931          jsr       (A3)
00003D84  584F      6932          addq.w    #4,A7
                    6933   DisassembleInstruction_97:
                    6934   ; // test instruction and direction by testing bits 4,3
                    6935   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0018))    //ror/rol
00003D86  2042      6936          move.l    D2,A0
00003D88  3010      6937          move.w    (A0),D0
00003D8A  C07C 0018 6938          and.w     #24,D0
00003D8E  0C40 0018 6939          cmp.w     #24,D0
00003D92  6624      6940          bne.s     DisassembleInstruction_101
                    6941   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003D94  2042      6942          move.l    D2,A0
00003D96  3010      6943          move.w    (A0),D0
00003D98  C07C 0100 6944          and.w     #256,D0
00003D9C  0C40 0100 6945          cmp.w     #256,D0
00003DA0  660C      6946          bne.s     DisassembleInstruction_100
                    6947   ; strcpyInstruction("ROL") ;
00003DA2  4879 0000 6948          pea       @m68kde~1_230.L
00003DA6  76B6      
00003DA8  4E93      6949          jsr       (A3)
00003DAA  584F      6950          addq.w    #4,A7
00003DAC  600A      6951          bra.s     DisassembleInstruction_101
                    6952   DisassembleInstruction_100:
                    6953   ; else
                    6954   ; strcpyInstruction("ROR") ;
00003DAE  4879 0000 6955          pea       @m68kde~1_231.L
00003DB2  76BA      
00003DB4  4E93      6956          jsr       (A3)
00003DB6  584F      6957          addq.w    #4,A7
                    6958   DisassembleInstruction_101:
                    6959   ; // test instruction and direction by testing bits 4,3
                    6960   ; if((*OpCode & (unsigned short int)(0x0018)) == (unsigned short int)(0x0010))    //roxr/roxl
00003DB8  2042      6961          move.l    D2,A0
00003DBA  3010      6962          move.w    (A0),D0
00003DBC  C07C 0018 6963          and.w     #24,D0
00003DC0  0C40 0010 6964          cmp.w     #16,D0
00003DC4  6624      6965          bne.s     DisassembleInstruction_105
                    6966   ; if((*OpCode & (unsigned short int)(0x0100)) == (unsigned short int)(0x0100))
00003DC6  2042      6967          move.l    D2,A0
00003DC8  3010      6968          move.w    (A0),D0
00003DCA  C07C 0100 6969          and.w     #256,D0
00003DCE  0C40 0100 6970          cmp.w     #256,D0
00003DD2  660C      6971          bne.s     DisassembleInstruction_104
                    6972   ; strcpyInstruction("ROXL") ;
00003DD4  4879 0000 6973          pea       @m68kde~1_232.L
00003DD8  76BE      
00003DDA  4E93      6974          jsr       (A3)
00003DDC  584F      6975          addq.w    #4,A7
00003DDE  600A      6976          bra.s     DisassembleInstruction_105
                    6977   DisassembleInstruction_104:
                    6978   ; else
                    6979   ; strcpyInstruction("ROXR") ;
00003DE0  4879 0000 6980          pea       @m68kde~1_233.L
00003DE4  76C4      
00003DE6  4E93      6981          jsr       (A3)
00003DE8  584F      6982          addq.w    #4,A7
                    6983   DisassembleInstruction_105:
                    6984   ; Decode2BitOperandSize(*OpCode) ;
00003DEA  2042      6985          move.l    D2,A0
00003DEC  3210      6986          move.w    (A0),D1
00003DEE  C2BC 0000 6987          and.l     #65535,D1
00003DF2  FFFF      
00003DF4  2F01      6988          move.l    D1,-(A7)
00003DF6  4EB8 2E3C 6989          jsr       _Decode2BitOperandSize
00003DFA  584F      6990          addq.w    #4,A7
                    6991   ; if((*OpCode & (unsigned short int)(0x0020)) == (unsigned short int)(0)) {   // if shift count defined by #value (bit 5 = 0), e.g. asl #3,d0
00003DFC  2042      6992          move.l    D2,A0
00003DFE  3010      6993          move.w    (A0),D0
00003E00  C07C 0020 6994          and.w     #32,D0
00003E04  6600 0038 6995          bne       DisassembleInstruction_106
                    6996   ; sprintf(TempString,"#$%X,D%X",
00003E08  2042      6997          move.l    D2,A0
00003E0A  3210      6998          move.w    (A0),D1
00003E0C  C27C 0007 6999          and.w     #7,D1
00003E10  C2BC 0000 7000          and.l     #65535,D1
00003E14  FFFF      
00003E16  2F01      7001          move.l    D1,-(A7)
00003E18  2042      7002          move.l    D2,A0
00003E1A  3210      7003          move.w    (A0),D1
00003E1C  E041      7004          asr.w     #8,D1
00003E1E  E241      7005          asr.w     #1,D1
00003E20  C27C 0007 7006          and.w     #7,D1
00003E24  C2BC 0000 7007          and.l     #65535,D1
00003E28  FFFF      
00003E2A  2F01      7008          move.l    D1,-(A7)
00003E2C  4879 0000 7009          pea       @m68kde~1_234.L
00003E30  76CA      
00003E32  2F0C      7010          move.l    A4,-(A7)
00003E34  4E95      7011          jsr       (A5)
00003E36  DEFC 0010 7012          add.w     #16,A7
00003E3A  6000 0034 7013          bra       DisassembleInstruction_107
                    7014   DisassembleInstruction_106:
                    7015   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7016   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7017   ; }
                    7018   ; else {                                                                      // if shift is for example ASR D1,D2
                    7019   ; sprintf(TempString,"D%X,D%X",
00003E3E  2042      7020          move.l    D2,A0
00003E40  3210      7021          move.w    (A0),D1
00003E42  C27C 0007 7022          and.w     #7,D1
00003E46  C2BC 0000 7023          and.l     #65535,D1
00003E4A  FFFF      
00003E4C  2F01      7024          move.l    D1,-(A7)
00003E4E  2042      7025          move.l    D2,A0
00003E50  3210      7026          move.w    (A0),D1
00003E52  E041      7027          asr.w     #8,D1
00003E54  E241      7028          asr.w     #1,D1
00003E56  C27C 0007 7029          and.w     #7,D1
00003E5A  C2BC 0000 7030          and.l     #65535,D1
00003E5E  FFFF      
00003E60  2F01      7031          move.l    D1,-(A7)
00003E62  4879 0000 7032          pea       @m68kde~1_222.L
00003E66  767C      
00003E68  2F0C      7033          move.l    A4,-(A7)
00003E6A  4E95      7034          jsr       (A5)
00003E6C  DEFC 0010 7035          add.w     #16,A7
                    7036   DisassembleInstruction_107:
                    7037   ; ((*OpCode >> 9) & (unsigned short int)(0x0007)),
                    7038   ; (*OpCode & (unsigned short int)(0x0007))) ;
                    7039   ; }
                    7040   ; strcatInstruction(TempString) ;
00003E70  2F0C      7041          move.l    A4,-(A7)
00003E72  4EB8 0CCC 7042          jsr       _strcatInstruction
00003E76  584F      7043          addq.w    #4,A7
                    7044   DisassembleInstruction_73:
                    7045   ; }
                    7046   ; }
                    7047   ; /////////////////////////////////////////////////////////////////////////////////
                    7048   ; // if instruction is BCC and BSR and BRA
                    7049   ; /////////////////////////////////////////////////////////////////////////////////
                    7050   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x6000))
00003E78  2042      7051          move.l    D2,A0
00003E7A  3010      7052          move.w    (A0),D0
00003E7C  C07C F000 7053          and.w     #61440,D0
00003E80  0C40 6000 7054          cmp.w     #24576,D0
00003E84  6600 00A0 7055          bne       DisassembleInstruction_108
                    7056   ; {
                    7057   ; InstructionSize = 1;
00003E88  24BC 0000 7058          move.l    #1,(A2)
00003E8C  0001      
                    7059   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00003E8E  2042      7060          move.l    D2,A0
00003E90  3010      7061          move.w    (A0),D0
00003E92  E040      7062          asr.w     #8,D0
00003E94  C07C 000F 7063          and.w     #15,D0
00003E98  1D40 FFE9 7064          move.b    D0,-23(A6)
                    7065   ; strcpyInstruction("B") ;
00003E9C  4879 0000 7066          pea       @m68kde~1_235.L
00003EA0  76D4      
00003EA2  4E93      7067          jsr       (A3)
00003EA4  584F      7068          addq.w    #4,A7
                    7069   ; DecodeBranchCondition(Condition) ;
00003EA6  122E FFE9 7070          move.b    -23(A6),D1
00003EAA  C27C 00FF 7071          and.w     #255,D1
00003EAE  C2BC 0000 7072          and.l     #65535,D1
00003EB2  FFFF      
00003EB4  2F01      7073          move.l    D1,-(A7)
00003EB6  4EB8 358E 7074          jsr       _DecodeBranchCondition
00003EBA  584F      7075          addq.w    #4,A7
                    7076   ; Displacement8Bit = (*OpCode & (unsigned short int)(0xFF)) ;
00003EBC  2042      7077          move.l    D2,A0
00003EBE  3010      7078          move.w    (A0),D0
00003EC0  C07C 00FF 7079          and.w     #255,D0
00003EC4  1D40 FFFB 7080          move.b    D0,-5(A6)
                    7081   ; if(Displacement8Bit == (unsigned short int)(0))  {           // if 16 bit displacement
00003EC8  102E FFFB 7082          move.b    -5(A6),D0
00003ECC  4880      7083          ext.w     D0
00003ECE  4A40      7084          tst.w     D0
00003ED0  662A      7085          bne.s     DisassembleInstruction_110
                    7086   ; sprintf(TempString, "$%X", (int)(OpCode) + (int)(OpCode[1]) +  2) ;
00003ED2  2202      7087          move.l    D2,D1
00003ED4  2042      7088          move.l    D2,A0
00003ED6  2F00      7089          move.l    D0,-(A7)
00003ED8  3028 0002 7090          move.w    2(A0),D0
00003EDC  48C0      7091          ext.l     D0
00003EDE  D280      7092          add.l     D0,D1
00003EE0  201F      7093          move.l    (A7)+,D0
00003EE2  5481      7094          addq.l    #2,D1
00003EE4  2F01      7095          move.l    D1,-(A7)
00003EE6  4879 0000 7096          pea       @m68kde~1_185.L
00003EEA  75A0      
00003EEC  2F0C      7097          move.l    A4,-(A7)
00003EEE  4E95      7098          jsr       (A5)
00003EF0  DEFC 000C 7099          add.w     #12,A7
                    7100   ; InstructionSize = 2 ;
00003EF4  24BC 0000 7101          move.l    #2,(A2)
00003EF8  0002      
00003EFA  6022      7102          bra.s     DisassembleInstruction_111
                    7103   DisassembleInstruction_110:
                    7104   ; }
                    7105   ; else
                    7106   ; sprintf(TempString, "$%X", (int)(OpCode) + Displacement8Bit + 2) ;           // 8 bit displacement
00003EFC  2202      7107          move.l    D2,D1
00003EFE  2F00      7108          move.l    D0,-(A7)
00003F00  102E FFFB 7109          move.b    -5(A6),D0
00003F04  4880      7110          ext.w     D0
00003F06  48C0      7111          ext.l     D0
00003F08  D280      7112          add.l     D0,D1
00003F0A  201F      7113          move.l    (A7)+,D0
00003F0C  5481      7114          addq.l    #2,D1
00003F0E  2F01      7115          move.l    D1,-(A7)
00003F10  4879 0000 7116          pea       @m68kde~1_185.L
00003F14  75A0      
00003F16  2F0C      7117          move.l    A4,-(A7)
00003F18  4E95      7118          jsr       (A5)
00003F1A  DEFC 000C 7119          add.w     #12,A7
                    7120   DisassembleInstruction_111:
                    7121   ; strcatInstruction(TempString) ;
00003F1E  2F0C      7122          move.l    A4,-(A7)
00003F20  4EB8 0CCC 7123          jsr       _strcatInstruction
00003F24  584F      7124          addq.w    #4,A7
                    7125   DisassembleInstruction_108:
                    7126   ; }
                    7127   ; /////////////////////////////////////////////////////////////////////////////////
                    7128   ; // if instruction is BCHG dn,<EA>
                    7129   ; /////////////////////////////////////////////////////////////////////////////////
                    7130   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0140))   {
00003F26  2042      7131          move.l    D2,A0
00003F28  3010      7132          move.w    (A0),D0
00003F2A  C07C F1C0 7133          and.w     #61888,D0
00003F2E  0C40 0140 7134          cmp.w     #320,D0
00003F32  6600 004C 7135          bne       DisassembleInstruction_112
                    7136   ; InstructionSize = 1;
00003F36  24BC 0000 7137          move.l    #1,(A2)
00003F3A  0001      
                    7138   ; strcpyInstruction("BCHG ") ;
00003F3C  4879 0000 7139          pea       @m68kde~1_236.L
00003F40  76D6      
00003F42  4E93      7140          jsr       (A3)
00003F44  584F      7141          addq.w    #4,A7
                    7142   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003F46  2042      7143          move.l    D2,A0
00003F48  3210      7144          move.w    (A0),D1
00003F4A  E041      7145          asr.w     #8,D1
00003F4C  E241      7146          asr.w     #1,D1
00003F4E  C27C 0007 7147          and.w     #7,D1
00003F52  C2BC 0000 7148          and.l     #65535,D1
00003F56  FFFF      
00003F58  2F01      7149          move.l    D1,-(A7)
00003F5A  4879 0000 7150          pea       @m68kde~1_237.L
00003F5E  76DC      
00003F60  2F0C      7151          move.l    A4,-(A7)
00003F62  4E95      7152          jsr       (A5)
00003F64  DEFC 000C 7153          add.w     #12,A7
                    7154   ; strcatInstruction(TempString) ;
00003F68  2F0C      7155          move.l    A4,-(A7)
00003F6A  4EB8 0CCC 7156          jsr       _strcatInstruction
00003F6E  584F      7157          addq.w    #4,A7
                    7158   ; Decode6BitEA(OpCode,0,0,0) ;
00003F70  42A7      7159          clr.l     -(A7)
00003F72  42A7      7160          clr.l     -(A7)
00003F74  42A7      7161          clr.l     -(A7)
00003F76  2F02      7162          move.l    D2,-(A7)
00003F78  4EB8 30D0 7163          jsr       _Decode6BitEA
00003F7C  DEFC 0010 7164          add.w     #16,A7
                    7165   DisassembleInstruction_112:
                    7166   ; }
                    7167   ; /////////////////////////////////////////////////////////////////////////////////
                    7168   ; // if instruction is BCHG #data,<EA>
                    7169   ; /////////////////////////////////////////////////////////////////////////////////
                    7170   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0840))   {
00003F80  2042      7171          move.l    D2,A0
00003F82  3010      7172          move.w    (A0),D0
00003F84  C07C FFC0 7173          and.w     #65472,D0
00003F88  0C40 0840 7174          cmp.w     #2112,D0
00003F8C  6600 0044 7175          bne       DisassembleInstruction_114
                    7176   ; strcpyInstruction("BCHG ") ;
00003F90  4879 0000 7177          pea       @m68kde~1_236.L
00003F94  76D6      
00003F96  4E93      7178          jsr       (A3)
00003F98  584F      7179          addq.w    #4,A7
                    7180   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00003F9A  2042      7181          move.l    D2,A0
00003F9C  3228 0002 7182          move.w    2(A0),D1
00003FA0  48C1      7183          ext.l     D1
00003FA2  2F01      7184          move.l    D1,-(A7)
00003FA4  4879 0000 7185          pea       @m68kde~1_238.L
00003FA8  76E2      
00003FAA  2F0C      7186          move.l    A4,-(A7)
00003FAC  4E95      7187          jsr       (A5)
00003FAE  DEFC 000C 7188          add.w     #12,A7
                    7189   ; InstructionSize = 2 ;
00003FB2  24BC 0000 7190          move.l    #2,(A2)
00003FB6  0002      
                    7191   ; strcatInstruction(TempString) ;
00003FB8  2F0C      7192          move.l    A4,-(A7)
00003FBA  4EB8 0CCC 7193          jsr       _strcatInstruction
00003FBE  584F      7194          addq.w    #4,A7
                    7195   ; Decode6BitEA(OpCode,0,1,0) ;
00003FC0  42A7      7196          clr.l     -(A7)
00003FC2  4878 0001 7197          pea       1
00003FC6  42A7      7198          clr.l     -(A7)
00003FC8  2F02      7199          move.l    D2,-(A7)
00003FCA  4EB8 30D0 7200          jsr       _Decode6BitEA
00003FCE  DEFC 0010 7201          add.w     #16,A7
                    7202   DisassembleInstruction_114:
                    7203   ; }
                    7204   ; /////////////////////////////////////////////////////////////////////////////////
                    7205   ; // if instruction is BCLR  dn,<EA>
                    7206   ; /////////////////////////////////////////////////////////////////////////////////
                    7207   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0180))   {
00003FD2  2042      7208          move.l    D2,A0
00003FD4  3010      7209          move.w    (A0),D0
00003FD6  C07C F1C0 7210          and.w     #61888,D0
00003FDA  0C40 0180 7211          cmp.w     #384,D0
00003FDE  6600 004C 7212          bne       DisassembleInstruction_116
                    7213   ; InstructionSize = 1;
00003FE2  24BC 0000 7214          move.l    #1,(A2)
00003FE6  0001      
                    7215   ; strcpyInstruction("BCLR ") ;
00003FE8  4879 0000 7216          pea       @m68kde~1_239.L
00003FEC  76E8      
00003FEE  4E93      7217          jsr       (A3)
00003FF0  584F      7218          addq.w    #4,A7
                    7219   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00003FF2  2042      7220          move.l    D2,A0
00003FF4  3210      7221          move.w    (A0),D1
00003FF6  E041      7222          asr.w     #8,D1
00003FF8  E241      7223          asr.w     #1,D1
00003FFA  C27C 0007 7224          and.w     #7,D1
00003FFE  C2BC 0000 7225          and.l     #65535,D1
00004002  FFFF      
00004004  2F01      7226          move.l    D1,-(A7)
00004006  4879 0000 7227          pea       @m68kde~1_237.L
0000400A  76DC      
0000400C  2F0C      7228          move.l    A4,-(A7)
0000400E  4E95      7229          jsr       (A5)
00004010  DEFC 000C 7230          add.w     #12,A7
                    7231   ; strcatInstruction(TempString) ;
00004014  2F0C      7232          move.l    A4,-(A7)
00004016  4EB8 0CCC 7233          jsr       _strcatInstruction
0000401A  584F      7234          addq.w    #4,A7
                    7235   ; Decode6BitEA(OpCode,0,0,0) ;
0000401C  42A7      7236          clr.l     -(A7)
0000401E  42A7      7237          clr.l     -(A7)
00004020  42A7      7238          clr.l     -(A7)
00004022  2F02      7239          move.l    D2,-(A7)
00004024  4EB8 30D0 7240          jsr       _Decode6BitEA
00004028  DEFC 0010 7241          add.w     #16,A7
                    7242   DisassembleInstruction_116:
                    7243   ; }
                    7244   ; /////////////////////////////////////////////////////////////////////////////////
                    7245   ; // if instruction is BCLR #data,<EA>
                    7246   ; /////////////////////////////////////////////////////////////////////////////////
                    7247   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0880))   {
0000402C  2042      7248          move.l    D2,A0
0000402E  3010      7249          move.w    (A0),D0
00004030  C07C FFC0 7250          and.w     #65472,D0
00004034  0C40 0880 7251          cmp.w     #2176,D0
00004038  6600 0044 7252          bne       DisassembleInstruction_118
                    7253   ; strcpyInstruction("BCLR ") ;
0000403C  4879 0000 7254          pea       @m68kde~1_239.L
00004040  76E8      
00004042  4E93      7255          jsr       (A3)
00004044  584F      7256          addq.w    #4,A7
                    7257   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
00004046  2042      7258          move.l    D2,A0
00004048  3228 0002 7259          move.w    2(A0),D1
0000404C  48C1      7260          ext.l     D1
0000404E  2F01      7261          move.l    D1,-(A7)
00004050  4879 0000 7262          pea       @m68kde~1_238.L
00004054  76E2      
00004056  2F0C      7263          move.l    A4,-(A7)
00004058  4E95      7264          jsr       (A5)
0000405A  DEFC 000C 7265          add.w     #12,A7
                    7266   ; InstructionSize = 2 ;
0000405E  24BC 0000 7267          move.l    #2,(A2)
00004062  0002      
                    7268   ; strcatInstruction(TempString) ;
00004064  2F0C      7269          move.l    A4,-(A7)
00004066  4EB8 0CCC 7270          jsr       _strcatInstruction
0000406A  584F      7271          addq.w    #4,A7
                    7272   ; Decode6BitEA(OpCode,0,1,0) ;
0000406C  42A7      7273          clr.l     -(A7)
0000406E  4878 0001 7274          pea       1
00004072  42A7      7275          clr.l     -(A7)
00004074  2F02      7276          move.l    D2,-(A7)
00004076  4EB8 30D0 7277          jsr       _Decode6BitEA
0000407A  DEFC 0010 7278          add.w     #16,A7
                    7279   DisassembleInstruction_118:
                    7280   ; }
                    7281   ; /////////////////////////////////////////////////////////////////////////////////
                    7282   ; // if instruction is BSET dn,<EA>
                    7283   ; /////////////////////////////////////////////////////////////////////////////////
                    7284   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x01C0))   {
0000407E  2042      7285          move.l    D2,A0
00004080  3010      7286          move.w    (A0),D0
00004082  C07C F1C0 7287          and.w     #61888,D0
00004086  0C40 01C0 7288          cmp.w     #448,D0
0000408A  6600 004C 7289          bne       DisassembleInstruction_120
                    7290   ; InstructionSize = 1;
0000408E  24BC 0000 7291          move.l    #1,(A2)
00004092  0001      
                    7292   ; strcpyInstruction("BSET ") ;
00004094  4879 0000 7293          pea       @m68kde~1_240.L
00004098  76EE      
0000409A  4E93      7294          jsr       (A3)
0000409C  584F      7295          addq.w    #4,A7
                    7296   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000409E  2042      7297          move.l    D2,A0
000040A0  3210      7298          move.w    (A0),D1
000040A2  E041      7299          asr.w     #8,D1
000040A4  E241      7300          asr.w     #1,D1
000040A6  C27C 0007 7301          and.w     #7,D1
000040AA  C2BC 0000 7302          and.l     #65535,D1
000040AE  FFFF      
000040B0  2F01      7303          move.l    D1,-(A7)
000040B2  4879 0000 7304          pea       @m68kde~1_237.L
000040B6  76DC      
000040B8  2F0C      7305          move.l    A4,-(A7)
000040BA  4E95      7306          jsr       (A5)
000040BC  DEFC 000C 7307          add.w     #12,A7
                    7308   ; strcatInstruction(TempString) ;
000040C0  2F0C      7309          move.l    A4,-(A7)
000040C2  4EB8 0CCC 7310          jsr       _strcatInstruction
000040C6  584F      7311          addq.w    #4,A7
                    7312   ; Decode6BitEA(OpCode,0,0,0) ;
000040C8  42A7      7313          clr.l     -(A7)
000040CA  42A7      7314          clr.l     -(A7)
000040CC  42A7      7315          clr.l     -(A7)
000040CE  2F02      7316          move.l    D2,-(A7)
000040D0  4EB8 30D0 7317          jsr       _Decode6BitEA
000040D4  DEFC 0010 7318          add.w     #16,A7
                    7319   DisassembleInstruction_120:
                    7320   ; }
                    7321   ; /////////////////////////////////////////////////////////////////////////////////
                    7322   ; // if instruction is BSET #data,<EA>
                    7323   ; /////////////////////////////////////////////////////////////////////////////////
                    7324   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x08C0))   {
000040D8  2042      7325          move.l    D2,A0
000040DA  3010      7326          move.w    (A0),D0
000040DC  C07C FFC0 7327          and.w     #65472,D0
000040E0  0C40 08C0 7328          cmp.w     #2240,D0
000040E4  6600 0044 7329          bne       DisassembleInstruction_122
                    7330   ; strcpyInstruction("BSET ") ;
000040E8  4879 0000 7331          pea       @m68kde~1_240.L
000040EC  76EE      
000040EE  4E93      7332          jsr       (A3)
000040F0  584F      7333          addq.w    #4,A7
                    7334   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
000040F2  2042      7335          move.l    D2,A0
000040F4  3228 0002 7336          move.w    2(A0),D1
000040F8  48C1      7337          ext.l     D1
000040FA  2F01      7338          move.l    D1,-(A7)
000040FC  4879 0000 7339          pea       @m68kde~1_238.L
00004100  76E2      
00004102  2F0C      7340          move.l    A4,-(A7)
00004104  4E95      7341          jsr       (A5)
00004106  DEFC 000C 7342          add.w     #12,A7
                    7343   ; InstructionSize = 2 ;
0000410A  24BC 0000 7344          move.l    #2,(A2)
0000410E  0002      
                    7345   ; strcatInstruction(TempString) ;
00004110  2F0C      7346          move.l    A4,-(A7)
00004112  4EB8 0CCC 7347          jsr       _strcatInstruction
00004116  584F      7348          addq.w    #4,A7
                    7349   ; Decode6BitEA(OpCode,0,1,0) ;
00004118  42A7      7350          clr.l     -(A7)
0000411A  4878 0001 7351          pea       1
0000411E  42A7      7352          clr.l     -(A7)
00004120  2F02      7353          move.l    D2,-(A7)
00004122  4EB8 30D0 7354          jsr       _Decode6BitEA
00004126  DEFC 0010 7355          add.w     #16,A7
                    7356   DisassembleInstruction_122:
                    7357   ; }
                    7358   ; /////////////////////////////////////////////////////////////////////////////////
                    7359   ; // if instruction is BTST dn,<EA>
                    7360   ; /////////////////////////////////////////////////////////////////////////////////
                    7361   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x0100))   {
0000412A  2042      7362          move.l    D2,A0
0000412C  3010      7363          move.w    (A0),D0
0000412E  C07C F1C0 7364          and.w     #61888,D0
00004132  0C40 0100 7365          cmp.w     #256,D0
00004136  6600 004C 7366          bne       DisassembleInstruction_124
                    7367   ; InstructionSize = 1;
0000413A  24BC 0000 7368          move.l    #1,(A2)
0000413E  0001      
                    7369   ; strcpyInstruction("BTST ") ;
00004140  4879 0000 7370          pea       @m68kde~1_241.L
00004144  76F4      
00004146  4E93      7371          jsr       (A3)
00004148  584F      7372          addq.w    #4,A7
                    7373   ; sprintf(TempString, "D%d,", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
0000414A  2042      7374          move.l    D2,A0
0000414C  3210      7375          move.w    (A0),D1
0000414E  E041      7376          asr.w     #8,D1
00004150  E241      7377          asr.w     #1,D1
00004152  C27C 0007 7378          and.w     #7,D1
00004156  C2BC 0000 7379          and.l     #65535,D1
0000415A  FFFF      
0000415C  2F01      7380          move.l    D1,-(A7)
0000415E  4879 0000 7381          pea       @m68kde~1_237.L
00004162  76DC      
00004164  2F0C      7382          move.l    A4,-(A7)
00004166  4E95      7383          jsr       (A5)
00004168  DEFC 000C 7384          add.w     #12,A7
                    7385   ; strcatInstruction(TempString) ;
0000416C  2F0C      7386          move.l    A4,-(A7)
0000416E  4EB8 0CCC 7387          jsr       _strcatInstruction
00004172  584F      7388          addq.w    #4,A7
                    7389   ; Decode6BitEA(OpCode,0,0,0) ;
00004174  42A7      7390          clr.l     -(A7)
00004176  42A7      7391          clr.l     -(A7)
00004178  42A7      7392          clr.l     -(A7)
0000417A  2F02      7393          move.l    D2,-(A7)
0000417C  4EB8 30D0 7394          jsr       _Decode6BitEA
00004180  DEFC 0010 7395          add.w     #16,A7
                    7396   DisassembleInstruction_124:
                    7397   ; }
                    7398   ; /////////////////////////////////////////////////////////////////////////////////
                    7399   ; // if instruction is BTST #data,<EA>
                    7400   ; /////////////////////////////////////////////////////////////////////////////////
                    7401   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x0800))   {
00004184  2042      7402          move.l    D2,A0
00004186  3010      7403          move.w    (A0),D0
00004188  C07C FFC0 7404          and.w     #65472,D0
0000418C  0C40 0800 7405          cmp.w     #2048,D0
00004190  6600 0044 7406          bne       DisassembleInstruction_126
                    7407   ; strcpyInstruction("BTST ") ;
00004194  4879 0000 7408          pea       @m68kde~1_241.L
00004198  76F4      
0000419A  4E93      7409          jsr       (A3)
0000419C  584F      7410          addq.w    #4,A7
                    7411   ; sprintf(TempString, "#$%X,", OpCode[1]) ;
0000419E  2042      7412          move.l    D2,A0
000041A0  3228 0002 7413          move.w    2(A0),D1
000041A4  48C1      7414          ext.l     D1
000041A6  2F01      7415          move.l    D1,-(A7)
000041A8  4879 0000 7416          pea       @m68kde~1_238.L
000041AC  76E2      
000041AE  2F0C      7417          move.l    A4,-(A7)
000041B0  4E95      7418          jsr       (A5)
000041B2  DEFC 000C 7419          add.w     #12,A7
                    7420   ; InstructionSize = 2 ;
000041B6  24BC 0000 7421          move.l    #2,(A2)
000041BA  0002      
                    7422   ; strcatInstruction(TempString) ;
000041BC  2F0C      7423          move.l    A4,-(A7)
000041BE  4EB8 0CCC 7424          jsr       _strcatInstruction
000041C2  584F      7425          addq.w    #4,A7
                    7426   ; Decode6BitEA(OpCode,0,1,0) ;
000041C4  42A7      7427          clr.l     -(A7)
000041C6  4878 0001 7428          pea       1
000041CA  42A7      7429          clr.l     -(A7)
000041CC  2F02      7430          move.l    D2,-(A7)
000041CE  4EB8 30D0 7431          jsr       _Decode6BitEA
000041D2  DEFC 0010 7432          add.w     #16,A7
                    7433   DisassembleInstruction_126:
                    7434   ; }
                    7435   ; /////////////////////////////////////////////////////////////////////////////////
                    7436   ; // if instruction is CHK.W <EA>,DN
                    7437   ; /////////////////////////////////////////////////////////////////////////////////
                    7438   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x4180))   {
000041D6  2042      7439          move.l    D2,A0
000041D8  3010      7440          move.w    (A0),D0
000041DA  C07C F1C0 7441          and.w     #61888,D0
000041DE  0C40 4180 7442          cmp.w     #16768,D0
000041E2  6600 004C 7443          bne       DisassembleInstruction_128
                    7444   ; InstructionSize = 1;
000041E6  24BC 0000 7445          move.l    #1,(A2)
000041EA  0001      
                    7446   ; strcpyInstruction("CHK ") ;
000041EC  4879 0000 7447          pea       @m68kde~1_242.L
000041F0  76FA      
000041F2  4E93      7448          jsr       (A3)
000041F4  584F      7449          addq.w    #4,A7
                    7450   ; Decode6BitEA(OpCode,0,0,0) ;
000041F6  42A7      7451          clr.l     -(A7)
000041F8  42A7      7452          clr.l     -(A7)
000041FA  42A7      7453          clr.l     -(A7)
000041FC  2F02      7454          move.l    D2,-(A7)
000041FE  4EB8 30D0 7455          jsr       _Decode6BitEA
00004202  DEFC 0010 7456          add.w     #16,A7
                    7457   ; sprintf(TempString, ",D%d", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
00004206  2042      7458          move.l    D2,A0
00004208  3210      7459          move.w    (A0),D1
0000420A  E041      7460          asr.w     #8,D1
0000420C  E241      7461          asr.w     #1,D1
0000420E  C27C 0007 7462          and.w     #7,D1
00004212  C2BC 0000 7463          and.l     #65535,D1
00004216  FFFF      
00004218  2F01      7464          move.l    D1,-(A7)
0000421A  4879 0000 7465          pea       @m68kde~1_243.L
0000421E  7700      
00004220  2F0C      7466          move.l    A4,-(A7)
00004222  4E95      7467          jsr       (A5)
00004224  DEFC 000C 7468          add.w     #12,A7
                    7469   ; strcatInstruction(TempString) ;
00004228  2F0C      7470          move.l    A4,-(A7)
0000422A  4EB8 0CCC 7471          jsr       _strcatInstruction
0000422E  584F      7472          addq.w    #4,A7
                    7473   DisassembleInstruction_128:
                    7474   ; }
                    7475   ; /////////////////////////////////////////////////////////////////////////////////
                    7476   ; // if instruction is CLR <EA>
                    7477   ; /////////////////////////////////////////////////////////////////////////////////
                    7478   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4200))   {
00004230  2042      7479          move.l    D2,A0
00004232  3010      7480          move.w    (A0),D0
00004234  C07C FF00 7481          and.w     #65280,D0
00004238  0C40 4200 7482          cmp.w     #16896,D0
0000423C  6600 0034 7483          bne       DisassembleInstruction_130
                    7484   ; InstructionSize = 1;
00004240  24BC 0000 7485          move.l    #1,(A2)
00004244  0001      
                    7486   ; strcpyInstruction("CLR") ;
00004246  4879 0000 7487          pea       @m68kde~1_244.L
0000424A  7706      
0000424C  4E93      7488          jsr       (A3)
0000424E  584F      7489          addq.w    #4,A7
                    7490   ; Decode2BitOperandSize(*OpCode) ;
00004250  2042      7491          move.l    D2,A0
00004252  3210      7492          move.w    (A0),D1
00004254  C2BC 0000 7493          and.l     #65535,D1
00004258  FFFF      
0000425A  2F01      7494          move.l    D1,-(A7)
0000425C  4EB8 2E3C 7495          jsr       _Decode2BitOperandSize
00004260  584F      7496          addq.w    #4,A7
                    7497   ; Decode6BitEA(OpCode,0,0,0) ;
00004262  42A7      7498          clr.l     -(A7)
00004264  42A7      7499          clr.l     -(A7)
00004266  42A7      7500          clr.l     -(A7)
00004268  2F02      7501          move.l    D2,-(A7)
0000426A  4EB8 30D0 7502          jsr       _Decode6BitEA
0000426E  DEFC 0010 7503          add.w     #16,A7
                    7504   DisassembleInstruction_130:
                    7505   ; }
                    7506   ; /////////////////////////////////////////////////////////////////////////////////
                    7507   ; // if instruction is CMP, CMPA
                    7508   ; /////////////////////////////////////////////////////////////////////////////////
                    7509   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))
00004272  2042      7510          move.l    D2,A0
00004274  3010      7511          move.w    (A0),D0
00004276  C07C F000 7512          and.w     #61440,D0
0000427A  0C40 B000 7513          cmp.w     #45056,D0
0000427E  6600 008C 7514          bne       DisassembleInstruction_135
                    7515   ; {
                    7516   ; InstructionSize = 1;
00004282  24BC 0000 7517          move.l    #1,(A2)
00004286  0001      
                    7518   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004288  2042      7519          move.l    D2,A0
0000428A  3010      7520          move.w    (A0),D0
0000428C  EC40      7521          asr.w     #6,D0
0000428E  C07C 0007 7522          and.w     #7,D0
00004292  3600      7523          move.w    D0,D3
                    7524   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))    {
00004294  0C43 0003 7525          cmp.w     #3,D3
00004298  6708      7526          beq.s     DisassembleInstruction_136
0000429A  0C43 0007 7527          cmp.w     #7,D3
0000429E  6600 005A 7528          bne       DisassembleInstruction_134
                    7529   DisassembleInstruction_136:
                    7530   ; if(OpMode == (unsigned short int)(0x0003))
000042A2  0C43 0003 7531          cmp.w     #3,D3
000042A6  660C      7532          bne.s     DisassembleInstruction_137
                    7533   ; strcpyInstruction("CMPA.W ") ;
000042A8  4879 0000 7534          pea       @m68kde~1_245.L
000042AC  770A      
000042AE  4E93      7535          jsr       (A3)
000042B0  584F      7536          addq.w    #4,A7
000042B2  600A      7537          bra.s     DisassembleInstruction_138
                    7538   DisassembleInstruction_137:
                    7539   ; else
                    7540   ; strcpyInstruction("CMPA.L ") ;
000042B4  4879 0000 7541          pea       @m68kde~1_246.L
000042B8  7712      
000042BA  4E93      7542          jsr       (A3)
000042BC  584F      7543          addq.w    #4,A7
                    7544   DisassembleInstruction_138:
                    7545   ; Decode6BitEA(OpCode,0,0,0) ;
000042BE  42A7      7546          clr.l     -(A7)
000042C0  42A7      7547          clr.l     -(A7)
000042C2  42A7      7548          clr.l     -(A7)
000042C4  2F02      7549          move.l    D2,-(A7)
000042C6  4EB8 30D0 7550          jsr       _Decode6BitEA
000042CA  DEFC 0010 7551          add.w     #16,A7
                    7552   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x0007))) ;
000042CE  2042      7553          move.l    D2,A0
000042D0  3210      7554          move.w    (A0),D1
000042D2  E041      7555          asr.w     #8,D1
000042D4  E241      7556          asr.w     #1,D1
000042D6  C27C 0007 7557          and.w     #7,D1
000042DA  C2BC 0000 7558          and.l     #65535,D1
000042DE  FFFF      
000042E0  2F01      7559          move.l    D1,-(A7)
000042E2  4879 0000 7560          pea       @m68kde~1_247.L
000042E6  771A      
000042E8  2F0C      7561          move.l    A4,-(A7)
000042EA  4E95      7562          jsr       (A5)
000042EC  DEFC 000C 7563          add.w     #12,A7
                    7564   ; strcatInstruction(TempString) ;
000042F0  2F0C      7565          move.l    A4,-(A7)
000042F2  4EB8 0CCC 7566          jsr       _strcatInstruction
000042F6  584F      7567          addq.w    #4,A7
000042F8  6012      7568          bra.s     DisassembleInstruction_135
                    7569   DisassembleInstruction_134:
                    7570   ; }
                    7571   ; else {
                    7572   ; strcpyInstruction("CMP") ;
000042FA  4879 0000 7573          pea       @m68kde~1_248.L
000042FE  7720      
00004300  4E93      7574          jsr       (A3)
00004302  584F      7575          addq.w    #4,A7
                    7576   ; Decode3BitOperandMode(OpCode) ;
00004304  2F02      7577          move.l    D2,-(A7)
00004306  4EB8 34F8 7578          jsr       _Decode3BitOperandMode
0000430A  584F      7579          addq.w    #4,A7
                    7580   DisassembleInstruction_135:
                    7581   ; }
                    7582   ; }
                    7583   ; /////////////////////////////////////////////////////////////////////////////////
                    7584   ; // if instruction is CMPM
                    7585   ; /////////////////////////////////////////////////////////////////////////////////
                    7586   ; if((*OpCode & (unsigned short int)(0xF138 )) == (unsigned short int)(0xB108))
0000430C  2042      7587          move.l    D2,A0
0000430E  3010      7588          move.w    (A0),D0
00004310  C07C F138 7589          and.w     #61752,D0
00004314  0C40 B108 7590          cmp.w     #45320,D0
00004318  6600 007A 7591          bne       DisassembleInstruction_141
                    7592   ; {
                    7593   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
0000431C  2042      7594          move.l    D2,A0
0000431E  3010      7595          move.w    (A0),D0
00004320  EC40      7596          asr.w     #6,D0
00004322  C07C 0003 7597          and.w     #3,D0
00004326  3600      7598          move.w    D0,D3
                    7599   ; if((OpMode >= (unsigned short int)(0x0000)) && (OpMode <= (unsigned short int)(0x0002)))
00004328  0C43 0000 7600          cmp.w     #0,D3
0000432C  6500 0066 7601          blo       DisassembleInstruction_141
00004330  0C43 0002 7602          cmp.w     #2,D3
00004334  6200 005E 7603          bhi       DisassembleInstruction_141
                    7604   ; {
                    7605   ; InstructionSize = 1;
00004338  24BC 0000 7606          move.l    #1,(A2)
0000433C  0001      
                    7607   ; strcpyInstruction("CMPM") ;
0000433E  4879 0000 7608          pea       @m68kde~1_249.L
00004342  7724      
00004344  4E93      7609          jsr       (A3)
00004346  584F      7610          addq.w    #4,A7
                    7611   ; Decode2BitOperandSize(*OpCode) ;
00004348  2042      7612          move.l    D2,A0
0000434A  3210      7613          move.w    (A0),D1
0000434C  C2BC 0000 7614          and.l     #65535,D1
00004350  FFFF      
00004352  2F01      7615          move.l    D1,-(A7)
00004354  4EB8 2E3C 7616          jsr       _Decode2BitOperandSize
00004358  584F      7617          addq.w    #4,A7
                    7618   ; sprintf(TempString, "(A%d)+,(A%d)+", (*OpCode & (unsigned short int)(0x7)) , ((*OpCode >> 9) & (unsigned short int)(0x7)));
0000435A  2042      7619          move.l    D2,A0
0000435C  3210      7620          move.w    (A0),D1
0000435E  E041      7621          asr.w     #8,D1
00004360  E241      7622          asr.w     #1,D1
00004362  C27C 0007 7623          and.w     #7,D1
00004366  C2BC 0000 7624          and.l     #65535,D1
0000436A  FFFF      
0000436C  2F01      7625          move.l    D1,-(A7)
0000436E  2042      7626          move.l    D2,A0
00004370  3210      7627          move.w    (A0),D1
00004372  C27C 0007 7628          and.w     #7,D1
00004376  C2BC 0000 7629          and.l     #65535,D1
0000437A  FFFF      
0000437C  2F01      7630          move.l    D1,-(A7)
0000437E  4879 0000 7631          pea       @m68kde~1_250.L
00004382  772A      
00004384  2F0C      7632          move.l    A4,-(A7)
00004386  4E95      7633          jsr       (A5)
00004388  DEFC 0010 7634          add.w     #16,A7
                    7635   ; strcatInstruction(TempString) ;
0000438C  2F0C      7636          move.l    A4,-(A7)
0000438E  4EB8 0CCC 7637          jsr       _strcatInstruction
00004392  584F      7638          addq.w    #4,A7
                    7639   DisassembleInstruction_141:
                    7640   ; }
                    7641   ; }
                    7642   ; /////////////////////////////////////////////////////////////////////////////////
                    7643   ; // if instruction is DBCC
                    7644   ; /////////////////////////////////////////////////////////////////////////////////
                    7645   ; if((*OpCode & (unsigned short int)(0xF0F8 )) == (unsigned short int)(0x50C8))
00004394  2042      7646          move.l    D2,A0
00004396  3010      7647          move.w    (A0),D0
00004398  C07C F0F8 7648          and.w     #61688,D0
0000439C  0C40 50C8 7649          cmp.w     #20680,D0
000043A0  6600 0084 7650          bne       DisassembleInstruction_143
                    7651   ; {
                    7652   ; InstructionSize = 2;
000043A4  24BC 0000 7653          move.l    #2,(A2)
000043A8  0002      
                    7654   ; strcpy(Instruction,"DB") ;
000043AA  4879 0000 7655          pea       @m68kde~1_251.L
000043AE  7738      
000043B0  4879 0B00 7656          pea       _Instruction.L
000043B4  04E2      
000043B6  4EB9 0000 7657          jsr       _strcpy
000043BA  5586      
000043BC  504F      7658          addq.w    #8,A7
                    7659   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0x000F)) ;
000043BE  2042      7660          move.l    D2,A0
000043C0  3010      7661          move.w    (A0),D0
000043C2  E040      7662          asr.w     #8,D0
000043C4  C07C 000F 7663          and.w     #15,D0
000043C8  1D40 FFE9 7664          move.b    D0,-23(A6)
                    7665   ; DecodeBranchCondition(Condition) ;
000043CC  122E FFE9 7666          move.b    -23(A6),D1
000043D0  C27C 00FF 7667          and.w     #255,D1
000043D4  C2BC 0000 7668          and.l     #65535,D1
000043D8  FFFF      
000043DA  2F01      7669          move.l    D1,-(A7)
000043DC  4EB8 358E 7670          jsr       _DecodeBranchCondition
000043E0  584F      7671          addq.w    #4,A7
                    7672   ; sprintf(TempString, "D%d,%+d(PC) to Addr:$%X",(*OpCode & (unsigned short int)(0x7)), (int)(OpCode[1]), (int)(OpCode) + (int)(OpCode[1]) +  2) ;
000043E2  2202      7673          move.l    D2,D1
000043E4  2042      7674          move.l    D2,A0
000043E6  2F00      7675          move.l    D0,-(A7)
000043E8  3028 0002 7676          move.w    2(A0),D0
000043EC  48C0      7677          ext.l     D0
000043EE  D280      7678          add.l     D0,D1
000043F0  201F      7679          move.l    (A7)+,D0
000043F2  5481      7680          addq.l    #2,D1
000043F4  2F01      7681          move.l    D1,-(A7)
000043F6  2042      7682          move.l    D2,A0
000043F8  3228 0002 7683          move.w    2(A0),D1
000043FC  48C1      7684          ext.l     D1
000043FE  2F01      7685          move.l    D1,-(A7)
00004400  2042      7686          move.l    D2,A0
00004402  3210      7687          move.w    (A0),D1
00004404  C27C 0007 7688          and.w     #7,D1
00004408  C2BC 0000 7689          and.l     #65535,D1
0000440C  FFFF      
0000440E  2F01      7690          move.l    D1,-(A7)
00004410  4879 0000 7691          pea       @m68kde~1_252.L
00004414  773C      
00004416  2F0C      7692          move.l    A4,-(A7)
00004418  4E95      7693          jsr       (A5)
0000441A  DEFC 0014 7694          add.w     #20,A7
                    7695   ; strcatInstruction(TempString) ;
0000441E  2F0C      7696          move.l    A4,-(A7)
00004420  4EB8 0CCC 7697          jsr       _strcatInstruction
00004424  584F      7698          addq.w    #4,A7
                    7699   DisassembleInstruction_143:
                    7700   ; }
                    7701   ; /////////////////////////////////////////////////////////////////////////////////
                    7702   ; // if instruction is DIVS
                    7703   ; /////////////////////////////////////////////////////////////////////////////////
                    7704   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x81C0))
00004426  2042      7705          move.l    D2,A0
00004428  3010      7706          move.w    (A0),D0
0000442A  C07C F1C0 7707          and.w     #61888,D0
0000442E  0C40 81C0 7708          cmp.w     #33216,D0
00004432  6600 004A 7709          bne       DisassembleInstruction_145
                    7710   ; {
                    7711   ; InstructionSize = 1;
00004436  24BC 0000 7712          move.l    #1,(A2)
0000443A  0001      
                    7713   ; strcpy(Instruction,"DIVS ") ;
0000443C  4879 0000 7714          pea       @m68kde~1_253.L
00004440  7754      
00004442  4879 0B00 7715          pea       _Instruction.L
00004446  04E2      
00004448  4EB9 0000 7716          jsr       _strcpy
0000444C  5586      
0000444E  504F      7717          addq.w    #8,A7
                    7718   ; Decode6BitEA(OpCode,0,0,0) ;
00004450  42A7      7719          clr.l     -(A7)
00004452  42A7      7720          clr.l     -(A7)
00004454  42A7      7721          clr.l     -(A7)
00004456  2F02      7722          move.l    D2,-(A7)
00004458  4EB8 30D0 7723          jsr       _Decode6BitEA
0000445C  DEFC 0010 7724          add.w     #16,A7
                    7725   ; strcatInstruction(",") ;
00004460  4879 0000 7726          pea       @m68kde~1_188.L
00004464  75B4      
00004466  4EB8 0CCC 7727          jsr       _strcatInstruction
0000446A  584F      7728          addq.w    #4,A7
                    7729   ; Decode3BitDataRegister(*OpCode) ;
0000446C  2042      7730          move.l    D2,A0
0000446E  3210      7731          move.w    (A0),D1
00004470  C2BC 0000 7732          and.l     #65535,D1
00004474  FFFF      
00004476  2F01      7733          move.l    D1,-(A7)
00004478  4EB8 2E98 7734          jsr       _Decode3BitDataRegister
0000447C  584F      7735          addq.w    #4,A7
                    7736   DisassembleInstruction_145:
                    7737   ; }
                    7738   ; /////////////////////////////////////////////////////////////////////////////////
                    7739   ; // if instruction is DIVU
                    7740   ; /////////////////////////////////////////////////////////////////////////////////
                    7741   ; if((*OpCode & (unsigned short int)(0xF1C0 )) == (unsigned short int)(0x80C0))
0000447E  2042      7742          move.l    D2,A0
00004480  3010      7743          move.w    (A0),D0
00004482  C07C F1C0 7744          and.w     #61888,D0
00004486  0C40 80C0 7745          cmp.w     #32960,D0
0000448A  6600 004A 7746          bne       DisassembleInstruction_147
                    7747   ; {
                    7748   ; InstructionSize = 1;
0000448E  24BC 0000 7749          move.l    #1,(A2)
00004492  0001      
                    7750   ; strcpy(Instruction,"DIVU ") ;
00004494  4879 0000 7751          pea       @m68kde~1_254.L
00004498  775A      
0000449A  4879 0B00 7752          pea       _Instruction.L
0000449E  04E2      
000044A0  4EB9 0000 7753          jsr       _strcpy
000044A4  5586      
000044A6  504F      7754          addq.w    #8,A7
                    7755   ; Decode6BitEA(OpCode,0,0,0) ;
000044A8  42A7      7756          clr.l     -(A7)
000044AA  42A7      7757          clr.l     -(A7)
000044AC  42A7      7758          clr.l     -(A7)
000044AE  2F02      7759          move.l    D2,-(A7)
000044B0  4EB8 30D0 7760          jsr       _Decode6BitEA
000044B4  DEFC 0010 7761          add.w     #16,A7
                    7762   ; strcatInstruction(",") ;
000044B8  4879 0000 7763          pea       @m68kde~1_188.L
000044BC  75B4      
000044BE  4EB8 0CCC 7764          jsr       _strcatInstruction
000044C2  584F      7765          addq.w    #4,A7
                    7766   ; Decode3BitDataRegister(*OpCode) ;
000044C4  2042      7767          move.l    D2,A0
000044C6  3210      7768          move.w    (A0),D1
000044C8  C2BC 0000 7769          and.l     #65535,D1
000044CC  FFFF      
000044CE  2F01      7770          move.l    D1,-(A7)
000044D0  4EB8 2E98 7771          jsr       _Decode3BitDataRegister
000044D4  584F      7772          addq.w    #4,A7
                    7773   DisassembleInstruction_147:
                    7774   ; }
                    7775   ; /////////////////////////////////////////////////////////////////////////////////
                    7776   ; // if instruction is EOR
                    7777   ; /////////////////////////////////////////////////////////////////////////////////
                    7778   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0xB000))   {
000044D6  2042      7779          move.l    D2,A0
000044D8  3010      7780          move.w    (A0),D0
000044DA  C07C F000 7781          and.w     #61440,D0
000044DE  0C40 B000 7782          cmp.w     #45056,D0
000044E2  6600 004A 7783          bne       DisassembleInstruction_151
                    7784   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
000044E6  2042      7785          move.l    D2,A0
000044E8  3010      7786          move.w    (A0),D0
000044EA  EC40      7787          asr.w     #6,D0
000044EC  C07C 0007 7788          and.w     #7,D0
000044F0  3600      7789          move.w    D0,D3
                    7790   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for EOR as it it used by CMPM instruction as a differentiator
000044F2  2042      7791          move.l    D2,A0
000044F4  3010      7792          move.w    (A0),D0
000044F6  E640      7793          asr.w     #3,D0
000044F8  C07C 0007 7794          and.w     #7,D0
000044FC  3D40 FFEC 7795          move.w    D0,-20(A6)
                    7796   ; if( (OpMode >= (unsigned short int)(0x0004)) &&
00004500  0C43 0004 7797          cmp.w     #4,D3
00004504  6528      7798          blo.s     DisassembleInstruction_151
00004506  0C43 0006 7799          cmp.w     #6,D3
0000450A  6222      7800          bhi.s     DisassembleInstruction_151
0000450C  302E FFEC 7801          move.w    -20(A6),D0
00004510  0C40 0001 7802          cmp.w     #1,D0
00004514  6718      7803          beq.s     DisassembleInstruction_151
                    7804   ; (OpMode <= (unsigned short int)(0x0006)) &&
                    7805   ; (EAMode != (unsigned short int)(0x0001)))
                    7806   ; {
                    7807   ; InstructionSize = 1;
00004516  24BC 0000 7808          move.l    #1,(A2)
0000451A  0001      
                    7809   ; strcpyInstruction("EOR") ;
0000451C  4879 0000 7810          pea       @m68kde~1_255.L
00004520  7760      
00004522  4E93      7811          jsr       (A3)
00004524  584F      7812          addq.w    #4,A7
                    7813   ; Decode3BitOperandMode(OpCode);
00004526  2F02      7814          move.l    D2,-(A7)
00004528  4EB8 34F8 7815          jsr       _Decode3BitOperandMode
0000452C  584F      7816          addq.w    #4,A7
                    7817   DisassembleInstruction_151:
                    7818   ; }
                    7819   ; }
                    7820   ; /////////////////////////////////////////////////////////////////////////////////
                    7821   ; // if instruction is EOR to CCR
                    7822   ; /////////////////////////////////////////////////////////////////////////////////
                    7823   ; if(*OpCode == (unsigned short int)(0x0A3C))   {
0000452E  2042      7824          move.l    D2,A0
00004530  3010      7825          move.w    (A0),D0
00004532  0C40 0A3C 7826          cmp.w     #2620,D0
00004536  662C      7827          bne.s     DisassembleInstruction_153
                    7828   ; InstructionSize = 1;
00004538  24BC 0000 7829          move.l    #1,(A2)
0000453C  0001      
                    7830   ; sprintf(Instruction, "EORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
0000453E  2042      7831          move.l    D2,A0
00004540  3228 0002 7832          move.w    2(A0),D1
00004544  C27C 00FF 7833          and.w     #255,D1
00004548  C2BC 0000 7834          and.l     #65535,D1
0000454C  FFFF      
0000454E  2F01      7835          move.l    D1,-(A7)
00004550  4879 0000 7836          pea       @m68kde~1_256.L
00004554  7764      
00004556  4879 0B00 7837          pea       _Instruction.L
0000455A  04E2      
0000455C  4E95      7838          jsr       (A5)
0000455E  DEFC 000C 7839          add.w     #12,A7
                    7840   ; InstructionSize += 1;
00004562  5292      7841          addq.l    #1,(A2)
                    7842   DisassembleInstruction_153:
                    7843   ; }
                    7844   ; /////////////////////////////////////////////////////////////////////////////////
                    7845   ; // if instruction is EORI #data,SR
                    7846   ; /////////////////////////////////////////////////////////////////////////////////
                    7847   ; if(*OpCode  == (unsigned short int)(0x0A7C))   {
00004564  2042      7848          move.l    D2,A0
00004566  3010      7849          move.w    (A0),D0
00004568  0C40 0A7C 7850          cmp.w     #2684,D0
0000456C  6622      7851          bne.s     DisassembleInstruction_155
                    7852   ; InstructionSize = 2;
0000456E  24BC 0000 7853          move.l    #2,(A2)
00004572  0002      
                    7854   ; sprintf(Instruction, "EORI #$%X,SR", OpCode[1]);
00004574  2042      7855          move.l    D2,A0
00004576  3228 0002 7856          move.w    2(A0),D1
0000457A  48C1      7857          ext.l     D1
0000457C  2F01      7858          move.l    D1,-(A7)
0000457E  4879 0000 7859          pea       @m68kde~1_257.L
00004582  7774      
00004584  4879 0B00 7860          pea       _Instruction.L
00004588  04E2      
0000458A  4E95      7861          jsr       (A5)
0000458C  DEFC 000C 7862          add.w     #12,A7
                    7863   DisassembleInstruction_155:
                    7864   ; }
                    7865   ; /////////////////////////////////////////////////////////////////////////////////
                    7866   ; // if instruction is EXG
                    7867   ; /////////////////////////////////////////////////////////////////////////////////
                    7868   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0xC100))   {
00004590  2042      7869          move.l    D2,A0
00004592  3010      7870          move.w    (A0),D0
00004594  C07C F100 7871          and.w     #61696,D0
00004598  0C40 C100 7872          cmp.w     #49408,D0
0000459C  6600 00E0 7873          bne       DisassembleInstruction_163
                    7874   ; Rx = ((*OpCode >> 9) & (unsigned short int)(0x7)) ;
000045A0  2042      7875          move.l    D2,A0
000045A2  3010      7876          move.w    (A0),D0
000045A4  E040      7877          asr.w     #8,D0
000045A6  E240      7878          asr.w     #1,D0
000045A8  C07C 0007 7879          and.w     #7,D0
000045AC  3D40 FFF0 7880          move.w    D0,-16(A6)
                    7881   ; Ry = (*OpCode & (unsigned short int)(0x7)) ;
000045B0  2042      7882          move.l    D2,A0
000045B2  3010      7883          move.w    (A0),D0
000045B4  C07C 0007 7884          and.w     #7,D0
000045B8  3D40 FFF2 7885          move.w    D0,-14(A6)
                    7886   ; EXGOpMode = ((*OpCode >> 3) & (unsigned short int)(0x1F)) ;
000045BC  2042      7887          move.l    D2,A0
000045BE  3010      7888          move.w    (A0),D0
000045C0  E640      7889          asr.w     #3,D0
000045C2  C07C 001F 7890          and.w     #31,D0
000045C6  3D40 FFF4 7891          move.w    D0,-12(A6)
                    7892   ; if(EXGOpMode == (unsigned short int)(0x0008))   {
000045CA  302E FFF4 7893          move.w    -12(A6),D0
000045CE  0C40 0008 7894          cmp.w     #8,D0
000045D2  6634      7895          bne.s     DisassembleInstruction_159
                    7896   ; InstructionSize = 1;
000045D4  24BC 0000 7897          move.l    #1,(A2)
000045D8  0001      
                    7898   ; sprintf(Instruction, "EXG D%d,D%d", Rx, Ry) ;
000045DA  322E FFF2 7899          move.w    -14(A6),D1
000045DE  C2BC 0000 7900          and.l     #65535,D1
000045E2  FFFF      
000045E4  2F01      7901          move.l    D1,-(A7)
000045E6  322E FFF0 7902          move.w    -16(A6),D1
000045EA  C2BC 0000 7903          and.l     #65535,D1
000045EE  FFFF      
000045F0  2F01      7904          move.l    D1,-(A7)
000045F2  4879 0000 7905          pea       @m68kde~1_258.L
000045F6  7782      
000045F8  4879 0B00 7906          pea       _Instruction.L
000045FC  04E2      
000045FE  4E95      7907          jsr       (A5)
00004600  DEFC 0010 7908          add.w     #16,A7
00004604  6000 0078 7909          bra       DisassembleInstruction_163
                    7910   DisassembleInstruction_159:
                    7911   ; }
                    7912   ; else if(EXGOpMode == (unsigned short int)(0x0009))  {
00004608  302E FFF4 7913          move.w    -12(A6),D0
0000460C  0C40 0009 7914          cmp.w     #9,D0
00004610  6632      7915          bne.s     DisassembleInstruction_161
                    7916   ; InstructionSize = 1;
00004612  24BC 0000 7917          move.l    #1,(A2)
00004616  0001      
                    7918   ; sprintf(Instruction, "EXG A%d,A%d", Rx, Ry) ;
00004618  322E FFF2 7919          move.w    -14(A6),D1
0000461C  C2BC 0000 7920          and.l     #65535,D1
00004620  FFFF      
00004622  2F01      7921          move.l    D1,-(A7)
00004624  322E FFF0 7922          move.w    -16(A6),D1
00004628  C2BC 0000 7923          and.l     #65535,D1
0000462C  FFFF      
0000462E  2F01      7924          move.l    D1,-(A7)
00004630  4879 0000 7925          pea       @m68kde~1_259.L
00004634  778E      
00004636  4879 0B00 7926          pea       _Instruction.L
0000463A  04E2      
0000463C  4E95      7927          jsr       (A5)
0000463E  DEFC 0010 7928          add.w     #16,A7
00004642  603A      7929          bra.s     DisassembleInstruction_163
                    7930   DisassembleInstruction_161:
                    7931   ; }
                    7932   ; else if(EXGOpMode == (unsigned short int)(0x0011))  {
00004644  302E FFF4 7933          move.w    -12(A6),D0
00004648  0C40 0011 7934          cmp.w     #17,D0
0000464C  6630      7935          bne.s     DisassembleInstruction_163
                    7936   ; InstructionSize = 1;
0000464E  24BC 0000 7937          move.l    #1,(A2)
00004652  0001      
                    7938   ; sprintf(Instruction, "EXG D%d,A%d", Rx, Ry) ;
00004654  322E FFF2 7939          move.w    -14(A6),D1
00004658  C2BC 0000 7940          and.l     #65535,D1
0000465C  FFFF      
0000465E  2F01      7941          move.l    D1,-(A7)
00004660  322E FFF0 7942          move.w    -16(A6),D1
00004664  C2BC 0000 7943          and.l     #65535,D1
00004668  FFFF      
0000466A  2F01      7944          move.l    D1,-(A7)
0000466C  4879 0000 7945          pea       @m68kde~1_260.L
00004670  779A      
00004672  4879 0B00 7946          pea       _Instruction.L
00004676  04E2      
00004678  4E95      7947          jsr       (A5)
0000467A  DEFC 0010 7948          add.w     #16,A7
                    7949   DisassembleInstruction_163:
                    7950   ; }
                    7951   ; }
                    7952   ; /////////////////////////////////////////////////////////////////////////////////
                    7953   ; // if instruction is EXT
                    7954   ; /////////////////////////////////////////////////////////////////////////////////
                    7955   ; if((*OpCode & (unsigned short int)(0xFE38)) == (unsigned short int)(0x4800))
0000467E  2042      7956          move.l    D2,A0
00004680  3010      7957          move.w    (A0),D0
00004682  C07C FE38 7958          and.w     #65080,D0
00004686  0C40 4800 7959          cmp.w     #18432,D0
0000468A  6600 0054 7960          bne       DisassembleInstruction_165
                    7961   ; {
                    7962   ; InstructionSize = 1;
0000468E  24BC 0000 7963          move.l    #1,(A2)
00004692  0001      
                    7964   ; strcpy(Instruction,"EXT") ;
00004694  4879 0000 7965          pea       @m68kde~1_261.L
00004698  77A6      
0000469A  4879 0B00 7966          pea       _Instruction.L
0000469E  04E2      
000046A0  4EB9 0000 7967          jsr       _strcpy
000046A4  5586      
000046A6  504F      7968          addq.w    #8,A7
                    7969   ; if((*OpCode & (unsigned short int)(0x00C0)) == (unsigned short int)(0x00C0))
000046A8  2042      7970          move.l    D2,A0
000046AA  3010      7971          move.w    (A0),D0
000046AC  C07C 00C0 7972          and.w     #192,D0
000046B0  0C40 00C0 7973          cmp.w     #192,D0
000046B4  660E      7974          bne.s     DisassembleInstruction_167
                    7975   ; strcatInstruction(".L ") ;
000046B6  4879 0000 7976          pea       @m68kde~1_172.L
000046BA  756A      
000046BC  4EB8 0CCC 7977          jsr       _strcatInstruction
000046C0  584F      7978          addq.w    #4,A7
000046C2  600C      7979          bra.s     DisassembleInstruction_168
                    7980   DisassembleInstruction_167:
                    7981   ; else
                    7982   ; strcatInstruction(".W ") ;
000046C4  4879 0000 7983          pea       @m68kde~1_171.L
000046C8  7566      
000046CA  4EB8 0CCC 7984          jsr       _strcatInstruction
000046CE  584F      7985          addq.w    #4,A7
                    7986   DisassembleInstruction_168:
                    7987   ; Decode6BitEA(OpCode,0,0,0) ;
000046D0  42A7      7988          clr.l     -(A7)
000046D2  42A7      7989          clr.l     -(A7)
000046D4  42A7      7990          clr.l     -(A7)
000046D6  2F02      7991          move.l    D2,-(A7)
000046D8  4EB8 30D0 7992          jsr       _Decode6BitEA
000046DC  DEFC 0010 7993          add.w     #16,A7
                    7994   DisassembleInstruction_165:
                    7995   ; }
                    7996   ; /////////////////////////////////////////////////////////////////////////////////
                    7997   ; // if instruction is ILLEGAL $4afc
                    7998   ; /////////////////////////////////////////////////////////////////////////////////
                    7999   ; if(*OpCode == (unsigned short int)(0x4AFC)) {
000046E0  2042      8000          move.l    D2,A0
000046E2  3010      8001          move.w    (A0),D0
000046E4  0C40 4AFC 8002          cmp.w     #19196,D0
000046E8  661A      8003          bne.s     DisassembleInstruction_169
                    8004   ; InstructionSize = 1;
000046EA  24BC 0000 8005          move.l    #1,(A2)
000046EE  0001      
                    8006   ; strcpy(Instruction,"ILLEGAL ($4AFC)") ;
000046F0  4879 0000 8007          pea       @m68kde~1_262.L
000046F4  77AA      
000046F6  4879 0B00 8008          pea       _Instruction.L
000046FA  04E2      
000046FC  4EB9 0000 8009          jsr       _strcpy
00004700  5586      
00004702  504F      8010          addq.w    #8,A7
                    8011   DisassembleInstruction_169:
                    8012   ; }
                    8013   ; /////////////////////////////////////////////////////////////////////////////////
                    8014   ; // if instruction is JMP
                    8015   ; /////////////////////////////////////////////////////////////////////////////////
                    8016   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4EC0))
00004704  2042      8017          move.l    D2,A0
00004706  3010      8018          move.w    (A0),D0
00004708  C07C FFC0 8019          and.w     #65472,D0
0000470C  0C40 4EC0 8020          cmp.w     #20160,D0
00004710  662A      8021          bne.s     DisassembleInstruction_171
                    8022   ; {
                    8023   ; InstructionSize = 1;
00004712  24BC 0000 8024          move.l    #1,(A2)
00004716  0001      
                    8025   ; strcpy(Instruction,"JMP ") ;
00004718  4879 0000 8026          pea       @m68kde~1_263.L
0000471C  77BA      
0000471E  4879 0B00 8027          pea       _Instruction.L
00004722  04E2      
00004724  4EB9 0000 8028          jsr       _strcpy
00004728  5586      
0000472A  504F      8029          addq.w    #8,A7
                    8030   ; Decode6BitEA(OpCode,0,0,0) ;
0000472C  42A7      8031          clr.l     -(A7)
0000472E  42A7      8032          clr.l     -(A7)
00004730  42A7      8033          clr.l     -(A7)
00004732  2F02      8034          move.l    D2,-(A7)
00004734  4EB8 30D0 8035          jsr       _Decode6BitEA
00004738  DEFC 0010 8036          add.w     #16,A7
                    8037   DisassembleInstruction_171:
                    8038   ; }
                    8039   ; /////////////////////////////////////////////////////////////////////////////////
                    8040   ; // if instruction is JSR
                    8041   ; /////////////////////////////////////////////////////////////////////////////////
                    8042   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4E80))
0000473C  2042      8043          move.l    D2,A0
0000473E  3010      8044          move.w    (A0),D0
00004740  C07C FFC0 8045          and.w     #65472,D0
00004744  0C40 4E80 8046          cmp.w     #20096,D0
00004748  662A      8047          bne.s     DisassembleInstruction_173
                    8048   ; {
                    8049   ; InstructionSize = 1;
0000474A  24BC 0000 8050          move.l    #1,(A2)
0000474E  0001      
                    8051   ; strcpy(Instruction,"JSR ") ;
00004750  4879 0000 8052          pea       @m68kde~1_264.L
00004754  77C0      
00004756  4879 0B00 8053          pea       _Instruction.L
0000475A  04E2      
0000475C  4EB9 0000 8054          jsr       _strcpy
00004760  5586      
00004762  504F      8055          addq.w    #8,A7
                    8056   ; Decode6BitEA(OpCode,0,0,0) ;
00004764  42A7      8057          clr.l     -(A7)
00004766  42A7      8058          clr.l     -(A7)
00004768  42A7      8059          clr.l     -(A7)
0000476A  2F02      8060          move.l    D2,-(A7)
0000476C  4EB8 30D0 8061          jsr       _Decode6BitEA
00004770  DEFC 0010 8062          add.w     #16,A7
                    8063   DisassembleInstruction_173:
                    8064   ; }
                    8065   ; /////////////////////////////////////////////////////////////////////////////////
                    8066   ; // if instruction is LEA
                    8067   ; /////////////////////////////////////////////////////////////////////////////////
                    8068   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0x41C0))
00004774  2042      8069          move.l    D2,A0
00004776  3010      8070          move.w    (A0),D0
00004778  C07C F1C0 8071          and.w     #61888,D0
0000477C  0C40 41C0 8072          cmp.w     #16832,D0
00004780  6600 0056 8073          bne       DisassembleInstruction_175
                    8074   ; {
                    8075   ; InstructionSize = 1;
00004784  24BC 0000 8076          move.l    #1,(A2)
00004788  0001      
                    8077   ; strcpy(Instruction,"LEA ") ;
0000478A  4879 0000 8078          pea       @m68kde~1_265.L
0000478E  77C6      
00004790  4879 0B00 8079          pea       _Instruction.L
00004794  04E2      
00004796  4EB9 0000 8080          jsr       _strcpy
0000479A  5586      
0000479C  504F      8081          addq.w    #8,A7
                    8082   ; Decode6BitEA(OpCode,0,0,0) ;
0000479E  42A7      8083          clr.l     -(A7)
000047A0  42A7      8084          clr.l     -(A7)
000047A2  42A7      8085          clr.l     -(A7)
000047A4  2F02      8086          move.l    D2,-(A7)
000047A6  4EB8 30D0 8087          jsr       _Decode6BitEA
000047AA  DEFC 0010 8088          add.w     #16,A7
                    8089   ; sprintf(TempString, ",A%d", ((*OpCode >> 9) & (unsigned short int)(0x7)));
000047AE  2042      8090          move.l    D2,A0
000047B0  3210      8091          move.w    (A0),D1
000047B2  E041      8092          asr.w     #8,D1
000047B4  E241      8093          asr.w     #1,D1
000047B6  C27C 0007 8094          and.w     #7,D1
000047BA  C2BC 0000 8095          and.l     #65535,D1
000047BE  FFFF      
000047C0  2F01      8096          move.l    D1,-(A7)
000047C2  4879 0000 8097          pea       @m68kde~1_247.L
000047C6  771A      
000047C8  2F0C      8098          move.l    A4,-(A7)
000047CA  4E95      8099          jsr       (A5)
000047CC  DEFC 000C 8100          add.w     #12,A7
                    8101   ; strcatInstruction(TempString);
000047D0  2F0C      8102          move.l    A4,-(A7)
000047D2  4EB8 0CCC 8103          jsr       _strcatInstruction
000047D6  584F      8104          addq.w    #4,A7
                    8105   DisassembleInstruction_175:
                    8106   ; }
                    8107   ; /////////////////////////////////////////////////////////////////////////////////
                    8108   ; // if instruction is LINK.W
                    8109   ; /////////////////////////////////////////////////////////////////////////////////
                    8110   ; if((*OpCode & (unsigned short int)(0xFFF8)) == (unsigned short int)(0x4E50))
000047D8  2042      8111          move.l    D2,A0
000047DA  3010      8112          move.w    (A0),D0
000047DC  C07C FFF8 8113          and.w     #65528,D0
000047E0  0C40 4E50 8114          cmp.w     #20048,D0
000047E4  6600 0052 8115          bne       DisassembleInstruction_177
                    8116   ; {
                    8117   ; InstructionSize = 1;
000047E8  24BC 0000 8118          move.l    #1,(A2)
000047EC  0001      
                    8119   ; strcpy(Instruction,"LINK ") ;
000047EE  4879 0000 8120          pea       @m68kde~1_266.L
000047F2  77CC      
000047F4  4879 0B00 8121          pea       _Instruction.L
000047F8  04E2      
000047FA  4EB9 0000 8122          jsr       _strcpy
000047FE  5586      
00004800  504F      8123          addq.w    #8,A7
                    8124   ; sprintf(TempString, "A%d,#%d", ((*OpCode) & (unsigned short int)(0x7)),OpCode[1]);
00004802  2042      8125          move.l    D2,A0
00004804  3228 0002 8126          move.w    2(A0),D1
00004808  48C1      8127          ext.l     D1
0000480A  2F01      8128          move.l    D1,-(A7)
0000480C  2042      8129          move.l    D2,A0
0000480E  3210      8130          move.w    (A0),D1
00004810  C27C 0007 8131          and.w     #7,D1
00004814  C2BC 0000 8132          and.l     #65535,D1
00004818  FFFF      
0000481A  2F01      8133          move.l    D1,-(A7)
0000481C  4879 0000 8134          pea       @m68kde~1_267.L
00004820  77D2      
00004822  2F0C      8135          move.l    A4,-(A7)
00004824  4E95      8136          jsr       (A5)
00004826  DEFC 0010 8137          add.w     #16,A7
                    8138   ; InstructionSize = 2 ;
0000482A  24BC 0000 8139          move.l    #2,(A2)
0000482E  0002      
                    8140   ; strcatInstruction(TempString);
00004830  2F0C      8141          move.l    A4,-(A7)
00004832  4EB8 0CCC 8142          jsr       _strcatInstruction
00004836  584F      8143          addq.w    #4,A7
                    8144   DisassembleInstruction_177:
                    8145   ; }
                    8146   ; /////////////////////////////////////////////////////////////////////////////////
                    8147   ; // if instruction is MOVE, MOVEA
                    8148   ; /////////////////////////////////////////////////////////////////////////////////
                    8149   ; if((*OpCode & (unsigned short int)(0xC000)) == (unsigned short int)(0x0000))
00004838  2042      8150          move.l    D2,A0
0000483A  3010      8151          move.w    (A0),D0
0000483C  C07C C000 8152          and.w     #49152,D0
00004840  6600 00F0 8153          bne       DisassembleInstruction_193
                    8154   ; {
                    8155   ; Size = (*OpCode & (unsigned short int)(0x3000)) >> 12 ;   // get 2 bit size in bits 13/12 into 1,0
00004844  2042      8156          move.l    D2,A0
00004846  3010      8157          move.w    (A0),D0
00004848  C07C 3000 8158          and.w     #12288,D0
0000484C  E048      8159          lsr.w     #8,D0
0000484E  E848      8160          lsr.w     #4,D0
00004850  3D40 FFE2 8161          move.w    D0,-30(A6)
                    8162   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007);   // get 3 bit source mode operand
00004854  2042      8163          move.l    D2,A0
00004856  3010      8164          move.w    (A0),D0
00004858  E640      8165          asr.w     #3,D0
0000485A  C07C 0007 8166          and.w     #7,D0
0000485E  3600      8167          move.w    D0,D3
                    8168   ; SourceReg = (*OpCode) & (unsigned short int)(0x0007);     // get 3 bit source register number
00004860  2042      8169          move.l    D2,A0
00004862  3010      8170          move.w    (A0),D0
00004864  C07C 0007 8171          and.w     #7,D0
00004868  3D40 FFF6 8172          move.w    D0,-10(A6)
                    8173   ; DataSize = 0 ;
0000486C  7E00      8174          moveq     #0,D7
                    8175   ; // if source addressing mode is d16(a0) or d8(a0,d0)
                    8176   ; if((OpMode == (unsigned short int)(0x0005)) || (OpMode == (unsigned short int)(0x0006)))
0000486E  0C43 0005 8177          cmp.w     #5,D3
00004872  6706      8178          beq.s     DisassembleInstruction_183
00004874  0C43 0006 8179          cmp.w     #6,D3
00004878  6602      8180          bne.s     DisassembleInstruction_181
                    8181   DisassembleInstruction_183:
                    8182   ; DataSize = 1;  // source operands has 1 word after EA
0000487A  7E01      8183          moveq     #1,D7
                    8184   DisassembleInstruction_181:
                    8185   ; // if source addressing mode is a 16 or 32 bit address
                    8186   ; if((OpMode == (unsigned short int)(0x0007))) {
0000487C  0C43 0007 8187          cmp.w     #7,D3
00004880  660C      8188          bne.s     DisassembleInstruction_187
                    8189   ; if(SourceReg == (unsigned short int)(0x0000))         // short address
00004882  302E FFF6 8190          move.w    -10(A6),D0
00004886  6604      8191          bne.s     DisassembleInstruction_186
                    8192   ; DataSize = 1 ;
00004888  7E01      8193          moveq     #1,D7
0000488A  6002      8194          bra.s     DisassembleInstruction_187
                    8195   DisassembleInstruction_186:
                    8196   ; else
                    8197   ; DataSize = 2 ;
0000488C  7E02      8198          moveq     #2,D7
                    8199   DisassembleInstruction_187:
                    8200   ; }
                    8201   ; // if source addressing mode is # then figure out size
                    8202   ; if((OpMode == (unsigned short int)(0x0007)) && (SourceReg == (unsigned short int)(0x0004)))    {
0000488E  0C43 0007 8203          cmp.w     #7,D3
00004892  6624      8204          bne.s     DisassembleInstruction_191
00004894  302E FFF6 8205          move.w    -10(A6),D0
00004898  0C40 0004 8206          cmp.w     #4,D0
0000489C  661A      8207          bne.s     DisassembleInstruction_191
                    8208   ; if((Size == (unsigned short int)(1)) || (Size == (unsigned short int)(3)))
0000489E  302E FFE2 8209          move.w    -30(A6),D0
000048A2  0C40 0001 8210          cmp.w     #1,D0
000048A6  670A      8211          beq.s     DisassembleInstruction_192
000048A8  302E FFE2 8212          move.w    -30(A6),D0
000048AC  0C40 0003 8213          cmp.w     #3,D0
000048B0  6604      8214          bne.s     DisassembleInstruction_190
                    8215   DisassembleInstruction_192:
                    8216   ; DataSize = 1;
000048B2  7E01      8217          moveq     #1,D7
000048B4  6002      8218          bra.s     DisassembleInstruction_191
                    8219   DisassembleInstruction_190:
                    8220   ; else
                    8221   ; DataSize = 2 ;
000048B6  7E02      8222          moveq     #2,D7
                    8223   DisassembleInstruction_191:
                    8224   ; //printf("DataSize = %d",DataSize) ;
                    8225   ; }
                    8226   ; if(Size != 0)
000048B8  302E FFE2 8227          move.w    -30(A6),D0
000048BC  6700 0074 8228          beq       DisassembleInstruction_193
                    8229   ; {
                    8230   ; InstructionSize = 1;
000048C0  24BC 0000 8231          move.l    #1,(A2)
000048C4  0001      
                    8232   ; if(Size == 1)
000048C6  302E FFE2 8233          move.w    -30(A6),D0
000048CA  0C40 0001 8234          cmp.w     #1,D0
000048CE  660C      8235          bne.s     DisassembleInstruction_195
                    8236   ; strcpyInstruction("MOVE.B ") ;
000048D0  4879 0000 8237          pea       @m68kde~1_268.L
000048D4  77DA      
000048D6  4E93      8238          jsr       (A3)
000048D8  584F      8239          addq.w    #4,A7
000048DA  6020      8240          bra.s     DisassembleInstruction_198
                    8241   DisassembleInstruction_195:
                    8242   ; else if(Size == 2)
000048DC  302E FFE2 8243          move.w    -30(A6),D0
000048E0  0C40 0002 8244          cmp.w     #2,D0
000048E4  660C      8245          bne.s     DisassembleInstruction_197
                    8246   ; strcpyInstruction("MOVE.L ") ;
000048E6  4879 0000 8247          pea       @m68kde~1_269.L
000048EA  77E2      
000048EC  4E93      8248          jsr       (A3)
000048EE  584F      8249          addq.w    #4,A7
000048F0  600A      8250          bra.s     DisassembleInstruction_198
                    8251   DisassembleInstruction_197:
                    8252   ; else
                    8253   ; strcpyInstruction("MOVE.W ") ;
000048F2  4879 0000 8254          pea       @m68kde~1_270.L
000048F6  77EA      
000048F8  4E93      8255          jsr       (A3)
000048FA  584F      8256          addq.w    #4,A7
                    8257   DisassembleInstruction_198:
                    8258   ; Decode6BitEA(OpCode,0,0,1) ;
000048FC  4878 0001 8259          pea       1
00004900  42A7      8260          clr.l     -(A7)
00004902  42A7      8261          clr.l     -(A7)
00004904  2F02      8262          move.l    D2,-(A7)
00004906  4EB8 30D0 8263          jsr       _Decode6BitEA
0000490A  DEFC 0010 8264          add.w     #16,A7
                    8265   ; strcatInstruction(",") ;
0000490E  4879 0000 8266          pea       @m68kde~1_188.L
00004912  75B4      
00004914  4EB8 0CCC 8267          jsr       _strcatInstruction
00004918  584F      8268          addq.w    #4,A7
                    8269   ; // tell next function how many words lie between opcode and destination, could be 1 or 2 e.g. with # addressing move.bwl #$data,<EA>
                    8270   ; // but subtract 1 to make the maths correct in the called function
                    8271   ; Decode6BitEA(OpCode,2,(DataSize),0) ;
0000491A  42A7      8272          clr.l     -(A7)
0000491C  CEBC 0000 8273          and.l     #65535,D7
00004920  FFFF      
00004922  2F07      8274          move.l    D7,-(A7)
00004924  4878 0002 8275          pea       2
00004928  2F02      8276          move.l    D2,-(A7)
0000492A  4EB8 30D0 8277          jsr       _Decode6BitEA
0000492E  DEFC 0010 8278          add.w     #16,A7
                    8279   DisassembleInstruction_193:
                    8280   ; }
                    8281   ; }
                    8282   ; /////////////////////////////////////////////////////////////////////////////////
                    8283   ; // if instruction is MOVE <EA>,CCR
                    8284   ; /////////////////////////////////////////////////////////////////////////////////
                    8285   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x44C0))
00004932  2042      8286          move.l    D2,A0
00004934  3010      8287          move.w    (A0),D0
00004936  C07C FFC0 8288          and.w     #65472,D0
0000493A  0C40 44C0 8289          cmp.w     #17600,D0
0000493E  6636      8290          bne.s     DisassembleInstruction_199
                    8291   ; {
                    8292   ; InstructionSize = 1;
00004940  24BC 0000 8293          move.l    #1,(A2)
00004944  0001      
                    8294   ; strcpy(Instruction,"MOVE ") ;
00004946  4879 0000 8295          pea       @m68kde~1_271.L
0000494A  77F2      
0000494C  4879 0B00 8296          pea       _Instruction.L
00004950  04E2      
00004952  4EB9 0000 8297          jsr       _strcpy
00004956  5586      
00004958  504F      8298          addq.w    #8,A7
                    8299   ; Decode6BitEA(OpCode,0,0,0) ;
0000495A  42A7      8300          clr.l     -(A7)
0000495C  42A7      8301          clr.l     -(A7)
0000495E  42A7      8302          clr.l     -(A7)
00004960  2F02      8303          move.l    D2,-(A7)
00004962  4EB8 30D0 8304          jsr       _Decode6BitEA
00004966  DEFC 0010 8305          add.w     #16,A7
                    8306   ; strcatInstruction(",CCR") ;
0000496A  4879 0000 8307          pea       @m68kde~1_272.L
0000496E  77F8      
00004970  4EB8 0CCC 8308          jsr       _strcatInstruction
00004974  584F      8309          addq.w    #4,A7
                    8310   DisassembleInstruction_199:
                    8311   ; }
                    8312   ; /////////////////////////////////////////////////////////////////////////////////
                    8313   ; // if instruction is MOVE SR,<EA>
                    8314   ; /////////////////////////////////////////////////////////////////////////////////
                    8315   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x40C0))
00004976  2042      8316          move.l    D2,A0
00004978  3010      8317          move.w    (A0),D0
0000497A  C07C FFC0 8318          and.w     #65472,D0
0000497E  0C40 40C0 8319          cmp.w     #16576,D0
00004982  662A      8320          bne.s     DisassembleInstruction_201
                    8321   ; {
                    8322   ; InstructionSize = 1;
00004984  24BC 0000 8323          move.l    #1,(A2)
00004988  0001      
                    8324   ; strcpy(Instruction,"MOVE SR,") ;
0000498A  4879 0000 8325          pea       @m68kde~1_273.L
0000498E  77FE      
00004990  4879 0B00 8326          pea       _Instruction.L
00004994  04E2      
00004996  4EB9 0000 8327          jsr       _strcpy
0000499A  5586      
0000499C  504F      8328          addq.w    #8,A7
                    8329   ; Decode6BitEA(OpCode,0,0,0) ;
0000499E  42A7      8330          clr.l     -(A7)
000049A0  42A7      8331          clr.l     -(A7)
000049A2  42A7      8332          clr.l     -(A7)
000049A4  2F02      8333          move.l    D2,-(A7)
000049A6  4EB8 30D0 8334          jsr       _Decode6BitEA
000049AA  DEFC 0010 8335          add.w     #16,A7
                    8336   DisassembleInstruction_201:
                    8337   ; }
                    8338   ; /////////////////////////////////////////////////////////////////////////////////
                    8339   ; // if instruction is MOVE <EA>,SR
                    8340   ; /////////////////////////////////////////////////////////////////////////////////
                    8341   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x46C0))
000049AE  2042      8342          move.l    D2,A0
000049B0  3010      8343          move.w    (A0),D0
000049B2  C07C FFC0 8344          and.w     #65472,D0
000049B6  0C40 46C0 8345          cmp.w     #18112,D0
000049BA  6636      8346          bne.s     DisassembleInstruction_203
                    8347   ; {
                    8348   ; InstructionSize = 1;
000049BC  24BC 0000 8349          move.l    #1,(A2)
000049C0  0001      
                    8350   ; strcpy(Instruction,"MOVE ") ;
000049C2  4879 0000 8351          pea       @m68kde~1_271.L
000049C6  77F2      
000049C8  4879 0B00 8352          pea       _Instruction.L
000049CC  04E2      
000049CE  4EB9 0000 8353          jsr       _strcpy
000049D2  5586      
000049D4  504F      8354          addq.w    #8,A7
                    8355   ; Decode6BitEA(OpCode,0,0,0) ;
000049D6  42A7      8356          clr.l     -(A7)
000049D8  42A7      8357          clr.l     -(A7)
000049DA  42A7      8358          clr.l     -(A7)
000049DC  2F02      8359          move.l    D2,-(A7)
000049DE  4EB8 30D0 8360          jsr       _Decode6BitEA
000049E2  DEFC 0010 8361          add.w     #16,A7
                    8362   ; strcatInstruction(",SR") ;
000049E6  4879 0000 8363          pea       @m68kde~1_274.L
000049EA  7808      
000049EC  4EB8 0CCC 8364          jsr       _strcatInstruction
000049F0  584F      8365          addq.w    #4,A7
                    8366   DisassembleInstruction_203:
                    8367   ; }
                    8368   ; /////////////////////////////////////////////////////////////////////////////////
                    8369   ; // if instruction is MOVE USP,An
                    8370   ; /////////////////////////////////////////////////////////////////////////////////
                    8371   ; if((*OpCode & (unsigned short int)(0xFFF0)) == (unsigned short int)(0x4E60))
000049F2  2042      8372          move.l    D2,A0
000049F4  3010      8373          move.w    (A0),D0
000049F6  C07C FFF0 8374          and.w     #65520,D0
000049FA  0C40 4E60 8375          cmp.w     #20064,D0
000049FE  6600 0060 8376          bne       DisassembleInstruction_208
                    8377   ; {
                    8378   ; InstructionSize = 1;
00004A02  24BC 0000 8379          move.l    #1,(A2)
00004A06  0001      
                    8380   ; Register = (*OpCode & (unsigned short int)(0x0007)) ;
00004A08  2042      8381          move.l    D2,A0
00004A0A  3010      8382          move.w    (A0),D0
00004A0C  C07C 0007 8383          and.w     #7,D0
00004A10  3D40 FFEA 8384          move.w    D0,-22(A6)
                    8385   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0x0008))        // transfer sp to address regier
00004A14  2042      8386          move.l    D2,A0
00004A16  3010      8387          move.w    (A0),D0
00004A18  C07C 0008 8388          and.w     #8,D0
00004A1C  0C40 0008 8389          cmp.w     #8,D0
00004A20  6620      8390          bne.s     DisassembleInstruction_207
                    8391   ; sprintf(Instruction, "MOVE USP,A%d", Register);
00004A22  322E FFEA 8392          move.w    -22(A6),D1
00004A26  C2BC 0000 8393          and.l     #65535,D1
00004A2A  FFFF      
00004A2C  2F01      8394          move.l    D1,-(A7)
00004A2E  4879 0000 8395          pea       @m68kde~1_275.L
00004A32  780C      
00004A34  4879 0B00 8396          pea       _Instruction.L
00004A38  04E2      
00004A3A  4E95      8397          jsr       (A5)
00004A3C  DEFC 000C 8398          add.w     #12,A7
00004A40  601E      8399          bra.s     DisassembleInstruction_208
                    8400   DisassembleInstruction_207:
                    8401   ; else
                    8402   ; sprintf(Instruction, "MOVE A%d,USP", Register);
00004A42  322E FFEA 8403          move.w    -22(A6),D1
00004A46  C2BC 0000 8404          and.l     #65535,D1
00004A4A  FFFF      
00004A4C  2F01      8405          move.l    D1,-(A7)
00004A4E  4879 0000 8406          pea       @m68kde~1_276.L
00004A52  781A      
00004A54  4879 0B00 8407          pea       _Instruction.L
00004A58  04E2      
00004A5A  4E95      8408          jsr       (A5)
00004A5C  DEFC 000C 8409          add.w     #12,A7
                    8410   DisassembleInstruction_208:
                    8411   ; }
                    8412   ; /////////////////////////////////////////////////////////////////////////////////
                    8413   ; // if instruction is MOVEM
                    8414   ; /////////////////////////////////////////////////////////////////////////////////
                    8415   ; if((*OpCode & (unsigned short int)(0xFB80)) == (unsigned short int)(0x4880))
00004A60  2042      8416          move.l    D2,A0
00004A62  3010      8417          move.w    (A0),D0
00004A64  C07C FB80 8418          and.w     #64384,D0
00004A68  0C40 4880 8419          cmp.w     #18560,D0
00004A6C  6600 01FC 8420          bne       DisassembleInstruction_230
                    8421   ; {
                    8422   ; OpMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;
00004A70  2042      8423          move.l    D2,A0
00004A72  3010      8424          move.w    (A0),D0
00004A74  E640      8425          asr.w     #3,D0
00004A76  C07C 0007 8426          and.w     #7,D0
00004A7A  3600      8427          move.w    D0,D3
                    8428   ; if( (OpMode != (unsigned short int)(0x0)) &&
00004A7C  4A43      8429          tst.w     D3
00004A7E  6700 01EA 8430          beq       DisassembleInstruction_230
00004A82  0C43 0001 8431          cmp.w     #1,D3
00004A86  6700 01E2 8432          beq       DisassembleInstruction_230
00004A8A  4A43      8433          tst.w     D3
00004A8C  6700 01DC 8434          beq       DisassembleInstruction_230
                    8435   ; (OpMode != (unsigned short int)(0x1)) &&
                    8436   ; (OpMode != (unsigned short int)(0x0)))
                    8437   ; {
                    8438   ; InstructionSize = 1;
00004A90  24BC 0000 8439          move.l    #1,(A2)
00004A94  0001      
                    8440   ; strcpy(Instruction,"MOVEM") ;
00004A96  4879 0000 8441          pea       @m68kde~1_277.L
00004A9A  7828      
00004A9C  4879 0B00 8442          pea       _Instruction.L
00004AA0  04E2      
00004AA2  4EB9 0000 8443          jsr       _strcpy
00004AA6  5586      
00004AA8  504F      8444          addq.w    #8,A7
                    8445   ; InstructionSize ++ ;
00004AAA  5292      8446          addq.l    #1,(A2)
                    8447   ; if((*OpCode & (unsigned short int)(0x0040)) == (unsigned short int)(0x0))
00004AAC  2042      8448          move.l    D2,A0
00004AAE  3010      8449          move.w    (A0),D0
00004AB0  C07C 0040 8450          and.w     #64,D0
00004AB4  660E      8451          bne.s     DisassembleInstruction_213
                    8452   ; strcatInstruction(".W ") ;
00004AB6  4879 0000 8453          pea       @m68kde~1_171.L
00004ABA  7566      
00004ABC  4EB8 0CCC 8454          jsr       _strcatInstruction
00004AC0  584F      8455          addq.w    #4,A7
00004AC2  600C      8456          bra.s     DisassembleInstruction_214
                    8457   DisassembleInstruction_213:
                    8458   ; else
                    8459   ; strcatInstruction(".L ") ;
00004AC4  4879 0000 8460          pea       @m68kde~1_172.L
00004AC8  756A      
00004ACA  4EB8 0CCC 8461          jsr       _strcatInstruction
00004ACE  584F      8462          addq.w    #4,A7
                    8463   DisassembleInstruction_214:
                    8464   ; // movem  reg,-(An) if bit 10 = 0
                    8465   ; if((*OpCode & (unsigned short int)(0x0400))  == (unsigned short int)(0x0000))
00004AD0  2042      8466          move.l    D2,A0
00004AD2  3010      8467          move.w    (A0),D0
00004AD4  C07C 0400 8468          and.w     #1024,D0
00004AD8  6600 00D2 8469          bne       DisassembleInstruction_215
                    8470   ; {
                    8471   ; Mask = 0x8000 ;                     // bit 15 = 1
00004ADC  3D7C 8000 8472          move.w    #32768,-2(A6)
00004AE0  FFFE      
                    8473   ; DoneSlash = 0 ;
00004AE2  4246      8474          clr.w     D6
                    8475   ; for(i = 0; i < 16; i ++)    {
00004AE4  4284      8476          clr.l     D4
                    8477   DisassembleInstruction_217:
00004AE6  0C84 0000 8478          cmp.l     #16,D4
00004AEA  0010      
00004AEC  6C00 009E 8479          bge       DisassembleInstruction_219
                    8480   ; printf("") ;    // fixes bug otherwise the address registers doen't get printed (don't know why), something to do with sprintf I guess
00004AF0  4879 0000 8481          pea       @m68kde~1_33.L
00004AF4  6416      
00004AF6  4EB9 0000 8482          jsr       _printf
00004AFA  5782      
00004AFC  584F      8483          addq.w    #4,A7
                    8484   ; if((OpCode[1] & Mask) == Mask)    {
00004AFE  2042      8485          move.l    D2,A0
00004B00  3028 0002 8486          move.w    2(A0),D0
00004B04  C06E FFFE 8487          and.w     -2(A6),D0
00004B08  B06E FFFE 8488          cmp.w     -2(A6),D0
00004B0C  6600 006E 8489          bne       DisassembleInstruction_220
                    8490   ; if(i < 8 )  {
00004B10  0C84 0000 8491          cmp.l     #8,D4
00004B14  0008      
00004B16  6C2C      8492          bge.s     DisassembleInstruction_222
                    8493   ; if(DoneSlash == 0)  {
00004B18  4A46      8494          tst.w     D6
00004B1A  6614      8495          bne.s     DisassembleInstruction_224
                    8496   ; sprintf(TempString, "D%d", i) ;
00004B1C  2F04      8497          move.l    D4,-(A7)
00004B1E  4879 0000 8498          pea       @m68kde~1_278.L
00004B22  782E      
00004B24  2F0C      8499          move.l    A4,-(A7)
00004B26  4E95      8500          jsr       (A5)
00004B28  DEFC 000C 8501          add.w     #12,A7
                    8502   ; DoneSlash = 1;
00004B2C  7C01      8503          moveq     #1,D6
00004B2E  6010      8504          bra.s     DisassembleInstruction_225
                    8505   DisassembleInstruction_224:
                    8506   ; }
                    8507   ; else
                    8508   ; sprintf(TempString, "/D%d", i) ;
00004B30  2F04      8509          move.l    D4,-(A7)
00004B32  4879 0000 8510          pea       @m68kde~1_279.L
00004B36  7832      
00004B38  2F0C      8511          move.l    A4,-(A7)
00004B3A  4E95      8512          jsr       (A5)
00004B3C  DEFC 000C 8513          add.w     #12,A7
                    8514   DisassembleInstruction_225:
00004B40  6000 0032 8515          bra       DisassembleInstruction_227
                    8516   DisassembleInstruction_222:
                    8517   ; }
                    8518   ; else   {
                    8519   ; if(DoneSlash == 0)  {
00004B44  4A46      8520          tst.w     D6
00004B46  6618      8521          bne.s     DisassembleInstruction_226
                    8522   ; sprintf(TempString, "A%d", i-8) ;
00004B48  2204      8523          move.l    D4,D1
00004B4A  5181      8524          subq.l    #8,D1
00004B4C  2F01      8525          move.l    D1,-(A7)
00004B4E  4879 0000 8526          pea       @m68kde~1_280.L
00004B52  7838      
00004B54  2F0C      8527          move.l    A4,-(A7)
00004B56  4E95      8528          jsr       (A5)
00004B58  DEFC 000C 8529          add.w     #12,A7
                    8530   ; DoneSlash = 1;
00004B5C  7C01      8531          moveq     #1,D6
00004B5E  6014      8532          bra.s     DisassembleInstruction_227
                    8533   DisassembleInstruction_226:
                    8534   ; }
                    8535   ; else
                    8536   ; sprintf(TempString, "/A%d", i-8) ;
00004B60  2204      8537          move.l    D4,D1
00004B62  5181      8538          subq.l    #8,D1
00004B64  2F01      8539          move.l    D1,-(A7)
00004B66  4879 0000 8540          pea       @m68kde~1_281.L
00004B6A  783C      
00004B6C  2F0C      8541          move.l    A4,-(A7)
00004B6E  4E95      8542          jsr       (A5)
00004B70  DEFC 000C 8543          add.w     #12,A7
                    8544   DisassembleInstruction_227:
                    8545   ; }
                    8546   ; strcatInstruction(TempString) ;
00004B74  2F0C      8547          move.l    A4,-(A7)
00004B76  4EB8 0CCC 8548          jsr       _strcatInstruction
00004B7A  584F      8549          addq.w    #4,A7
                    8550   DisassembleInstruction_220:
                    8551   ; }
                    8552   ; Mask = Mask >> 1 ;
00004B7C  302E FFFE 8553          move.w    -2(A6),D0
00004B80  E240      8554          asr.w     #1,D0
00004B82  3D40 FFFE 8555          move.w    D0,-2(A6)
00004B86  5284      8556          addq.l    #1,D4
00004B88  6000 FF5C 8557          bra       DisassembleInstruction_217
                    8558   DisassembleInstruction_219:
                    8559   ; }
                    8560   ; strcatInstruction(",") ;
00004B8C  4879 0000 8561          pea       @m68kde~1_188.L
00004B90  75B4      
00004B92  4EB8 0CCC 8562          jsr       _strcatInstruction
00004B96  584F      8563          addq.w    #4,A7
                    8564   ; Decode6BitEA(OpCode,0,0,0) ;
00004B98  42A7      8565          clr.l     -(A7)
00004B9A  42A7      8566          clr.l     -(A7)
00004B9C  42A7      8567          clr.l     -(A7)
00004B9E  2F02      8568          move.l    D2,-(A7)
00004BA0  4EB8 30D0 8569          jsr       _Decode6BitEA
00004BA4  DEFC 0010 8570          add.w     #16,A7
00004BA8  6000 00C0 8571          bra       DisassembleInstruction_230
                    8572   DisassembleInstruction_215:
                    8573   ; }
                    8574   ; //movem  (An)+,reg
                    8575   ; else    {
                    8576   ; Decode6BitEA(OpCode,0,0,0) ;
00004BAC  42A7      8577          clr.l     -(A7)
00004BAE  42A7      8578          clr.l     -(A7)
00004BB0  42A7      8579          clr.l     -(A7)
00004BB2  2F02      8580          move.l    D2,-(A7)
00004BB4  4EB8 30D0 8581          jsr       _Decode6BitEA
00004BB8  DEFC 0010 8582          add.w     #16,A7
                    8583   ; strcatInstruction(",") ;
00004BBC  4879 0000 8584          pea       @m68kde~1_188.L
00004BC0  75B4      
00004BC2  4EB8 0CCC 8585          jsr       _strcatInstruction
00004BC6  584F      8586          addq.w    #4,A7
                    8587   ; Mask = 0x0001 ;                     // bit 0 = 1
00004BC8  3D7C 0001 8588          move.w    #1,-2(A6)
00004BCC  FFFE      
                    8589   ; DoneSlash = 0 ;
00004BCE  4246      8590          clr.w     D6
                    8591   ; for(i = 0; i < 16 ; i ++)    {
00004BD0  4284      8592          clr.l     D4
                    8593   DisassembleInstruction_228:
00004BD2  0C84 0000 8594          cmp.l     #16,D4
00004BD6  0010      
00004BD8  6C00 0090 8595          bge       DisassembleInstruction_230
                    8596   ; if((OpCode[1] & Mask) == Mask)    {
00004BDC  2042      8597          move.l    D2,A0
00004BDE  3028 0002 8598          move.w    2(A0),D0
00004BE2  C06E FFFE 8599          and.w     -2(A6),D0
00004BE6  B06E FFFE 8600          cmp.w     -2(A6),D0
00004BEA  6600 006E 8601          bne       DisassembleInstruction_231
                    8602   ; if(i < 8)   {       // data registers in bits 7-0
00004BEE  0C84 0000 8603          cmp.l     #8,D4
00004BF2  0008      
00004BF4  6C2C      8604          bge.s     DisassembleInstruction_233
                    8605   ; if(DoneSlash == 0)  {
00004BF6  4A46      8606          tst.w     D6
00004BF8  6614      8607          bne.s     DisassembleInstruction_235
                    8608   ; sprintf(TempString, "D%d", i) ;
00004BFA  2F04      8609          move.l    D4,-(A7)
00004BFC  4879 0000 8610          pea       @m68kde~1_278.L
00004C00  782E      
00004C02  2F0C      8611          move.l    A4,-(A7)
00004C04  4E95      8612          jsr       (A5)
00004C06  DEFC 000C 8613          add.w     #12,A7
                    8614   ; DoneSlash = 1;
00004C0A  7C01      8615          moveq     #1,D6
00004C0C  6010      8616          bra.s     DisassembleInstruction_236
                    8617   DisassembleInstruction_235:
                    8618   ; }
                    8619   ; else
                    8620   ; sprintf(TempString, "/D%d", i) ;
00004C0E  2F04      8621          move.l    D4,-(A7)
00004C10  4879 0000 8622          pea       @m68kde~1_279.L
00004C14  7832      
00004C16  2F0C      8623          move.l    A4,-(A7)
00004C18  4E95      8624          jsr       (A5)
00004C1A  DEFC 000C 8625          add.w     #12,A7
                    8626   DisassembleInstruction_236:
00004C1E  6000 0032 8627          bra       DisassembleInstruction_238
                    8628   DisassembleInstruction_233:
                    8629   ; }
                    8630   ; else    {
                    8631   ; if(DoneSlash == 0)  {
00004C22  4A46      8632          tst.w     D6
00004C24  6618      8633          bne.s     DisassembleInstruction_237
                    8634   ; sprintf(TempString, "A%d", i-8) ;
00004C26  2204      8635          move.l    D4,D1
00004C28  5181      8636          subq.l    #8,D1
00004C2A  2F01      8637          move.l    D1,-(A7)
00004C2C  4879 0000 8638          pea       @m68kde~1_280.L
00004C30  7838      
00004C32  2F0C      8639          move.l    A4,-(A7)
00004C34  4E95      8640          jsr       (A5)
00004C36  DEFC 000C 8641          add.w     #12,A7
                    8642   ; DoneSlash = 1;
00004C3A  7C01      8643          moveq     #1,D6
00004C3C  6014      8644          bra.s     DisassembleInstruction_238
                    8645   DisassembleInstruction_237:
                    8646   ; }
                    8647   ; else
                    8648   ; sprintf(TempString, "/A%d", i-8) ;
00004C3E  2204      8649          move.l    D4,D1
00004C40  5181      8650          subq.l    #8,D1
00004C42  2F01      8651          move.l    D1,-(A7)
00004C44  4879 0000 8652          pea       @m68kde~1_281.L
00004C48  783C      
00004C4A  2F0C      8653          move.l    A4,-(A7)
00004C4C  4E95      8654          jsr       (A5)
00004C4E  DEFC 000C 8655          add.w     #12,A7
                    8656   DisassembleInstruction_238:
                    8657   ; }
                    8658   ; strcatInstruction(TempString) ;
00004C52  2F0C      8659          move.l    A4,-(A7)
00004C54  4EB8 0CCC 8660          jsr       _strcatInstruction
00004C58  584F      8661          addq.w    #4,A7
                    8662   DisassembleInstruction_231:
                    8663   ; }
                    8664   ; Mask = Mask << 1 ;
00004C5A  302E FFFE 8665          move.w    -2(A6),D0
00004C5E  E340      8666          asl.w     #1,D0
00004C60  3D40 FFFE 8667          move.w    D0,-2(A6)
00004C64  5284      8668          addq.l    #1,D4
00004C66  6000 FF6A 8669          bra       DisassembleInstruction_228
                    8670   DisassembleInstruction_230:
                    8671   ; }
                    8672   ; }
                    8673   ; }
                    8674   ; }
                    8675   ; /////////////////////////////////////////////////////////////////////////////////
                    8676   ; // if instruction is MOVEP
                    8677   ; /////////////////////////////////////////////////////////////////////////////////
                    8678   ; if((*OpCode & (unsigned short int)(0xF038)) == (unsigned short int)(0x0008))
00004C6A  2042      8679          move.l    D2,A0
00004C6C  3010      8680          move.w    (A0),D0
00004C6E  C07C F038 8681          and.w     #61496,D0
00004C72  0C40 0008 8682          cmp.w     #8,D0
00004C76  6600 0112 8683          bne       DisassembleInstruction_247
                    8684   ; {
                    8685   ; InstructionSize = 1;
00004C7A  24BC 0000 8686          move.l    #1,(A2)
00004C7E  0001      
                    8687   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004C80  2042      8688          move.l    D2,A0
00004C82  3010      8689          move.w    (A0),D0
00004C84  E040      8690          asr.w     #8,D0
00004C86  E240      8691          asr.w     #1,D0
00004C88  C07C 0007 8692          and.w     #7,D0
00004C8C  3A00      8693          move.w    D0,D5
                    8694   ; AddressRegister = (*OpCode & (unsigned short int)(0x0007)) ;
00004C8E  2042      8695          move.l    D2,A0
00004C90  3010      8696          move.w    (A0),D0
00004C92  C07C 0007 8697          and.w     #7,D0
00004C96  3D40 FFF8 8698          move.w    D0,-8(A6)
                    8699   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007)  ;
00004C9A  2042      8700          move.l    D2,A0
00004C9C  3010      8701          move.w    (A0),D0
00004C9E  EC40      8702          asr.w     #6,D0
00004CA0  C07C 0007 8703          and.w     #7,D0
00004CA4  3600      8704          move.w    D0,D3
                    8705   ; InstructionSize++ ;
00004CA6  5292      8706          addq.l    #1,(A2)
                    8707   ; if(OpMode == (unsigned short int)(0x4)) // transfer word from memory to register
00004CA8  0C43 0004 8708          cmp.w     #4,D3
00004CAC  6634      8709          bne.s     DisassembleInstruction_241
                    8710   ; sprintf(Instruction, "MOVEP.W $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004CAE  CABC 0000 8711          and.l     #65535,D5
00004CB2  FFFF      
00004CB4  2F05      8712          move.l    D5,-(A7)
00004CB6  322E FFF8 8713          move.w    -8(A6),D1
00004CBA  C2BC 0000 8714          and.l     #65535,D1
00004CBE  FFFF      
00004CC0  2F01      8715          move.l    D1,-(A7)
00004CC2  2042      8716          move.l    D2,A0
00004CC4  3228 0002 8717          move.w    2(A0),D1
00004CC8  48C1      8718          ext.l     D1
00004CCA  2F01      8719          move.l    D1,-(A7)
00004CCC  4879 0000 8720          pea       @m68kde~1_282.L
00004CD0  7842      
00004CD2  4879 0B00 8721          pea       _Instruction.L
00004CD6  04E2      
00004CD8  4E95      8722          jsr       (A5)
00004CDA  DEFC 0014 8723          add.w     #20,A7
00004CDE  6000 00AA 8724          bra       DisassembleInstruction_247
                    8725   DisassembleInstruction_241:
                    8726   ; else if(OpMode == (unsigned short int)(0x5)) // transfer long from memory to register
00004CE2  0C43 0005 8727          cmp.w     #5,D3
00004CE6  6634      8728          bne.s     DisassembleInstruction_243
                    8729   ; sprintf(Instruction, "MOVEP.L $%X(A%d),D%d", OpCode[1], AddressRegister, DataRegister) ;
00004CE8  CABC 0000 8730          and.l     #65535,D5
00004CEC  FFFF      
00004CEE  2F05      8731          move.l    D5,-(A7)
00004CF0  322E FFF8 8732          move.w    -8(A6),D1
00004CF4  C2BC 0000 8733          and.l     #65535,D1
00004CF8  FFFF      
00004CFA  2F01      8734          move.l    D1,-(A7)
00004CFC  2042      8735          move.l    D2,A0
00004CFE  3228 0002 8736          move.w    2(A0),D1
00004D02  48C1      8737          ext.l     D1
00004D04  2F01      8738          move.l    D1,-(A7)
00004D06  4879 0000 8739          pea       @m68kde~1_283.L
00004D0A  7858      
00004D0C  4879 0B00 8740          pea       _Instruction.L
00004D10  04E2      
00004D12  4E95      8741          jsr       (A5)
00004D14  DEFC 0014 8742          add.w     #20,A7
00004D18  6000 0070 8743          bra       DisassembleInstruction_247
                    8744   DisassembleInstruction_243:
                    8745   ; else if(OpMode == (unsigned short int)(0x6)) // transfer long from register to memory
00004D1C  0C43 0006 8746          cmp.w     #6,D3
00004D20  6632      8747          bne.s     DisassembleInstruction_245
                    8748   ; sprintf(Instruction, "MOVEP.W D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004D22  322E FFF8 8749          move.w    -8(A6),D1
00004D26  C2BC 0000 8750          and.l     #65535,D1
00004D2A  FFFF      
00004D2C  2F01      8751          move.l    D1,-(A7)
00004D2E  2042      8752          move.l    D2,A0
00004D30  3228 0002 8753          move.w    2(A0),D1
00004D34  48C1      8754          ext.l     D1
00004D36  2F01      8755          move.l    D1,-(A7)
00004D38  CABC 0000 8756          and.l     #65535,D5
00004D3C  FFFF      
00004D3E  2F05      8757          move.l    D5,-(A7)
00004D40  4879 0000 8758          pea       @m68kde~1_284.L
00004D44  786E      
00004D46  4879 0B00 8759          pea       _Instruction.L
00004D4A  04E2      
00004D4C  4E95      8760          jsr       (A5)
00004D4E  DEFC 0014 8761          add.w     #20,A7
00004D52  6036      8762          bra.s     DisassembleInstruction_247
                    8763   DisassembleInstruction_245:
                    8764   ; else if(OpMode == (unsigned short int)(0x7)) // transfer long from register to memory
00004D54  0C43 0007 8765          cmp.w     #7,D3
00004D58  6630      8766          bne.s     DisassembleInstruction_247
                    8767   ; sprintf(Instruction, "MOVEP.L D%d,$%X(A%d)", DataRegister, OpCode[1], AddressRegister ) ;
00004D5A  322E FFF8 8768          move.w    -8(A6),D1
00004D5E  C2BC 0000 8769          and.l     #65535,D1
00004D62  FFFF      
00004D64  2F01      8770          move.l    D1,-(A7)
00004D66  2042      8771          move.l    D2,A0
00004D68  3228 0002 8772          move.w    2(A0),D1
00004D6C  48C1      8773          ext.l     D1
00004D6E  2F01      8774          move.l    D1,-(A7)
00004D70  CABC 0000 8775          and.l     #65535,D5
00004D74  FFFF      
00004D76  2F05      8776          move.l    D5,-(A7)
00004D78  4879 0000 8777          pea       @m68kde~1_285.L
00004D7C  7884      
00004D7E  4879 0B00 8778          pea       _Instruction.L
00004D82  04E2      
00004D84  4E95      8779          jsr       (A5)
00004D86  DEFC 0014 8780          add.w     #20,A7
                    8781   DisassembleInstruction_247:
                    8782   ; }
                    8783   ; /////////////////////////////////////////////////////////////////////////////////
                    8784   ; // if instruction is MOVEQ
                    8785   ; /////////////////////////////////////////////////////////////////////////////////
                    8786   ; if((*OpCode & (unsigned short int)(0xF100)) == (unsigned short int)(0x7000))
00004D8A  2042      8787          move.l    D2,A0
00004D8C  3010      8788          move.w    (A0),D0
00004D8E  C07C F100 8789          and.w     #61696,D0
00004D92  0C40 7000 8790          cmp.w     #28672,D0
00004D96  6600 0040 8791          bne       DisassembleInstruction_249
                    8792   ; {
                    8793   ; InstructionSize = 1;
00004D9A  24BC 0000 8794          move.l    #1,(A2)
00004D9E  0001      
                    8795   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007) ;
00004DA0  2042      8796          move.l    D2,A0
00004DA2  3010      8797          move.w    (A0),D0
00004DA4  E040      8798          asr.w     #8,D0
00004DA6  E240      8799          asr.w     #1,D0
00004DA8  C07C 0007 8800          and.w     #7,D0
00004DAC  3A00      8801          move.w    D0,D5
                    8802   ; sprintf(Instruction, "MOVEQ #$%X,D%d", (*OpCode & (unsigned short int)(0x00FF)), DataRegister) ;
00004DAE  CABC 0000 8803          and.l     #65535,D5
00004DB2  FFFF      
00004DB4  2F05      8804          move.l    D5,-(A7)
00004DB6  2042      8805          move.l    D2,A0
00004DB8  3210      8806          move.w    (A0),D1
00004DBA  C27C 00FF 8807          and.w     #255,D1
00004DBE  C2BC 0000 8808          and.l     #65535,D1
00004DC2  FFFF      
00004DC4  2F01      8809          move.l    D1,-(A7)
00004DC6  4879 0000 8810          pea       @m68kde~1_286.L
00004DCA  789A      
00004DCC  4879 0B00 8811          pea       _Instruction.L
00004DD0  04E2      
00004DD2  4E95      8812          jsr       (A5)
00004DD4  DEFC 0010 8813          add.w     #16,A7
                    8814   DisassembleInstruction_249:
                    8815   ; }
                    8816   ; /////////////////////////////////////////////////////////////////////////////////
                    8817   ; // if instruction is MULS.W
                    8818   ; /////////////////////////////////////////////////////////////////////////////////
                    8819   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC1C0))
00004DD8  2042      8820          move.l    D2,A0
00004DDA  3010      8821          move.w    (A0),D0
00004DDC  C07C F1C0 8822          and.w     #61888,D0
00004DE0  0C40 C1C0 8823          cmp.w     #49600,D0
00004DE4  6600 004E 8824          bne       DisassembleInstruction_251
                    8825   ; {
                    8826   ; InstructionSize = 1;
00004DE8  24BC 0000 8827          move.l    #1,(A2)
00004DEC  0001      
                    8828   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004DEE  2042      8829          move.l    D2,A0
00004DF0  3010      8830          move.w    (A0),D0
00004DF2  E040      8831          asr.w     #8,D0
00004DF4  E240      8832          asr.w     #1,D0
00004DF6  C07C 0007 8833          and.w     #7,D0
00004DFA  3A00      8834          move.w    D0,D5
                    8835   ; strcpyInstruction("MULS ");
00004DFC  4879 0000 8836          pea       @m68kde~1_287.L
00004E00  78AA      
00004E02  4E93      8837          jsr       (A3)
00004E04  584F      8838          addq.w    #4,A7
                    8839   ; Decode6BitEA(OpCode,0,0,0) ;
00004E06  42A7      8840          clr.l     -(A7)
00004E08  42A7      8841          clr.l     -(A7)
00004E0A  42A7      8842          clr.l     -(A7)
00004E0C  2F02      8843          move.l    D2,-(A7)
00004E0E  4EB8 30D0 8844          jsr       _Decode6BitEA
00004E12  DEFC 0010 8845          add.w     #16,A7
                    8846   ; sprintf(TempString, ",D%d", DataRegister) ;
00004E16  CABC 0000 8847          and.l     #65535,D5
00004E1A  FFFF      
00004E1C  2F05      8848          move.l    D5,-(A7)
00004E1E  4879 0000 8849          pea       @m68kde~1_243.L
00004E22  7700      
00004E24  2F0C      8850          move.l    A4,-(A7)
00004E26  4E95      8851          jsr       (A5)
00004E28  DEFC 000C 8852          add.w     #12,A7
                    8853   ; strcatInstruction(TempString);
00004E2C  2F0C      8854          move.l    A4,-(A7)
00004E2E  4EB8 0CCC 8855          jsr       _strcatInstruction
00004E32  584F      8856          addq.w    #4,A7
                    8857   DisassembleInstruction_251:
                    8858   ; }
                    8859   ; /////////////////////////////////////////////////////////////////////////////////
                    8860   ; // if instruction is MULU.W
                    8861   ; /////////////////////////////////////////////////////////////////////////////////
                    8862   ; if((*OpCode & (unsigned short int)(0xF1C0)) == (unsigned short int)(0xC0C0))
00004E34  2042      8863          move.l    D2,A0
00004E36  3010      8864          move.w    (A0),D0
00004E38  C07C F1C0 8865          and.w     #61888,D0
00004E3C  0C40 C0C0 8866          cmp.w     #49344,D0
00004E40  6600 004E 8867          bne       DisassembleInstruction_253
                    8868   ; {
                    8869   ; InstructionSize = 1;
00004E44  24BC 0000 8870          move.l    #1,(A2)
00004E48  0001      
                    8871   ; DataRegister = (*OpCode >> 9) & (unsigned short int)(0x0007);
00004E4A  2042      8872          move.l    D2,A0
00004E4C  3010      8873          move.w    (A0),D0
00004E4E  E040      8874          asr.w     #8,D0
00004E50  E240      8875          asr.w     #1,D0
00004E52  C07C 0007 8876          and.w     #7,D0
00004E56  3A00      8877          move.w    D0,D5
                    8878   ; strcpyInstruction("MULU ");
00004E58  4879 0000 8879          pea       @m68kde~1_288.L
00004E5C  78B0      
00004E5E  4E93      8880          jsr       (A3)
00004E60  584F      8881          addq.w    #4,A7
                    8882   ; Decode6BitEA(OpCode,0,0,0) ;
00004E62  42A7      8883          clr.l     -(A7)
00004E64  42A7      8884          clr.l     -(A7)
00004E66  42A7      8885          clr.l     -(A7)
00004E68  2F02      8886          move.l    D2,-(A7)
00004E6A  4EB8 30D0 8887          jsr       _Decode6BitEA
00004E6E  DEFC 0010 8888          add.w     #16,A7
                    8889   ; sprintf(TempString, ",D%d", DataRegister) ;
00004E72  CABC 0000 8890          and.l     #65535,D5
00004E76  FFFF      
00004E78  2F05      8891          move.l    D5,-(A7)
00004E7A  4879 0000 8892          pea       @m68kde~1_243.L
00004E7E  7700      
00004E80  2F0C      8893          move.l    A4,-(A7)
00004E82  4E95      8894          jsr       (A5)
00004E84  DEFC 000C 8895          add.w     #12,A7
                    8896   ; strcatInstruction(TempString);
00004E88  2F0C      8897          move.l    A4,-(A7)
00004E8A  4EB8 0CCC 8898          jsr       _strcatInstruction
00004E8E  584F      8899          addq.w    #4,A7
                    8900   DisassembleInstruction_253:
                    8901   ; }
                    8902   ; /////////////////////////////////////////////////////////////////////////////////
                    8903   ; // if instruction is NBCD <EA>
                    8904   ; /////////////////////////////////////////////////////////////////////////////////
                    8905   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4800))
00004E90  2042      8906          move.l    D2,A0
00004E92  3010      8907          move.w    (A0),D0
00004E94  C07C FFC0 8908          and.w     #65472,D0
00004E98  0C40 4800 8909          cmp.w     #18432,D0
00004E9C  6620      8910          bne.s     DisassembleInstruction_255
                    8911   ; {
                    8912   ; InstructionSize = 1;
00004E9E  24BC 0000 8913          move.l    #1,(A2)
00004EA2  0001      
                    8914   ; strcpyInstruction("NBCD ");
00004EA4  4879 0000 8915          pea       @m68kde~1_289.L
00004EA8  78B6      
00004EAA  4E93      8916          jsr       (A3)
00004EAC  584F      8917          addq.w    #4,A7
                    8918   ; Decode6BitEA(OpCode,0,0,0);
00004EAE  42A7      8919          clr.l     -(A7)
00004EB0  42A7      8920          clr.l     -(A7)
00004EB2  42A7      8921          clr.l     -(A7)
00004EB4  2F02      8922          move.l    D2,-(A7)
00004EB6  4EB8 30D0 8923          jsr       _Decode6BitEA
00004EBA  DEFC 0010 8924          add.w     #16,A7
                    8925   DisassembleInstruction_255:
                    8926   ; }
                    8927   ; /////////////////////////////////////////////////////////////////////////////////
                    8928   ; // if instruction is NEG <EA>
                    8929   ; /////////////////////////////////////////////////////////////////////////////////
                    8930   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4400))
00004EBE  2042      8931          move.l    D2,A0
00004EC0  3010      8932          move.w    (A0),D0
00004EC2  C07C FF00 8933          and.w     #65280,D0
00004EC6  0C40 4400 8934          cmp.w     #17408,D0
00004ECA  6600 0046 8935          bne       DisassembleInstruction_259
                    8936   ; {
                    8937   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004ECE  2042      8938          move.l    D2,A0
00004ED0  3010      8939          move.w    (A0),D0
00004ED2  EC40      8940          asr.w     #6,D0
00004ED4  C07C 0003 8941          and.w     #3,D0
00004ED8  0C40 0003 8942          cmp.w     #3,D0
00004EDC  6700 0034 8943          beq       DisassembleInstruction_259
                    8944   ; {
                    8945   ; InstructionSize = 1;
00004EE0  24BC 0000 8946          move.l    #1,(A2)
00004EE4  0001      
                    8947   ; strcpyInstruction("NEG");
00004EE6  4879 0000 8948          pea       @m68kde~1_290.L
00004EEA  78BC      
00004EEC  4E93      8949          jsr       (A3)
00004EEE  584F      8950          addq.w    #4,A7
                    8951   ; Decode2BitOperandSize(*OpCode) ;
00004EF0  2042      8952          move.l    D2,A0
00004EF2  3210      8953          move.w    (A0),D1
00004EF4  C2BC 0000 8954          and.l     #65535,D1
00004EF8  FFFF      
00004EFA  2F01      8955          move.l    D1,-(A7)
00004EFC  4EB8 2E3C 8956          jsr       _Decode2BitOperandSize
00004F00  584F      8957          addq.w    #4,A7
                    8958   ; Decode6BitEA(OpCode,0,0,0);
00004F02  42A7      8959          clr.l     -(A7)
00004F04  42A7      8960          clr.l     -(A7)
00004F06  42A7      8961          clr.l     -(A7)
00004F08  2F02      8962          move.l    D2,-(A7)
00004F0A  4EB8 30D0 8963          jsr       _Decode6BitEA
00004F0E  DEFC 0010 8964          add.w     #16,A7
                    8965   DisassembleInstruction_259:
                    8966   ; }
                    8967   ; }
                    8968   ; /////////////////////////////////////////////////////////////////////////////////
                    8969   ; // if instruction is NEGX <EA>
                    8970   ; /////////////////////////////////////////////////////////////////////////////////
                    8971   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4000))
00004F12  2042      8972          move.l    D2,A0
00004F14  3010      8973          move.w    (A0),D0
00004F16  C07C FF00 8974          and.w     #65280,D0
00004F1A  0C40 4000 8975          cmp.w     #16384,D0
00004F1E  6600 0046 8976          bne       DisassembleInstruction_263
                    8977   ; {
                    8978   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F22  2042      8979          move.l    D2,A0
00004F24  3010      8980          move.w    (A0),D0
00004F26  EC40      8981          asr.w     #6,D0
00004F28  C07C 0003 8982          and.w     #3,D0
00004F2C  0C40 0003 8983          cmp.w     #3,D0
00004F30  6700 0034 8984          beq       DisassembleInstruction_263
                    8985   ; {
                    8986   ; InstructionSize = 1;
00004F34  24BC 0000 8987          move.l    #1,(A2)
00004F38  0001      
                    8988   ; strcpyInstruction("NEGX");
00004F3A  4879 0000 8989          pea       @m68kde~1_291.L
00004F3E  78C0      
00004F40  4E93      8990          jsr       (A3)
00004F42  584F      8991          addq.w    #4,A7
                    8992   ; Decode2BitOperandSize(*OpCode) ;
00004F44  2042      8993          move.l    D2,A0
00004F46  3210      8994          move.w    (A0),D1
00004F48  C2BC 0000 8995          and.l     #65535,D1
00004F4C  FFFF      
00004F4E  2F01      8996          move.l    D1,-(A7)
00004F50  4EB8 2E3C 8997          jsr       _Decode2BitOperandSize
00004F54  584F      8998          addq.w    #4,A7
                    8999   ; Decode6BitEA(OpCode,0,0,0);
00004F56  42A7      9000          clr.l     -(A7)
00004F58  42A7      9001          clr.l     -(A7)
00004F5A  42A7      9002          clr.l     -(A7)
00004F5C  2F02      9003          move.l    D2,-(A7)
00004F5E  4EB8 30D0 9004          jsr       _Decode6BitEA
00004F62  DEFC 0010 9005          add.w     #16,A7
                    9006   DisassembleInstruction_263:
                    9007   ; }
                    9008   ; }
                    9009   ; /////////////////////////////////////////////////////////////////////////////////
                    9010   ; // if instruction is NOP
                    9011   ; /////////////////////////////////////////////////////////////////////////////////
                    9012   ; if(*OpCode == (unsigned short int)(0x4E71))
00004F66  2042      9013          move.l    D2,A0
00004F68  3010      9014          move.w    (A0),D0
00004F6A  0C40 4E71 9015          cmp.w     #20081,D0
00004F6E  6610      9016          bne.s     DisassembleInstruction_265
                    9017   ; {
                    9018   ; InstructionSize = 1;
00004F70  24BC 0000 9019          move.l    #1,(A2)
00004F74  0001      
                    9020   ; strcpyInstruction("NOP");
00004F76  4879 0000 9021          pea       @m68kde~1_292.L
00004F7A  78C6      
00004F7C  4E93      9022          jsr       (A3)
00004F7E  584F      9023          addq.w    #4,A7
                    9024   DisassembleInstruction_265:
                    9025   ; }
                    9026   ; /////////////////////////////////////////////////////////////////////////////////
                    9027   ; // if instruction is NOT <EA>
                    9028   ; /////////////////////////////////////////////////////////////////////////////////
                    9029   ; if((*OpCode & (unsigned short int)(0xFF00)) == (unsigned short int)(0x4600))
00004F80  2042      9030          move.l    D2,A0
00004F82  3010      9031          move.w    (A0),D0
00004F84  C07C FF00 9032          and.w     #65280,D0
00004F88  0C40 4600 9033          cmp.w     #17920,D0
00004F8C  6600 0046 9034          bne       DisassembleInstruction_269
                    9035   ; {
                    9036   ; if(((*OpCode >> 6) & (unsigned short int)(0x0003)) != (unsigned short int)(0x0003))
00004F90  2042      9037          move.l    D2,A0
00004F92  3010      9038          move.w    (A0),D0
00004F94  EC40      9039          asr.w     #6,D0
00004F96  C07C 0003 9040          and.w     #3,D0
00004F9A  0C40 0003 9041          cmp.w     #3,D0
00004F9E  6700 0034 9042          beq       DisassembleInstruction_269
                    9043   ; {
                    9044   ; InstructionSize = 1;
00004FA2  24BC 0000 9045          move.l    #1,(A2)
00004FA6  0001      
                    9046   ; strcpyInstruction("NOT");
00004FA8  4879 0000 9047          pea       @m68kde~1_293.L
00004FAC  78CA      
00004FAE  4E93      9048          jsr       (A3)
00004FB0  584F      9049          addq.w    #4,A7
                    9050   ; Decode2BitOperandSize(*OpCode) ;
00004FB2  2042      9051          move.l    D2,A0
00004FB4  3210      9052          move.w    (A0),D1
00004FB6  C2BC 0000 9053          and.l     #65535,D1
00004FBA  FFFF      
00004FBC  2F01      9054          move.l    D1,-(A7)
00004FBE  4EB8 2E3C 9055          jsr       _Decode2BitOperandSize
00004FC2  584F      9056          addq.w    #4,A7
                    9057   ; Decode6BitEA(OpCode,0,0,0);
00004FC4  42A7      9058          clr.l     -(A7)
00004FC6  42A7      9059          clr.l     -(A7)
00004FC8  42A7      9060          clr.l     -(A7)
00004FCA  2F02      9061          move.l    D2,-(A7)
00004FCC  4EB8 30D0 9062          jsr       _Decode6BitEA
00004FD0  DEFC 0010 9063          add.w     #16,A7
                    9064   DisassembleInstruction_269:
                    9065   ; }
                    9066   ; }
                    9067   ; /////////////////////////////////////////////////////////////////////////////////
                    9068   ; // if instruction is OR <EA>,Dn or OR Dn,<EA>
                    9069   ; /////////////////////////////////////////////////////////////////////////////////
                    9070   ; if((*OpCode & (unsigned short int)(0xF000)) == (unsigned short int)(0x8000))
00004FD4  2042      9071          move.l    D2,A0
00004FD6  3010      9072          move.w    (A0),D0
00004FD8  C07C F000 9073          and.w     #61440,D0
00004FDC  0C40 8000 9074          cmp.w     #32768,D0
00004FE0  6600 0038 9075          bne       DisassembleInstruction_273
                    9076   ; {
                    9077   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0007) ;
00004FE4  2042      9078          move.l    D2,A0
00004FE6  3010      9079          move.w    (A0),D0
00004FE8  EC40      9080          asr.w     #6,D0
00004FEA  C07C 0007 9081          and.w     #7,D0
00004FEE  3600      9082          move.w    D0,D3
                    9083   ; if( (OpMode <= (unsigned short int)(0x0002)) ||
00004FF0  0C43 0002 9084          cmp.w     #2,D3
00004FF4  630C      9085          bls.s     DisassembleInstruction_275
00004FF6  0C43 0004 9086          cmp.w     #4,D3
00004FFA  651E      9087          blo.s     DisassembleInstruction_273
00004FFC  0C43 0006 9088          cmp.w     #6,D3
00005000  6218      9089          bhi.s     DisassembleInstruction_273
                    9090   DisassembleInstruction_275:
                    9091   ; ((OpMode >= (unsigned short int)(0x0004)) && (OpMode <= (unsigned short int)(0x0006))))
                    9092   ; {
                    9093   ; InstructionSize = 1;
00005002  24BC 0000 9094          move.l    #1,(A2)
00005006  0001      
                    9095   ; strcpyInstruction("OR") ;
00005008  4879 0000 9096          pea       @m68kde~1_294.L
0000500C  78CE      
0000500E  4E93      9097          jsr       (A3)
00005010  584F      9098          addq.w    #4,A7
                    9099   ; Decode3BitOperandMode(OpCode) ;
00005012  2F02      9100          move.l    D2,-(A7)
00005014  4EB8 34F8 9101          jsr       _Decode3BitOperandMode
00005018  584F      9102          addq.w    #4,A7
                    9103   DisassembleInstruction_273:
                    9104   ; }
                    9105   ; }
                    9106   ; /////////////////////////////////////////////////////////////////////////////////
                    9107   ; // if instruction is ORI to CCR
                    9108   ; /////////////////////////////////////////////////////////////////////////////////
                    9109   ; if(*OpCode == (unsigned short int)(0x003C))   {
0000501A  2042      9110          move.l    D2,A0
0000501C  3010      9111          move.w    (A0),D0
0000501E  0C40 003C 9112          cmp.w     #60,D0
00005022  662A      9113          bne.s     DisassembleInstruction_276
                    9114   ; sprintf(Instruction, "ORI #$%2X,CCR", OpCode[1] & (unsigned short int)(0x00FF)) ;
00005024  2042      9115          move.l    D2,A0
00005026  3228 0002 9116          move.w    2(A0),D1
0000502A  C27C 00FF 9117          and.w     #255,D1
0000502E  C2BC 0000 9118          and.l     #65535,D1
00005032  FFFF      
00005034  2F01      9119          move.l    D1,-(A7)
00005036  4879 0000 9120          pea       @m68kde~1_295.L
0000503A  78D2      
0000503C  4879 0B00 9121          pea       _Instruction.L
00005040  04E2      
00005042  4E95      9122          jsr       (A5)
00005044  DEFC 000C 9123          add.w     #12,A7
                    9124   ; InstructionSize = 2;
00005048  24BC 0000 9125          move.l    #2,(A2)
0000504C  0002      
                    9126   DisassembleInstruction_276:
                    9127   ; }
                    9128   ; /////////////////////////////////////////////////////////////////////////////////
                    9129   ; // if instruction is ORI #data,SR
                    9130   ; /////////////////////////////////////////////////////////////////////////////////
                    9131   ; if(*OpCode  == (unsigned short int)(0x007c))
0000504E  2042      9132          move.l    D2,A0
00005050  3010      9133          move.w    (A0),D0
00005052  0C40 007C 9134          cmp.w     #124,D0
00005056  6622      9135          bne.s     DisassembleInstruction_278
                    9136   ; {
                    9137   ; InstructionSize = 2;
00005058  24BC 0000 9138          move.l    #2,(A2)
0000505C  0002      
                    9139   ; sprintf(Instruction, "ORI  #$%X,SR", OpCode[1]);
0000505E  2042      9140          move.l    D2,A0
00005060  3228 0002 9141          move.w    2(A0),D1
00005064  48C1      9142          ext.l     D1
00005066  2F01      9143          move.l    D1,-(A7)
00005068  4879 0000 9144          pea       @m68kde~1_296.L
0000506C  78E0      
0000506E  4879 0B00 9145          pea       _Instruction.L
00005072  04E2      
00005074  4E95      9146          jsr       (A5)
00005076  DEFC 000C 9147          add.w     #12,A7
                    9148   DisassembleInstruction_278:
                    9149   ; }
                    9150   ; /////////////////////////////////////////////////////////////////////////////////
                    9151   ; // if instruction is PEA
                    9152   ; /////////////////////////////////////////////////////////////////////////////////
                    9153   ; if((*OpCode & (unsigned short int)(0xFFC0)) == (unsigned short int)(0x4840))
0000507A  2042      9154          move.l    D2,A0
0000507C  3010      9155          move.w    (A0),D0
0000507E  C07C FFC0 9156          and.w     #65472,D0
00005082  0C40 4840 9157          cmp.w     #18496,D0
00005086  6620      9158          bne.s     DisassembleInstruction_280
                    9159   ; {
                    9160   ; InstructionSize = 1;
00005088  24BC 0000 9161          move.l    #1,(A2)
0000508C  0001      
                    9162   ; strcpyInstruction("PEA ");
0000508E  4879 0000 9163          pea       @m68kde~1_297.L
00005092  78EE      
00005094  4E93      9164          jsr       (A3)
00005096  584F      9165          addq.w    #4,A7
                    9166   ; Decode6BitEA(OpCode,0,0,0);
00005098  42A7      9167          clr.l     -(A7)
0000509A  42A7      9168          clr.l     -(A7)
0000509C  42A7      9169          clr.l     -(A7)
0000509E  2F02      9170          move.l    D2,-(A7)
000050A0  4EB8 30D0 9171          jsr       _Decode6BitEA
000050A4  DEFC 0010 9172          add.w     #16,A7
                    9173   DisassembleInstruction_280:
                    9174   ; }
                    9175   ; /////////////////////////////////////////////////////////////////////////////////
                    9176   ; // if instruction is reset
                    9177   ; /////////////////////////////////////////////////////////////////////////////////
                    9178   ; if(*OpCode  == (unsigned short int)(0x4E70))
000050A8  2042      9179          move.l    D2,A0
000050AA  3010      9180          move.w    (A0),D0
000050AC  0C40 4E70 9181          cmp.w     #20080,D0
000050B0  6616      9182          bne.s     DisassembleInstruction_282
                    9183   ; {
                    9184   ; InstructionSize = 1;
000050B2  24BC 0000 9185          move.l    #1,(A2)
000050B6  0001      
                    9186   ; sprintf(Instruction, "RESET");
000050B8  4879 0000 9187          pea       @m68kde~1_298.L
000050BC  78F4      
000050BE  4879 0B00 9188          pea       _Instruction.L
000050C2  04E2      
000050C4  4E95      9189          jsr       (A5)
000050C6  504F      9190          addq.w    #8,A7
                    9191   DisassembleInstruction_282:
                    9192   ; }
                    9193   ; /////////////////////////////////////////////////////////////////////////////////
                    9194   ; // if instruction is RTE
                    9195   ; /////////////////////////////////////////////////////////////////////////////////
                    9196   ; if(*OpCode  == (unsigned short int)(0x4E73))
000050C8  2042      9197          move.l    D2,A0
000050CA  3010      9198          move.w    (A0),D0
000050CC  0C40 4E73 9199          cmp.w     #20083,D0
000050D0  6616      9200          bne.s     DisassembleInstruction_284
                    9201   ; {
                    9202   ; InstructionSize = 1;
000050D2  24BC 0000 9203          move.l    #1,(A2)
000050D6  0001      
                    9204   ; sprintf(Instruction, "RTE");
000050D8  4879 0000 9205          pea       @m68kde~1_299.L
000050DC  78FA      
000050DE  4879 0B00 9206          pea       _Instruction.L
000050E2  04E2      
000050E4  4E95      9207          jsr       (A5)
000050E6  504F      9208          addq.w    #8,A7
                    9209   DisassembleInstruction_284:
                    9210   ; }
                    9211   ; /////////////////////////////////////////////////////////////////////////////////
                    9212   ; // if instruction is RTR
                    9213   ; /////////////////////////////////////////////////////////////////////////////////
                    9214   ; if(*OpCode == (unsigned short int)(0x4E77))
000050E8  2042      9215          move.l    D2,A0
000050EA  3010      9216          move.w    (A0),D0
000050EC  0C40 4E77 9217          cmp.w     #20087,D0
000050F0  6610      9218          bne.s     DisassembleInstruction_286
                    9219   ; {
                    9220   ; InstructionSize = 1;
000050F2  24BC 0000 9221          move.l    #1,(A2)
000050F6  0001      
                    9222   ; strcpyInstruction("RTR");
000050F8  4879 0000 9223          pea       @m68kde~1_300.L
000050FC  78FE      
000050FE  4E93      9224          jsr       (A3)
00005100  584F      9225          addq.w    #4,A7
                    9226   DisassembleInstruction_286:
                    9227   ; }
                    9228   ; /////////////////////////////////////////////////////////////////////////////////
                    9229   ; // if instruction is RTS
                    9230   ; /////////////////////////////////////////////////////////////////////////////////
                    9231   ; if(*OpCode == (unsigned short int)(0x4E75))
00005102  2042      9232          move.l    D2,A0
00005104  3010      9233          move.w    (A0),D0
00005106  0C40 4E75 9234          cmp.w     #20085,D0
0000510A  6610      9235          bne.s     DisassembleInstruction_288
                    9236   ; {
                    9237   ; InstructionSize = 1;
0000510C  24BC 0000 9238          move.l    #1,(A2)
00005110  0001      
                    9239   ; strcpyInstruction("RTS");
00005112  4879 0000 9240          pea       @m68kde~1_301.L
00005116  7902      
00005118  4E93      9241          jsr       (A3)
0000511A  584F      9242          addq.w    #4,A7
                    9243   DisassembleInstruction_288:
                    9244   ; }
                    9245   ; /////////////////////////////////////////////////////////////////////////////////
                    9246   ; // if instruction is STOP
                    9247   ; /////////////////////////////////////////////////////////////////////////////////
                    9248   ; if(*OpCode  == (unsigned short int)(0x4E72))
0000511C  2042      9249          move.l    D2,A0
0000511E  3010      9250          move.w    (A0),D0
00005120  0C40 4E72 9251          cmp.w     #20082,D0
00005124  6622      9252          bne.s     DisassembleInstruction_290
                    9253   ; {
                    9254   ; InstructionSize = 2;
00005126  24BC 0000 9255          move.l    #2,(A2)
0000512A  0002      
                    9256   ; sprintf(Instruction, "STOP #$%X", OpCode[1]);
0000512C  2042      9257          move.l    D2,A0
0000512E  3228 0002 9258          move.w    2(A0),D1
00005132  48C1      9259          ext.l     D1
00005134  2F01      9260          move.l    D1,-(A7)
00005136  4879 0000 9261          pea       @m68kde~1_302.L
0000513A  7906      
0000513C  4879 0B00 9262          pea       _Instruction.L
00005140  04E2      
00005142  4E95      9263          jsr       (A5)
00005144  DEFC 000C 9264          add.w     #12,A7
                    9265   DisassembleInstruction_290:
                    9266   ; }
                    9267   ; /////////////////////////////////////////////////////////////////////////////////
                    9268   ; // if instruction is SBCD
                    9269   ; /////////////////////////////////////////////////////////////////////////////////
                    9270   ; if((*OpCode & (unsigned short int)(0xF1F0 )) == (unsigned short int)(0x8100))
00005148  2042      9271          move.l    D2,A0
0000514A  3010      9272          move.w    (A0),D0
0000514C  C07C F1F0 9273          and.w     #61936,D0
00005150  0C40 8100 9274          cmp.w     #33024,D0
00005154  6600 0092 9275          bne       DisassembleInstruction_295
                    9276   ; {
                    9277   ; InstructionSize = 1;
00005158  24BC 0000 9278          move.l    #1,(A2)
0000515C  0001      
                    9279   ; DestBits = (*OpCode >> 9) & (unsigned short int )(0x0007) ;
0000515E  2042      9280          move.l    D2,A0
00005160  3010      9281          move.w    (A0),D0
00005162  E040      9282          asr.w     #8,D0
00005164  E240      9283          asr.w     #1,D0
00005166  C07C 0007 9284          and.w     #7,D0
0000516A  3D40 FFE0 9285          move.w    D0,-32(A6)
                    9286   ; SourceBits = (*OpCode & (unsigned short int )(0x0007));
0000516E  2042      9287          move.l    D2,A0
00005170  3010      9288          move.w    (A0),D0
00005172  C07C 0007 9289          and.w     #7,D0
00005176  3D40 FFDE 9290          move.w    D0,-34(A6)
                    9291   ; Mode = (*OpCode >> 3) & (unsigned short int )(0x0001) ;
0000517A  2042      9292          move.l    D2,A0
0000517C  3010      9293          move.w    (A0),D0
0000517E  E640      9294          asr.w     #3,D0
00005180  48C0      9295          ext.l     D0
00005182  C0BC 0000 9296          and.l     #1,D0
00005186  0001      
00005188  2D40 FFE4 9297          move.l    D0,-28(A6)
                    9298   ; if(Mode == 0)
0000518C  202E FFE4 9299          move.l    -28(A6),D0
00005190  662C      9300          bne.s     DisassembleInstruction_294
                    9301   ; sprintf(Instruction, "SBCD D%d,D%d", SourceBits, DestBits) ;
00005192  322E FFE0 9302          move.w    -32(A6),D1
00005196  C2BC 0000 9303          and.l     #65535,D1
0000519A  FFFF      
0000519C  2F01      9304          move.l    D1,-(A7)
0000519E  322E FFDE 9305          move.w    -34(A6),D1
000051A2  C2BC 0000 9306          and.l     #65535,D1
000051A6  FFFF      
000051A8  2F01      9307          move.l    D1,-(A7)
000051AA  4879 0000 9308          pea       @m68kde~1_303.L
000051AE  7910      
000051B0  4879 0B00 9309          pea       _Instruction.L
000051B4  04E2      
000051B6  4E95      9310          jsr       (A5)
000051B8  DEFC 0010 9311          add.w     #16,A7
000051BC  602A      9312          bra.s     DisassembleInstruction_295
                    9313   DisassembleInstruction_294:
                    9314   ; else
                    9315   ; sprintf(Instruction, "SBCD -(A%d),-(A%d)", SourceBits, DestBits) ;
000051BE  322E FFE0 9316          move.w    -32(A6),D1
000051C2  C2BC 0000 9317          and.l     #65535,D1
000051C6  FFFF      
000051C8  2F01      9318          move.l    D1,-(A7)
000051CA  322E FFDE 9319          move.w    -34(A6),D1
000051CE  C2BC 0000 9320          and.l     #65535,D1
000051D2  FFFF      
000051D4  2F01      9321          move.l    D1,-(A7)
000051D6  4879 0000 9322          pea       @m68kde~1_304.L
000051DA  791E      
000051DC  4879 0B00 9323          pea       _Instruction.L
000051E0  04E2      
000051E2  4E95      9324          jsr       (A5)
000051E4  DEFC 0010 9325          add.w     #16,A7
                    9326   DisassembleInstruction_295:
                    9327   ; }
                    9328   ; /////////////////////////////////////////////////////////////////////////////////
                    9329   ; // if instruction is Scc
                    9330   ; /////////////////////////////////////////////////////////////////////////////////
                    9331   ; if((*OpCode & (unsigned short int)(0xF0C0 )) == (unsigned short int)(0x50C0))
000051E8  2042      9332          move.l    D2,A0
000051EA  3010      9333          move.w    (A0),D0
000051EC  C07C F0C0 9334          and.w     #61632,D0
000051F0  0C40 50C0 9335          cmp.w     #20672,D0
000051F4  6600 0060 9336          bne       DisassembleInstruction_298
                    9337   ; {
                    9338   ; EAMode = (*OpCode >> 3) & (unsigned short int)(0x0007) ;    // mode cannot be 1 for Scc as it it used by DBcc instruction as a differentiator
000051F8  2042      9339          move.l    D2,A0
000051FA  3010      9340          move.w    (A0),D0
000051FC  E640      9341          asr.w     #3,D0
000051FE  C07C 0007 9342          and.w     #7,D0
00005202  3D40 FFEC 9343          move.w    D0,-20(A6)
                    9344   ; if(EAMode != (unsigned short int)(0x0001))
00005206  302E FFEC 9345          move.w    -20(A6),D0
0000520A  0C40 0001 9346          cmp.w     #1,D0
0000520E  6700 0046 9347          beq       DisassembleInstruction_298
                    9348   ; {
                    9349   ; InstructionSize = 1;
00005212  24BC 0000 9350          move.l    #1,(A2)
00005216  0001      
                    9351   ; Condition = ((*OpCode >> 8) & (unsigned short int)(0xF)) ;
00005218  2042      9352          move.l    D2,A0
0000521A  3010      9353          move.w    (A0),D0
0000521C  E040      9354          asr.w     #8,D0
0000521E  C07C 000F 9355          and.w     #15,D0
00005222  1D40 FFE9 9356          move.b    D0,-23(A6)
                    9357   ; strcpyInstruction("S") ;
00005226  4879 0000 9358          pea       @m68kde~1_305.L
0000522A  7932      
0000522C  4E93      9359          jsr       (A3)
0000522E  584F      9360          addq.w    #4,A7
                    9361   ; DecodeBranchCondition(Condition) ;
00005230  122E FFE9 9362          move.b    -23(A6),D1
00005234  C27C 00FF 9363          and.w     #255,D1
00005238  C2BC 0000 9364          and.l     #65535,D1
0000523C  FFFF      
0000523E  2F01      9365          move.l    D1,-(A7)
00005240  4EB8 358E 9366          jsr       _DecodeBranchCondition
00005244  584F      9367          addq.w    #4,A7
                    9368   ; Decode6BitEA(OpCode,0,0,0);
00005246  42A7      9369          clr.l     -(A7)
00005248  42A7      9370          clr.l     -(A7)
0000524A  42A7      9371          clr.l     -(A7)
0000524C  2F02      9372          move.l    D2,-(A7)
0000524E  4EB8 30D0 9373          jsr       _Decode6BitEA
00005252  DEFC 0010 9374          add.w     #16,A7
                    9375   DisassembleInstruction_298:
                    9376   ; }
                    9377   ; }
                    9378   ; /////////////////////////////////////////////////////////////////////////////////
                    9379   ; // if instruction is SUB or SUBA
                    9380   ; /////////////////////////////////////////////////////////////////////////////////
                    9381   ; if((*OpCode & (unsigned short int)(0xF000 )) == (unsigned short int)(0x9000))   {
00005256  2042      9382          move.l    D2,A0
00005258  3010      9383          move.w    (A0),D0
0000525A  C07C F000 9384          and.w     #61440,D0
0000525E  0C40 9000 9385          cmp.w     #36864,D0
00005262  6600 008C 9386          bne       DisassembleInstruction_303
                    9387   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0007)) ;
00005266  2042      9388          move.l    D2,A0
00005268  3010      9389          move.w    (A0),D0
0000526A  EC40      9390          asr.w     #6,D0
0000526C  C07C 0007 9391          and.w     #7,D0
00005270  3600      9392          move.w    D0,D3
                    9393   ; InstructionSize = 1;
00005272  24BC 0000 9394          move.l    #1,(A2)
00005276  0001      
                    9395   ; if((OpMode == (unsigned short int)(0x0003)) || (OpMode == (unsigned short int)(0x0007)))      // if destination is an address register then use ADDA otherwise use ADD
00005278  0C43 0003 9396          cmp.w     #3,D3
0000527C  6708      9397          beq.s     DisassembleInstruction_304
0000527E  0C43 0007 9398          cmp.w     #7,D3
00005282  6600 005A 9399          bne       DisassembleInstruction_302
                    9400   DisassembleInstruction_304:
                    9401   ; {
                    9402   ; if(OpMode == (unsigned short int)(0x0003))
00005286  0C43 0003 9403          cmp.w     #3,D3
0000528A  660C      9404          bne.s     DisassembleInstruction_305
                    9405   ; strcpyInstruction("SUBA.W ") ;
0000528C  4879 0000 9406          pea       @m68kde~1_306.L
00005290  7934      
00005292  4E93      9407          jsr       (A3)
00005294  584F      9408          addq.w    #4,A7
00005296  600A      9409          bra.s     DisassembleInstruction_306
                    9410   DisassembleInstruction_305:
                    9411   ; else
                    9412   ; strcpyInstruction("SUBA.L ") ;
00005298  4879 0000 9413          pea       @m68kde~1_307.L
0000529C  793C      
0000529E  4E93      9414          jsr       (A3)
000052A0  584F      9415          addq.w    #4,A7
                    9416   DisassembleInstruction_306:
                    9417   ; Decode6BitEA(OpCode,0,0,0)  ;
000052A2  42A7      9418          clr.l     -(A7)
000052A4  42A7      9419          clr.l     -(A7)
000052A6  42A7      9420          clr.l     -(A7)
000052A8  2F02      9421          move.l    D2,-(A7)
000052AA  4EB8 30D0 9422          jsr       _Decode6BitEA
000052AE  DEFC 0010 9423          add.w     #16,A7
                    9424   ; sprintf(TempString, ",A%X", (*OpCode >> 9) & (unsigned short int)(0x0007)) ;
000052B2  2042      9425          move.l    D2,A0
000052B4  3210      9426          move.w    (A0),D1
000052B6  E041      9427          asr.w     #8,D1
000052B8  E241      9428          asr.w     #1,D1
000052BA  C27C 0007 9429          and.w     #7,D1
000052BE  C2BC 0000 9430          and.l     #65535,D1
000052C2  FFFF      
000052C4  2F01      9431          move.l    D1,-(A7)
000052C6  4879 0000 9432          pea       @m68kde~1_210.L
000052CA  7630      
000052CC  2F0C      9433          move.l    A4,-(A7)
000052CE  4E95      9434          jsr       (A5)
000052D0  DEFC 000C 9435          add.w     #12,A7
                    9436   ; strcatInstruction(TempString) ;
000052D4  2F0C      9437          move.l    A4,-(A7)
000052D6  4EB8 0CCC 9438          jsr       _strcatInstruction
000052DA  584F      9439          addq.w    #4,A7
000052DC  6012      9440          bra.s     DisassembleInstruction_303
                    9441   DisassembleInstruction_302:
                    9442   ; }
                    9443   ; else {
                    9444   ; strcpyInstruction("SUB") ;
000052DE  4879 0000 9445          pea       @m68kde~1_308.L
000052E2  7944      
000052E4  4E93      9446          jsr       (A3)
000052E6  584F      9447          addq.w    #4,A7
                    9448   ; Decode3BitOperandMode(OpCode) ;
000052E8  2F02      9449          move.l    D2,-(A7)
000052EA  4EB8 34F8 9450          jsr       _Decode3BitOperandMode
000052EE  584F      9451          addq.w    #4,A7
                    9452   DisassembleInstruction_303:
                    9453   ; }
                    9454   ; }
                    9455   ; /////////////////////////////////////////////////////////////////////////////////
                    9456   ; // if instruction is SUBQ
                    9457   ; /////////////////////////////////////////////////////////////////////////////////
                    9458   ; if((*OpCode & (unsigned short int)(0xF100 )) == (unsigned short int)(0x5100))
000052F0  2042      9459          move.l    D2,A0
000052F2  3010      9460          move.w    (A0),D0
000052F4  C07C F100 9461          and.w     #61696,D0
000052F8  0C40 5100 9462          cmp.w     #20736,D0
000052FC  6600 0072 9463          bne       DisassembleInstruction_309
                    9464   ; {
                    9465   ; OpMode = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
00005300  2042      9466          move.l    D2,A0
00005302  3010      9467          move.w    (A0),D0
00005304  EC40      9468          asr.w     #6,D0
00005306  C07C 0003 9469          and.w     #3,D0
0000530A  3600      9470          move.w    D0,D3
                    9471   ; if(OpMode <= (unsigned short int)(0x0002))
0000530C  0C43 0002 9472          cmp.w     #2,D3
00005310  6200 005E 9473          bhi       DisassembleInstruction_309
                    9474   ; {
                    9475   ; InstructionSize = 1;
00005314  24BC 0000 9476          move.l    #1,(A2)
00005318  0001      
                    9477   ; strcpyInstruction("SUBQ") ;
0000531A  4879 0000 9478          pea       @m68kde~1_309.L
0000531E  7948      
00005320  4E93      9479          jsr       (A3)
00005322  584F      9480          addq.w    #4,A7
                    9481   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
00005324  2042      9482          move.l    D2,A0
00005326  3210      9483          move.w    (A0),D1
00005328  C2BC 0000 9484          and.l     #65535,D1
0000532C  FFFF      
0000532E  2F01      9485          move.l    D1,-(A7)
00005330  4EB8 2E3C 9486          jsr       _Decode2BitOperandSize
00005334  584F      9487          addq.w    #4,A7
                    9488   ; sprintf(TempString, "#%1X,", ((*OpCode >> 9) & (unsigned short int)(0x0007)));    // print 3 bit #data in positions 11,10,9 in opcode
00005336  2042      9489          move.l    D2,A0
00005338  3210      9490          move.w    (A0),D1
0000533A  E041      9491          asr.w     #8,D1
0000533C  E241      9492          asr.w     #1,D1
0000533E  C27C 0007 9493          and.w     #7,D1
00005342  C2BC 0000 9494          and.l     #65535,D1
00005346  FFFF      
00005348  2F01      9495          move.l    D1,-(A7)
0000534A  4879 0000 9496          pea       @m68kde~1_220.L
0000534E  7670      
00005350  2F0C      9497          move.l    A4,-(A7)
00005352  4E95      9498          jsr       (A5)
00005354  DEFC 000C 9499          add.w     #12,A7
                    9500   ; strcatInstruction(TempString) ;
00005358  2F0C      9501          move.l    A4,-(A7)
0000535A  4EB8 0CCC 9502          jsr       _strcatInstruction
0000535E  584F      9503          addq.w    #4,A7
                    9504   ; Decode6BitEA(OpCode,0,0,0) ;                                           // decode EA
00005360  42A7      9505          clr.l     -(A7)
00005362  42A7      9506          clr.l     -(A7)
00005364  42A7      9507          clr.l     -(A7)
00005366  2F02      9508          move.l    D2,-(A7)
00005368  4EB8 30D0 9509          jsr       _Decode6BitEA
0000536C  DEFC 0010 9510          add.w     #16,A7
                    9511   DisassembleInstruction_309:
                    9512   ; }
                    9513   ; }
                    9514   ; /////////////////////////////////////////////////////////////////////////////////
                    9515   ; // if instruction is SUBX
                    9516   ; /////////////////////////////////////////////////////////////////////////////////
                    9517   ; if((*OpCode & (unsigned short int)(0xF130 )) == (unsigned short int)(0x9100))
00005370  2042      9518          move.l    D2,A0
00005372  3010      9519          move.w    (A0),D0
00005374  C07C F130 9520          and.w     #61744,D0
00005378  0C40 9100 9521          cmp.w     #37120,D0
0000537C  6600 00A4 9522          bne       DisassembleInstruction_313
                    9523   ; {
                    9524   ; InstructionSize = 1;
00005380  24BC 0000 9525          move.l    #1,(A2)
00005384  0001      
                    9526   ; OpMode = ((*OpCode >> 6) & (unsigned short int)(0x0003)) ;
00005386  2042      9527          move.l    D2,A0
00005388  3010      9528          move.w    (A0),D0
0000538A  EC40      9529          asr.w     #6,D0
0000538C  C07C 0003 9530          and.w     #3,D0
00005390  3600      9531          move.w    D0,D3
                    9532   ; if(OpMode != (unsigned short int)(0x0003)) // if size = 11 then it's SUBA not SUBX
00005392  0C43 0003 9533          cmp.w     #3,D3
00005396  6700 008A 9534          beq       DisassembleInstruction_313
                    9535   ; {
                    9536   ; strcpyInstruction("SUBX") ;
0000539A  4879 0000 9537          pea       @m68kde~1_310.L
0000539E  794E      
000053A0  4E93      9538          jsr       (A3)
000053A2  584F      9539          addq.w    #4,A7
                    9540   ; Decode2BitOperandSize(*OpCode);                                  // add .b, .w, .l size indicator to instruction string
000053A4  2042      9541          move.l    D2,A0
000053A6  3210      9542          move.w    (A0),D1
000053A8  C2BC 0000 9543          and.l     #65535,D1
000053AC  FFFF      
000053AE  2F01      9544          move.l    D1,-(A7)
000053B0  4EB8 2E3C 9545          jsr       _Decode2BitOperandSize
000053B4  584F      9546          addq.w    #4,A7
                    9547   ; if((*OpCode & (unsigned short int)(0x0008)) == (unsigned short int)(0))    // if bit 3 of opcode is 0 indicates data registers are used as source and destination
000053B6  2042      9548          move.l    D2,A0
000053B8  3010      9549          move.w    (A0),D0
000053BA  C07C 0008 9550          and.w     #8,D0
000053BE  6600 0030 9551          bne       DisassembleInstruction_315
                    9552   ; sprintf(TempString, "D%1X,D%1X", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000053C2  2042      9553          move.l    D2,A0
000053C4  3210      9554          move.w    (A0),D1
000053C6  E041      9555          asr.w     #8,D1
000053C8  E241      9556          asr.w     #1,D1
000053CA  C27C 0007 9557          and.w     #7,D1
000053CE  48C1      9558          ext.l     D1
000053D0  2F01      9559          move.l    D1,-(A7)
000053D2  2042      9560          move.l    D2,A0
000053D4  3210      9561          move.w    (A0),D1
000053D6  C27C 0007 9562          and.w     #7,D1
000053DA  48C1      9563          ext.l     D1
000053DC  2F01      9564          move.l    D1,-(A7)
000053DE  4879 0000 9565          pea       @m68kde~1_311.L
000053E2  7954      
000053E4  2F0C      9566          move.l    A4,-(A7)
000053E6  4E95      9567          jsr       (A5)
000053E8  DEFC 0010 9568          add.w     #16,A7
000053EC  6000 002C 9569          bra       DisassembleInstruction_316
                    9570   DisassembleInstruction_315:
                    9571   ; else        // -(ax),-(ay) mode used
                    9572   ; sprintf(TempString, "-(A%1X),-(A%1X)", (*OpCode & 0x0007), ((*OpCode >> 9) & 0x0007)) ;
000053F0  2042      9573          move.l    D2,A0
000053F2  3210      9574          move.w    (A0),D1
000053F4  E041      9575          asr.w     #8,D1
000053F6  E241      9576          asr.w     #1,D1
000053F8  C27C 0007 9577          and.w     #7,D1
000053FC  48C1      9578          ext.l     D1
000053FE  2F01      9579          move.l    D1,-(A7)
00005400  2042      9580          move.l    D2,A0
00005402  3210      9581          move.w    (A0),D1
00005404  C27C 0007 9582          and.w     #7,D1
00005408  48C1      9583          ext.l     D1
0000540A  2F01      9584          move.l    D1,-(A7)
0000540C  4879 0000 9585          pea       @m68kde~1_312.L
00005410  795E      
00005412  2F0C      9586          move.l    A4,-(A7)
00005414  4E95      9587          jsr       (A5)
00005416  DEFC 0010 9588          add.w     #16,A7
                    9589   DisassembleInstruction_316:
                    9590   ; strcatInstruction(TempString) ;
0000541A  2F0C      9591          move.l    A4,-(A7)
0000541C  4EB8 0CCC 9592          jsr       _strcatInstruction
00005420  584F      9593          addq.w    #4,A7
                    9594   DisassembleInstruction_313:
                    9595   ; }
                    9596   ; }
                    9597   ; /////////////////////////////////////////////////////////////////////////////////
                    9598   ; // if instruction is SWAP
                    9599   ; /////////////////////////////////////////////////////////////////////////////////
                    9600   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4840))
00005422  2042      9601          move.l    D2,A0
00005424  3010      9602          move.w    (A0),D0
00005426  C07C FFF8 9603          and.w     #65528,D0
0000542A  0C40 4840 9604          cmp.w     #18496,D0
0000542E  662A      9605          bne.s     DisassembleInstruction_317
                    9606   ; {
                    9607   ; InstructionSize = 1;
00005430  24BC 0000 9608          move.l    #1,(A2)
00005434  0001      
                    9609   ; DataRegister = *OpCode & (unsigned short int)(0x0007) ;
00005436  2042      9610          move.l    D2,A0
00005438  3010      9611          move.w    (A0),D0
0000543A  C07C 0007 9612          and.w     #7,D0
0000543E  3A00      9613          move.w    D0,D5
                    9614   ; sprintf(Instruction, "SWAP D%d", DataRegister) ;
00005440  CABC 0000 9615          and.l     #65535,D5
00005444  FFFF      
00005446  2F05      9616          move.l    D5,-(A7)
00005448  4879 0000 9617          pea       @m68kde~1_313.L
0000544C  796E      
0000544E  4879 0B00 9618          pea       _Instruction.L
00005452  04E2      
00005454  4E95      9619          jsr       (A5)
00005456  DEFC 000C 9620          add.w     #12,A7
                    9621   DisassembleInstruction_317:
                    9622   ; }
                    9623   ; /////////////////////////////////////////////////////////////////////////////////
                    9624   ; // if instruction is TAS
                    9625   ; /////////////////////////////////////////////////////////////////////////////////
                    9626   ; if((*OpCode & (unsigned short int)(0xFFC0 )) == (unsigned short int)(0x4AC0))
0000545A  2042      9627          move.l    D2,A0
0000545C  3010      9628          move.w    (A0),D0
0000545E  C07C FFC0 9629          and.w     #65472,D0
00005462  0C40 4AC0 9630          cmp.w     #19136,D0
00005466  662A      9631          bne.s     DisassembleInstruction_321
                    9632   ; {
                    9633   ; if(*OpCode != (unsigned short int)(0x4AFC))
00005468  2042      9634          move.l    D2,A0
0000546A  3010      9635          move.w    (A0),D0
0000546C  0C40 4AFC 9636          cmp.w     #19196,D0
00005470  6720      9637          beq.s     DisassembleInstruction_321
                    9638   ; {
                    9639   ; InstructionSize = 1;
00005472  24BC 0000 9640          move.l    #1,(A2)
00005476  0001      
                    9641   ; strcpyInstruction("TAS ") ;
00005478  4879 0000 9642          pea       @m68kde~1_314.L
0000547C  7978      
0000547E  4E93      9643          jsr       (A3)
00005480  584F      9644          addq.w    #4,A7
                    9645   ; Decode6BitEA(OpCode,0,0,0) ;
00005482  42A7      9646          clr.l     -(A7)
00005484  42A7      9647          clr.l     -(A7)
00005486  42A7      9648          clr.l     -(A7)
00005488  2F02      9649          move.l    D2,-(A7)
0000548A  4EB8 30D0 9650          jsr       _Decode6BitEA
0000548E  DEFC 0010 9651          add.w     #16,A7
                    9652   DisassembleInstruction_321:
                    9653   ; }
                    9654   ; }
                    9655   ; /////////////////////////////////////////////////////////////////////////////////
                    9656   ; // if instruction is TRAP
                    9657   ; /////////////////////////////////////////////////////////////////////////////////
                    9658   ; if((*OpCode & (unsigned short int)(0xFFF0 )) == (unsigned short int)(0x4E40))   {
00005492  2042      9659          move.l    D2,A0
00005494  3010      9660          move.w    (A0),D0
00005496  C07C FFF0 9661          and.w     #65520,D0
0000549A  0C40 4E40 9662          cmp.w     #20032,D0
0000549E  6622      9663          bne.s     DisassembleInstruction_323
                    9664   ; sprintf(Instruction, "TRAP #%d", *OpCode & (unsigned short int)(0x000F)) ;
000054A0  2042      9665          move.l    D2,A0
000054A2  3210      9666          move.w    (A0),D1
000054A4  C27C 000F 9667          and.w     #15,D1
000054A8  C2BC 0000 9668          and.l     #65535,D1
000054AC  FFFF      
000054AE  2F01      9669          move.l    D1,-(A7)
000054B0  4879 0000 9670          pea       @m68kde~1_315.L
000054B4  797E      
000054B6  4879 0B00 9671          pea       _Instruction.L
000054BA  04E2      
000054BC  4E95      9672          jsr       (A5)
000054BE  DEFC 000C 9673          add.w     #12,A7
                    9674   DisassembleInstruction_323:
                    9675   ; }
                    9676   ; /////////////////////////////////////////////////////////////////////////////////
                    9677   ; // if instruction is TRAPV
                    9678   ; /////////////////////////////////////////////////////////////////////////////////
                    9679   ; if(*OpCode == (unsigned short int)(0x4E76))
000054C2  2042      9680          move.l    D2,A0
000054C4  3010      9681          move.w    (A0),D0
000054C6  0C40 4E76 9682          cmp.w     #20086,D0
000054CA  6610      9683          bne.s     DisassembleInstruction_325
                    9684   ; {
                    9685   ; InstructionSize = 1;
000054CC  24BC 0000 9686          move.l    #1,(A2)
000054D0  0001      
                    9687   ; strcpyInstruction("TRAPV") ;
000054D2  4879 0000 9688          pea       @m68kde~1_316.L
000054D6  7988      
000054D8  4E93      9689          jsr       (A3)
000054DA  584F      9690          addq.w    #4,A7
                    9691   DisassembleInstruction_325:
                    9692   ; }
                    9693   ; /////////////////////////////////////////////////////////////////////////////////
                    9694   ; // if instruction is TST
                    9695   ; /////////////////////////////////////////////////////////////////////////////////
                    9696   ; if((*OpCode & (unsigned short int)(0xFF00 )) == (unsigned short int)(0x4A00))
000054DC  2042      9697          move.l    D2,A0
000054DE  3010      9698          move.w    (A0),D0
000054E0  C07C FF00 9699          and.w     #65280,D0
000054E4  0C40 4A00 9700          cmp.w     #18944,D0
000054E8  6600 005A 9701          bne       DisassembleInstruction_329
                    9702   ; {
                    9703   ; Size = (*OpCode >> 6) & (unsigned short int)(0x0003) ;
000054EC  2042      9704          move.l    D2,A0
000054EE  3010      9705          move.w    (A0),D0
000054F0  EC40      9706          asr.w     #6,D0
000054F2  C07C 0003 9707          and.w     #3,D0
000054F6  3D40 FFE2 9708          move.w    D0,-30(A6)
                    9709   ; if((*OpCode != (unsigned short int)(0x4AFC)) && (Size != (unsigned short int)(0x0003)))       { // test for size to eliminate TAS instruction which shares similar opcode
000054FA  2042      9710          move.l    D2,A0
000054FC  3010      9711          move.w    (A0),D0
000054FE  0C40 4AFC 9712          cmp.w     #19196,D0
00005502  6700 0040 9713          beq       DisassembleInstruction_329
00005506  302E FFE2 9714          move.w    -30(A6),D0
0000550A  0C40 0003 9715          cmp.w     #3,D0
0000550E  6700 0034 9716          beq       DisassembleInstruction_329
                    9717   ; InstructionSize = 1;
00005512  24BC 0000 9718          move.l    #1,(A2)
00005516  0001      
                    9719   ; strcpyInstruction("TST") ;
00005518  4879 0000 9720          pea       @m68kde~1_317.L
0000551C  798E      
0000551E  4E93      9721          jsr       (A3)
00005520  584F      9722          addq.w    #4,A7
                    9723   ; Decode2BitOperandSize(*OpCode) ;
00005522  2042      9724          move.l    D2,A0
00005524  3210      9725          move.w    (A0),D1
00005526  C2BC 0000 9726          and.l     #65535,D1
0000552A  FFFF      
0000552C  2F01      9727          move.l    D1,-(A7)
0000552E  4EB8 2E3C 9728          jsr       _Decode2BitOperandSize
00005532  584F      9729          addq.w    #4,A7
                    9730   ; Decode6BitEA(OpCode,0,0,0) ;
00005534  42A7      9731          clr.l     -(A7)
00005536  42A7      9732          clr.l     -(A7)
00005538  42A7      9733          clr.l     -(A7)
0000553A  2F02      9734          move.l    D2,-(A7)
0000553C  4EB8 30D0 9735          jsr       _Decode6BitEA
00005540  DEFC 0010 9736          add.w     #16,A7
                    9737   DisassembleInstruction_329:
                    9738   ; }
                    9739   ; }
                    9740   ; /////////////////////////////////////////////////////////////////////////////////
                    9741   ; // if instruction is UNLK
                    9742   ; //////////////////////////////////////////////////////////
                    9743   ; if((*OpCode & (unsigned short int)(0xFFF8 )) == (unsigned short int)(0x4E58))
00005544  2042      9744          move.l    D2,A0
00005546  3010      9745          move.w    (A0),D0
00005548  C07C FFF8 9746          and.w     #65528,D0
0000554C  0C40 4E58 9747          cmp.w     #20056,D0
00005550  6628      9748          bne.s     DisassembleInstruction_331
                    9749   ; {
                    9750   ; InstructionSize = 1;
00005552  24BC 0000 9751          move.l    #1,(A2)
00005556  0001      
                    9752   ; sprintf(Instruction, "UNLK A%d", *OpCode & (unsigned short int)(0x0007)) ;
00005558  2042      9753          move.l    D2,A0
0000555A  3210      9754          move.w    (A0),D1
0000555C  C27C 0007 9755          and.w     #7,D1
00005560  C2BC 0000 9756          and.l     #65535,D1
00005564  FFFF      
00005566  2F01      9757          move.l    D1,-(A7)
00005568  4879 0000 9758          pea       @m68kde~1_318.L
0000556C  7992      
0000556E  4879 0B00 9759          pea       _Instruction.L
00005572  04E2      
00005574  4E95      9760          jsr       (A5)
00005576  DEFC 000C 9761          add.w     #12,A7
                    9762   DisassembleInstruction_331:
                    9763   ; }
                    9764   ; FormatInstruction() ;
0000557A  4EB8 2DAA 9765          jsr       _FormatInstruction
0000557E  4CDF 3CFC 9766          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005582  4E5E      9767          unlk      A6
00005584  4E75      9768          rts
                    9769   ; }
                    9770   _strcpy:
00005586  206F 0004 9771          move.l    (4,A7),A0
0000558A  226F 0008 9772          move.l    (8,A7),A1
0000558E  2008      9773          move.l    A0,D0
                    9774   strcpy_1:
00005590  10D9      9775          move.b    (A1)+,(A0)+
00005592  66FC      9776          bne       strcpy_1
00005594  4E75      9777          rts
                    9778   ULDIV:
00005596  4E56 0000 9779          link    A6,#0
0000559A  48E7 C000 9780          movem.l D0/D1,-(A7)
0000559E  222E 0008 9781          move.l  8(A6),D1
000055A2  202E 000C 9782          move.l  12(A6),D0
000055A6  6036      9783          bra.s   ldiv_3
                    9784   LDIV:
000055A8  4E56 0000 9785          link    A6,#0
000055AC  48E7 C000 9786          movem.l D0/D1,-(A7)
000055B0  222E 0008 9787          move.l  8(A6),D1
000055B4  202E 000C 9788          move.l  12(A6),D0
000055B8  4A80      9789          tst.l   D0
000055BA  6A0E      9790          bpl.s   ldiv_1
000055BC  4480      9791          neg.l   D0
000055BE  4A81      9792          tst.l   D1
000055C0  6A14      9793          bpl.s   ldiv_2
000055C2  4481      9794          neg.l   D1
000055C4  612A      9795          bsr.s   dodiv
000055C6  4481      9796          neg.l   D1
000055C8  6016      9797          bra.s   ldiv_4
                    9798   ldiv_1:
000055CA  4A81      9799          tst.l   D1
000055CC  6A10      9800          bpl.s   ldiv_3
000055CE  4481      9801          neg.l   D1
000055D0  611E      9802          bsr.s   dodiv
000055D2  4480      9803          neg.l   D0
000055D4  600A      9804          bra.s   ldiv_4
                    9805   ldiv_2:
000055D6  6118      9806          bsr.s   dodiv
000055D8  4480      9807          neg.l   D0
000055DA  4481      9808          neg.l   D1
000055DC  6002      9809          bra.s   ldiv_4
                    9810   ldiv_3:
000055DE  6110      9811          bsr.s   dodiv
                    9812   ldiv_4:
000055E0  2D40 0008 9813          move.l  D0,8(A6)
000055E4  2D41 000C 9814          move.l  D1,12(A6)
000055E8  4CDF 0003 9815          movem.l (A7)+,D0/D1
000055EC  4E5E      9816          unlk    A6
000055EE  4E75      9817          rts
                    9818   dodiv:
000055F0  0C81 0000 9819          cmpi.l  #$FFFF,D1
000055F4  FFFF      
000055F6  6236      9820          bhi.s   dodiv_2
000055F8  0C80 0000 9821          cmpi.l  #$FFFF,D0
000055FC  FFFF      
000055FE  6210      9822          bhi.s   dodiv_1
00005600  80C1      9823          divu    D1,D0
00005602  2200      9824          move.l  D0,D1
00005604  4241      9825          clr.w   D1
00005606  4841      9826          swap    D1
00005608  0280 0000 9827          andi.l  #$FFFF,D0
0000560C  FFFF      
0000560E  4E75      9828          rts
                    9829   dodiv_1:
00005610  48A7 A000 9830          movem.w D0/D2,-(A7)
00005614  4240      9831          clr.w   D0
00005616  4840      9832          swap    D0
00005618  80C1      9833          divu    D1,D0
0000561A  3400      9834          move.w  D0,D2
0000561C  301F      9835          move.w  (A7)+,D0
0000561E  80C1      9836          divu    D1,D0
00005620  4840      9837          swap    D0
00005622  4281      9838          clr.l   D1
00005624  3200      9839          move.w  D0,D1
00005626  3002      9840          move.w  D2,D0
00005628  4840      9841          swap    D0
0000562A  341F      9842          move.w  (A7)+,D2
0000562C  4E75      9843          rts
                    9844   dodiv_2:
0000562E  48E7 3800 9845          movem.l D2/D3/D4,-(A7)
00005632  2401      9846          move.l  D1,D2
00005634  4242      9847          clr.w   D2
00005636  4842      9848          swap    D2
00005638  5282      9849          addq.l  #1,D2
0000563A  2600      9850          move.l  D0,D3
0000563C  2801      9851          move.l  D1,D4
0000563E  2202      9852          move.l  D2,D1
00005640  61CE      9853          bsr.s   dodiv_1
00005642  2204      9854          move.l  D4,D1
00005644  82C2      9855          divu    D2,D1
00005646  80C1      9856          divu    D1,D0
00005648  0280 0000 9857          andi.l  #$FFFF,D0
0000564C  FFFF      
                    9858   dodiv_3:
0000564E  2204      9859          move.l  D4,D1
00005650  2404      9860          move.l  D4,D2
00005652  4842      9861          swap    D2
00005654  C2C0      9862          mulu    D0,D1
00005656  C4C0      9863          mulu    D0,D2
00005658  4842      9864          swap    D2
0000565A  D282      9865          add.l   D2,D1
0000565C  9283      9866          sub.l   D3,D1
0000565E  620A      9867          bhi.s   dodiv_4
00005660  4481      9868          neg.l   D1
00005662  B881      9869          cmp.l   D1,D4
00005664  6208      9870          bhi.s   dodiv_5
00005666  5280      9871          addq.l  #1,D0
00005668  60E4      9872          bra.s   dodiv_3
                    9873   dodiv_4:
0000566A  5380      9874          subq.l  #1,D0
0000566C  60E0      9875          bra.s   dodiv_3
                    9876   dodiv_5:
0000566E  4CDF 001C 9877          movem.l (A7)+,D2/D3/D4
00005672  4E75      9878          rts
                    9879   _putch:
00005674  4E56 0000 9880          link      A6,#0
00005678  48E7 2000 9881          movem.l   D2,-(A7)
0000567C  242E 0008 9882          move.l    8(A6),D2
00005680  0C82 0000 9883          cmp.l     #10,D2
00005684  000A      
00005686  660A      9884          bne.s     putch_1
00005688  4878 000D 9885          pea       13
0000568C  6100 B4AE 9886          bsr       __putch
00005690  584F      9887          addq.w    #4,A7
                    9888   putch_1:
00005692  2F02      9889          move.l    D2,-(A7)
00005694  6100 B4A6 9890          bsr       __putch
00005698  584F      9891          addq.w    #4,A7
0000569A  2002      9892          move.l    D2,D0
0000569C  4CDF 0004 9893          movem.l   (A7)+,D2
000056A0  4E5E      9894          unlk      A6
000056A2  4E75      9895          rts
                    9896   _getch:
000056A4  48E7 2000 9897          movem.l   D2,-(A7)
000056A8  2439 0B00 9898          move.l    __ungetbuf,D2
000056AC  00C0      
000056AE  2039 0B00 9899          move.l    __ungetbuf,D0
000056B2  00C0      
000056B4  0C80 FFFF 9900          cmp.l     #-1,D0
000056B8  FFFF      
000056BA  670C      9901          beq.s     getch_1
000056BC  23FC FFFF 9902          move.l    #-1,__ungetbuf
000056C0  FFFF 0B00 
000056C4  00C0      
000056C6  6010      9903          bra.s     getch_3
                    9904   getch_1:
000056C8  6100 B49E 9905          bsr       __getch
000056CC  2400      9906          move.l    D0,D2
000056CE  0C80 0000 9907          cmp.l     #13,D0
000056D2  000D      
000056D4  6602      9908          bne.s     getch_3
000056D6  740A      9909          moveq     #10,D2
                    9910   getch_3:
000056D8  2002      9911          move.l    D2,D0
000056DA  4CDF 0004 9912          movem.l   (A7)+,D2
000056DE  4E75      9913          rts
                    9914   _tolower:
000056E0  4E56 0000 9915          link      A6,#0
000056E4  48E7 2000 9916          movem.l   D2,-(A7)
000056E8  242E 0008 9917          move.l    8(A6),D2
000056EC  0C82 0000 9918          cmp.l     #65,D2
000056F0  0041      
000056F2  6D0E      9919          blt.s     tolower_1
000056F4  0C82 0000 9920          cmp.l     #90,D2
000056F8  005A      
000056FA  6E06      9921          bgt.s     tolower_1
000056FC  84BC 0000 9922          or.l      #32,D2
00005700  0020      
                    9923   tolower_1:
00005702  2002      9924          move.l    D2,D0
00005704  4CDF 0004 9925          movem.l   (A7)+,D2
00005708  4E5E      9926          unlk      A6
0000570A  4E75      9927          rts
                    9928   _sprintf:
0000570C  4E56 FFFC 9929          link      A6,#-4
00005710  48E7 2000 9930          movem.l   D2,-(A7)
00005714  41EE 000C 9931          lea       12(A6),A0
00005718  5848      9932          addq.w    #4,A0
0000571A  2408      9933          move.l    A0,D2
0000571C  2F02      9934          move.l    D2,-(A7)
0000571E  2F2E 000C 9935          move.l    12(A6),-(A7)
00005722  2F2E 0008 9936          move.l    8(A6),-(A7)
00005726  6100 013E 9937          bsr       _vsprintf
0000572A  DEFC 000C 9938          add.w     #12,A7
0000572E  2D40 FFFC 9939          move.l    D0,-4(A6)
00005732  4282      9940          clr.l     D2
00005734  202E FFFC 9941          move.l    -4(A6),D0
00005738  4CDF 0004 9942          movem.l   (A7)+,D2
0000573C  4E5E      9943          unlk      A6
0000573E  4E75      9944          rts
                    9945   _strcat:
00005740  206F 0004 9946          move.l    (4,A7),A0	
00005744  226F 0008 9947          move.l    (8,A7),A1	
00005748  2008      9948          move.l    A0,D0		
                    9949   strcat_0:
0000574A  4A18      9950          tst.b     (A0)+
0000574C  66FC      9951          bne       strcat_0
0000574E  5348      9952          subq      #1,A0
                    9953   strcat_1:
00005750  10D9      9954          move.b    (A1)+,(A0)+
00005752  66FC      9955          bne       strcat_1
00005754  4E75      9956          rts
                    9957   _toupper:
00005756  4E56 0000 9958          link      A6,#0
0000575A  48E7 2000 9959          movem.l   D2,-(A7)
0000575E  242E 0008 9960          move.l    8(A6),D2
00005762  0C82 0000 9961          cmp.l     #97,D2
00005766  0061      
00005768  6D0E      9962          blt.s     toupper_1
0000576A  0C82 0000 9963          cmp.l     #122,D2
0000576E  007A      
00005770  6E06      9964          bgt.s     toupper_1
00005772  C4BC 0000 9965          and.l     #95,D2
00005776  005F      
                    9966   toupper_1:
00005778  2002      9967          move.l    D2,D0
0000577A  4CDF 0004 9968          movem.l   (A7)+,D2
0000577E  4E5E      9969          unlk      A6
00005780  4E75      9970          rts
                    9971   _printf:
00005782  4E56 FFFC 9972          link      A6,#-4
00005786  48E7 2000 9973          movem.l   D2,-(A7)
0000578A  41EE 0008 9974          lea       8(A6),A0
0000578E  5848      9975          addq.w    #4,A0
00005790  2408      9976          move.l    A0,D2
00005792  2F02      9977          move.l    D2,-(A7)
00005794  2F2E 0008 9978          move.l    8(A6),-(A7)
00005798  42A7      9979          clr.l     -(A7)
0000579A  6100 00CA 9980          bsr       _vsprintf
0000579E  DEFC 000C 9981          add.w     #12,A7
000057A2  2D40 FFFC 9982          move.l    D0,-4(A6)
000057A6  4282      9983          clr.l     D2
000057A8  202E FFFC 9984          move.l    -4(A6),D0
000057AC  4CDF 0004 9985          movem.l   (A7)+,D2
000057B0  4E5E      9986          unlk      A6
000057B2  4E75      9987          rts
                    9988   @vsprintf_copy:
000057B4  4E56 0000 9989          link      A6,#0
000057B8  206E 0008 9990          move.l    8(A6),A0
000057BC  4A90      9991          tst.l     (A0)
000057BE  6710      9992          beq.s     @vsprintf_copy_1
000057C0  202E 000C 9993          move.l    12(A6),D0
000057C4  206E 0008 9994          move.l    8(A6),A0
000057C8  2250      9995          move.l    (A0),A1
000057CA  5290      9996          addq.l    #1,(A0)
000057CC  1280      9997          move.b    D0,(A1)
000057CE  600A      9998          bra.s     @vsprintf_copy_2
                    9999   @vsprintf_copy_1:
000057D0  2F2E 000C 10000          move.l    12(A6),-(A7)
000057D4  6100 FE9E 10001          bsr       _putch
000057D8  584F      10002          addq.w    #4,A7
                    10003   @vsprintf_copy_2:
000057DA  4E5E      10004          unlk      A6
000057DC  4E75      10005          rts
                    10006   @vsprintf_getval:
000057DE  4E56 0000 10007          link      A6,#0
000057E2  48E7 3000 10008          movem.l   D2/D3,-(A7)
000057E6  242E 0008 10009          move.l    8(A6),D2
000057EA  4283      10010          clr.l     D3
000057EC  2042      10011          move.l    D2,A0
000057EE  2050      10012          move.l    (A0),A0
000057F0  1010      10013          move.b    (A0),D0
000057F2  4880      10014          ext.w     D0
000057F4  48C0      10015          ext.l     D0
000057F6  0C80 0000 10016          cmp.l     #42,D0
000057FA  002A      
000057FC  6612      10017          bne.s     @vsprintf_getval_1
000057FE  206E 000C 10018          move.l    12(A6),A0
00005802  2250      10019          move.l    (A0),A1
00005804  5890      10020          addq.l    #4,(A0)
00005806  2611      10021          move.l    (A1),D3
00005808  2042      10022          move.l    D2,A0
0000580A  5290      10023          addq.l    #1,(A0)
0000580C  6000 004E 10024          bra       @vsprintf_getval_5
                    10025   @vsprintf_getval_1:
00005810  2042      10026          move.l    D2,A0
00005812  2050      10027          move.l    (A0),A0
00005814  1010      10028          move.b    (A0),D0
00005816  4880      10029          ext.w     D0
00005818  48C0      10030          ext.l     D0
0000581A  0C80 0000 10031          cmp.l     #48,D0
0000581E  0030      
00005820  6D00 003A 10032          blt       @vsprintf_getval_5
00005824  2042      10033          move.l    D2,A0
00005826  2050      10034          move.l    (A0),A0
00005828  1010      10035          move.b    (A0),D0
0000582A  4880      10036          ext.w     D0
0000582C  48C0      10037          ext.l     D0
0000582E  0C80 0000 10038          cmp.l     #57,D0
00005832  0039      
00005834  6E26      10039          bgt.s     @vsprintf_getval_5
00005836  2F03      10040          move.l    D3,-(A7)
00005838  4878 000A 10041          pea       10
0000583C  6100 07F4 10042          bsr       LMUL
00005840  2017      10043          move.l    (A7),D0
00005842  504F      10044          addq.w    #8,A7
00005844  2042      10045          move.l    D2,A0
00005846  2250      10046          move.l    (A0),A1
00005848  5290      10047          addq.l    #1,(A0)
0000584A  1211      10048          move.b    (A1),D1
0000584C  4881      10049          ext.w     D1
0000584E  48C1      10050          ext.l     D1
00005850  D081      10051          add.l     D1,D0
00005852  0480 0000 10052          sub.l     #48,D0
00005856  0030      
00005858  2600      10053          move.l    D0,D3
0000585A  60B4      10054          bra       @vsprintf_getval_1
                    10055   @vsprintf_getval_5:
0000585C  2003      10056          move.l    D3,D0
0000585E  4CDF 000C 10057          movem.l   (A7)+,D2/D3
00005862  4E5E      10058          unlk      A6
00005864  4E75      10059          rts
                    10060   _vsprintf:
00005866  4E56 FFCC 10061          link      A6,#-52
0000586A  48E7 3F3C 10062          movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
0000586E  45EE 0008 10063          lea       8(A6),A2
00005872  47F8 57B4 10064          lea       @vsprintf_copy,A3
00005876  49F9 0000 10065          lea       _ultoa,A4
0000587A  5FBE      
0000587C  4286      10066          clr.l     D6
                    10067   vsprintf_1:
0000587E  206E 000C 10068          move.l    12(A6),A0
00005882  4A10      10069          tst.b     (A0)
00005884  6700 0624 10070          beq       vsprintf_3
00005888  206E 000C 10071          move.l    12(A6),A0
0000588C  1010      10072          move.b    (A0),D0
0000588E  4880      10073          ext.w     D0
00005890  48C0      10074          ext.l     D0
00005892  0C80 0000 10075          cmp.l     #37,D0
00005896  0025      
00005898  671C      10076          beq.s     vsprintf_4
0000589A  206E 000C 10077          move.l    12(A6),A0
0000589E  52AE 000C 10078          addq.l    #1,12(A6)
000058A2  1210      10079          move.b    (A0),D1
000058A4  4881      10080          ext.w     D1
000058A6  48C1      10081          ext.l     D1
000058A8  2F01      10082          move.l    D1,-(A7)
000058AA  2F0A      10083          move.l    A2,-(A7)
000058AC  4E93      10084          jsr       (A3)
000058AE  504F      10085          addq.w    #8,A7
000058B0  5286      10086          addq.l    #1,D6
000058B2  6000 05F2 10087          bra       vsprintf_2
                    10088   vsprintf_4:
000058B6  52AE 000C 10089          addq.l    #1,12(A6)
000058BA  422E FFD3 10090          clr.b     -45(A6)
000058BE  422E FFD2 10091          clr.b     -46(A6)
000058C2  422E FFD0 10092          clr.b     -48(A6)
000058C6  422E FFCF 10093          clr.b     -49(A6)
000058CA  422E FFCE 10094          clr.b     -50(A6)
000058CE  422E FFCD 10095          clr.b     -51(A6)
000058D2  42AE FFFC 10096          clr.l     -4(A6)
000058D6  7AFF      10097          moveq     #-1,D5
000058D8  41EE FFDC 10098          lea       -36(A6),A0
000058DC  2608      10099          move.l    A0,D3
000058DE  2408      10100          move.l    A0,D2
                    10101   vsprintf_6:
000058E0  206E 000C 10102          move.l    12(A6),A0
000058E4  1010      10103          move.b    (A0),D0
000058E6  4880      10104          ext.w     D0
000058E8  48C0      10105          ext.l     D0
000058EA  0C80 0000 10106          cmp.l     #43,D0
000058EE  002B      
000058F0  6730      10107          beq.s     vsprintf_12
000058F2  6E18      10108          bgt.s     vsprintf_15
000058F4  0C80 0000 10109          cmp.l     #35,D0
000058F8  0023      
000058FA  6700 003E 10110          beq       vsprintf_14
000058FE  6E00 0046 10111          bgt       vsprintf_9
00005902  0C80 0000 10112          cmp.l     #32,D0
00005906  0020      
00005908  6724      10113          beq.s     vsprintf_13
0000590A  603A      10114          bra.s     vsprintf_9
                    10115   vsprintf_15:
0000590C  0C80 0000 10116          cmp.l     #45,D0
00005910  002D      
00005912  6702      10117          beq.s     vsprintf_11
00005914  6030      10118          bra.s     vsprintf_9
                    10119   vsprintf_11:
00005916  1D7C 0001 10120          move.b    #1,-51(A6)
0000591A  FFCD      
0000591C  52AE 000C 10121          addq.l    #1,12(A6)
00005920  6026      10122          bra.s     vsprintf_7
                    10123   vsprintf_12:
00005922  1D7C 0001 10124          move.b    #1,-50(A6)
00005926  FFCE      
00005928  52AE 000C 10125          addq.l    #1,12(A6)
0000592C  601A      10126          bra.s     vsprintf_7
                    10127   vsprintf_13:
0000592E  1D7C 0001 10128          move.b    #1,-49(A6)
00005932  FFCF      
00005934  52AE 000C 10129          addq.l    #1,12(A6)
00005938  600E      10130          bra.s     vsprintf_7
                    10131   vsprintf_14:
0000593A  1D7C 0001 10132          move.b    #1,-48(A6)
0000593E  FFD0      
00005940  52AE 000C 10133          addq.l    #1,12(A6)
00005944  6002      10134          bra.s     vsprintf_7
                    10135   vsprintf_9:
00005946  6002      10136          bra.s     vsprintf_8
                    10137   vsprintf_7:
00005948  6096      10138          bra       vsprintf_6
                    10139   vsprintf_8:
0000594A  206E 000C 10140          move.l    12(A6),A0
0000594E  1010      10141          move.b    (A0),D0
00005950  4880      10142          ext.w     D0
00005952  48C0      10143          ext.l     D0
00005954  0C80 0000 10144          cmp.l     #48,D0
00005958  0030      
0000595A  660A      10145          bne.s     vsprintf_16
0000595C  52AE 000C 10146          addq.l    #1,12(A6)
00005960  1D7C 0001 10147          move.b    #1,-46(A6)
00005964  FFD2      
                    10148   vsprintf_16:
00005966  486E 0010 10149          pea       16(A6)
0000596A  486E 000C 10150          pea       12(A6)
0000596E  6100 FE6E 10151          bsr       @vsprintf_getval
00005972  504F      10152          addq.w    #8,A7
00005974  2A40      10153          move.l    D0,A5
00005976  206E 000C 10154          move.l    12(A6),A0
0000597A  1010      10155          move.b    (A0),D0
0000597C  4880      10156          ext.w     D0
0000597E  48C0      10157          ext.l     D0
00005980  0C80 0000 10158          cmp.l     #46,D0
00005984  002E      
00005986  6614      10159          bne.s     vsprintf_18
00005988  52AE 000C 10160          addq.l    #1,12(A6)
0000598C  486E 0010 10161          pea       16(A6)
00005990  486E 000C 10162          pea       12(A6)
00005994  6100 FE48 10163          bsr       @vsprintf_getval
00005998  504F      10164          addq.w    #8,A7
0000599A  2A00      10165          move.l    D0,D5
                    10166   vsprintf_18:
0000599C  206E 000C 10167          move.l    12(A6),A0
000059A0  1010      10168          move.b    (A0),D0
000059A2  4880      10169          ext.w     D0
000059A4  48C0      10170          ext.l     D0
000059A6  0C80 0000 10171          cmp.l     #108,D0
000059AA  006C      
000059AC  660A      10172          bne.s     vsprintf_20
000059AE  52AE 000C 10173          addq.l    #1,12(A6)
000059B2  1D7C 0001 10174          move.b    #1,-45(A6)
000059B6  FFD3      
                    10175   vsprintf_20:
000059B8  206E 000C 10176          move.l    12(A6),A0
000059BC  1010      10177          move.b    (A0),D0
000059BE  4880      10178          ext.w     D0
000059C0  48C0      10179          ext.l     D0
000059C2  0C80 0000 10180          cmp.l     #111,D0
000059C6  006F      
000059C8  6700 00D4 10181          beq       vsprintf_27
000059CC  6E34      10182          bgt.s     vsprintf_33
000059CE  0C80 0000 10183          cmp.l     #100,D0
000059D2  0064      
000059D4  6700 0054 10184          beq       vsprintf_24
000059D8  6E1C      10185          bgt.s     vsprintf_34
000059DA  0C80 0000 10186          cmp.l     #99,D0
000059DE  0063      
000059E0  6700 012C 10187          beq       vsprintf_30
000059E4  6E00 016A 10188          bgt       vsprintf_22
000059E8  0C80 0000 10189          cmp.l     #88,D0
000059EC  0058      
000059EE  6700 00E6 10190          beq       vsprintf_28
000059F2  6000 015C 10191          bra       vsprintf_22
                    10192   vsprintf_34:
000059F6  0C80 0000 10193          cmp.l     #105,D0
000059FA  0069      
000059FC  672C      10194          beq.s     vsprintf_24
000059FE  6000 0150 10195          bra       vsprintf_22
                    10196   vsprintf_33:
00005A02  0C80 0000 10197          cmp.l     #117,D0
00005A06  0075      
00005A08  6700 005C 10198          beq       vsprintf_26
00005A0C  6E0E      10199          bgt.s     vsprintf_35
00005A0E  0C80 0000 10200          cmp.l     #115,D0
00005A12  0073      
00005A14  6700 011C 10201          beq       vsprintf_31
00005A18  6000 0136 10202          bra       vsprintf_22
                    10203   vsprintf_35:
00005A1C  0C80 0000 10204          cmp.l     #120,D0
00005A20  0078      
00005A22  6700 00B2 10205          beq       vsprintf_28
00005A26  6000 0128 10206          bra       vsprintf_22
                    10207   vsprintf_24:
00005A2A  4A2E FFD3 10208          tst.b     -45(A6)
00005A2E  671A      10209          beq.s     vsprintf_36
00005A30  4878 000A 10210          pea       10
00005A34  2F03      10211          move.l    D3,-(A7)
00005A36  206E 0010 10212          move.l    16(A6),A0
00005A3A  58AE 0010 10213          addq.l    #4,16(A6)
00005A3E  2F10      10214          move.l    (A0),-(A7)
00005A40  6100 04F8 10215          bsr       _ltoa
00005A44  DEFC 000C 10216          add.w     #12,A7
00005A48  6018      10217          bra.s     vsprintf_37
                    10218   vsprintf_36:
00005A4A  4878 000A 10219          pea       10
00005A4E  2F03      10220          move.l    D3,-(A7)
00005A50  206E 0010 10221          move.l    16(A6),A0
00005A54  58AE 0010 10222          addq.l    #4,16(A6)
00005A58  2F10      10223          move.l    (A0),-(A7)
00005A5A  6100 04DE 10224          bsr       _ltoa
00005A5E  DEFC 000C 10225          add.w     #12,A7
                    10226   vsprintf_37:
00005A62  6000 00FA 10227          bra       vsprintf_23
                    10228   vsprintf_26:
00005A66  4A2E FFD3 10229          tst.b     -45(A6)
00005A6A  6718      10230          beq.s     vsprintf_38
00005A6C  4878 000A 10231          pea       10
00005A70  2F03      10232          move.l    D3,-(A7)
00005A72  206E 0010 10233          move.l    16(A6),A0
00005A76  58AE 0010 10234          addq.l    #4,16(A6)
00005A7A  2F10      10235          move.l    (A0),-(A7)
00005A7C  4E94      10236          jsr       (A4)
00005A7E  DEFC 000C 10237          add.w     #12,A7
00005A82  6016      10238          bra.s     vsprintf_39
                    10239   vsprintf_38:
00005A84  4878 000A 10240          pea       10
00005A88  2F03      10241          move.l    D3,-(A7)
00005A8A  206E 0010 10242          move.l    16(A6),A0
00005A8E  58AE 0010 10243          addq.l    #4,16(A6)
00005A92  2F10      10244          move.l    (A0),-(A7)
00005A94  4E94      10245          jsr       (A4)
00005A96  DEFC 000C 10246          add.w     #12,A7
                    10247   vsprintf_39:
00005A9A  6000 00C2 10248          bra       vsprintf_23
                    10249   vsprintf_27:
00005A9E  4A2E FFD3 10250          tst.b     -45(A6)
00005AA2  6718      10251          beq.s     vsprintf_40
00005AA4  4878 0008 10252          pea       8
00005AA8  2F03      10253          move.l    D3,-(A7)
00005AAA  206E 0010 10254          move.l    16(A6),A0
00005AAE  58AE 0010 10255          addq.l    #4,16(A6)
00005AB2  2F10      10256          move.l    (A0),-(A7)
00005AB4  4E94      10257          jsr       (A4)
00005AB6  DEFC 000C 10258          add.w     #12,A7
00005ABA  6016      10259          bra.s     vsprintf_41
                    10260   vsprintf_40:
00005ABC  4878 0008 10261          pea       8
00005AC0  2F03      10262          move.l    D3,-(A7)
00005AC2  206E 0010 10263          move.l    16(A6),A0
00005AC6  58AE 0010 10264          addq.l    #4,16(A6)
00005ACA  2F10      10265          move.l    (A0),-(A7)
00005ACC  4E94      10266          jsr       (A4)
00005ACE  DEFC 000C 10267          add.w     #12,A7
                    10268   vsprintf_41:
00005AD2  6000 008A 10269          bra       vsprintf_23
                    10270   vsprintf_28:
00005AD6  4A2E FFD3 10271          tst.b     -45(A6)
00005ADA  6718      10272          beq.s     vsprintf_42
00005ADC  4878 0010 10273          pea       16
00005AE0  2F03      10274          move.l    D3,-(A7)
00005AE2  206E 0010 10275          move.l    16(A6),A0
00005AE6  58AE 0010 10276          addq.l    #4,16(A6)
00005AEA  2F10      10277          move.l    (A0),-(A7)
00005AEC  4E94      10278          jsr       (A4)
00005AEE  DEFC 000C 10279          add.w     #12,A7
00005AF2  6016      10280          bra.s     vsprintf_43
                    10281   vsprintf_42:
00005AF4  4878 0010 10282          pea       16
00005AF8  2F03      10283          move.l    D3,-(A7)
00005AFA  206E 0010 10284          move.l    16(A6),A0
00005AFE  58AE 0010 10285          addq.l    #4,16(A6)
00005B02  2F10      10286          move.l    (A0),-(A7)
00005B04  4E94      10287          jsr       (A4)
00005B06  DEFC 000C 10288          add.w     #12,A7
                    10289   vsprintf_43:
00005B0A  6000 0052 10290          bra       vsprintf_23
                    10291   vsprintf_30:
00005B0E  206E 0010 10292          move.l    16(A6),A0
00005B12  58AE 0010 10293          addq.l    #4,16(A6)
00005B16  2010      10294          move.l    (A0),D0
00005B18  2042      10295          move.l    D2,A0
00005B1A  5282      10296          addq.l    #1,D2
00005B1C  1080      10297          move.b    D0,(A0)
00005B1E  2042      10298          move.l    D2,A0
00005B20  4210      10299          clr.b     (A0)
00005B22  200D      10300          move.l    A5,D0
00005B24  6704      10301          beq.s     vsprintf_44
00005B26  200D      10302          move.l    A5,D0
00005B28  6002      10303          bra.s     vsprintf_45
                    10304   vsprintf_44:
00005B2A  7001      10305          moveq     #1,D0
                    10306   vsprintf_45:
00005B2C  2A00      10307          move.l    D0,D5
00005B2E  6000 002E 10308          bra       vsprintf_23
                    10309   vsprintf_31:
00005B32  206E 0010 10310          move.l    16(A6),A0
00005B36  58AE 0010 10311          addq.l    #4,16(A6)
00005B3A  2610      10312          move.l    (A0),D3
00005B3C  0C85 FFFF 10313          cmp.l     #-1,D5
00005B40  FFFF      
00005B42  660A      10314          bne.s     vsprintf_46
00005B44  2F03      10315          move.l    D3,-(A7)
00005B46  6100 0578 10316          bsr       _strlen
00005B4A  584F      10317          addq.w    #4,A7
00005B4C  2A00      10318          move.l    D0,D5
                    10319   vsprintf_46:
00005B4E  600E      10320          bra.s     vsprintf_23
                    10321   vsprintf_22:
00005B50  206E 000C 10322          move.l    12(A6),A0
00005B54  2242      10323          move.l    D2,A1
00005B56  5282      10324          addq.l    #1,D2
00005B58  1290      10325          move.b    (A0),(A1)
00005B5A  2042      10326          move.l    D2,A0
00005B5C  4210      10327          clr.b     (A0)
                    10328   vsprintf_23:
00005B5E  2F03      10329          move.l    D3,-(A7)
00005B60  6100 055E 10330          bsr       _strlen
00005B64  584F      10331          addq.w    #4,A7
00005B66  1800      10332          move.b    D0,D4
00005B68  206E 000C 10333          move.l    12(A6),A0
00005B6C  1010      10334          move.b    (A0),D0
00005B6E  4880      10335          ext.w     D0
00005B70  48C0      10336          ext.l     D0
00005B72  0C80 0000 10337          cmp.l     #115,D0
00005B76  0073      
00005B78  6618      10338          bne.s     vsprintf_48
00005B7A  0C85 0000 10339          cmp.l     #0,D5
00005B7E  0000      
00005B80  6D10      10340          blt.s     vsprintf_48
00005B82  4884      10341          ext.w     D4
00005B84  48C4      10342          ext.l     D4
00005B86  B885      10343          cmp.l     D5,D4
00005B88  6F04      10344          ble.s     vsprintf_50
00005B8A  1005      10345          move.b    D5,D0
00005B8C  6002      10346          bra.s     vsprintf_51
                    10347   vsprintf_50:
00005B8E  1004      10348          move.b    D4,D0
                    10349   vsprintf_51:
00005B90  1800      10350          move.b    D0,D4
                    10351   vsprintf_48:
00005B92  206E 000C 10352          move.l    12(A6),A0
00005B96  1010      10353          move.b    (A0),D0
00005B98  4880      10354          ext.w     D0
00005B9A  48C0      10355          ext.l     D0
00005B9C  0C80 0000 10356          cmp.l     #88,D0
00005BA0  0058      
00005BA2  6600 0026 10357          bne       vsprintf_56
00005BA6  41EE FFDC 10358          lea       -36(A6),A0
00005BAA  2408      10359          move.l    A0,D2
                    10360   vsprintf_54:
00005BAC  2042      10361          move.l    D2,A0
00005BAE  4A10      10362          tst.b     (A0)
00005BB0  6718      10363          beq.s     vsprintf_56
00005BB2  2042      10364          move.l    D2,A0
00005BB4  1210      10365          move.b    (A0),D1
00005BB6  4881      10366          ext.w     D1
00005BB8  48C1      10367          ext.l     D1
00005BBA  2F01      10368          move.l    D1,-(A7)
00005BBC  6100 FB98 10369          bsr       _toupper
00005BC0  584F      10370          addq.w    #4,A7
00005BC2  2042      10371          move.l    D2,A0
00005BC4  1080      10372          move.b    D0,(A0)
00005BC6  5282      10373          addq.l    #1,D2
00005BC8  60E2      10374          bra       vsprintf_54
                    10375   vsprintf_56:
00005BCA  7E00      10376          moveq     #0,D7
00005BCC  41EE FFD4 10377          lea       -44(A6),A0
00005BD0  2408      10378          move.l    A0,D2
00005BD2  206E 000C 10379          move.l    12(A6),A0
00005BD6  1010      10380          move.b    (A0),D0
00005BD8  4880      10381          ext.w     D0
00005BDA  48C0      10382          ext.l     D0
00005BDC  0C80 0000 10383          cmp.l     #100,D0
00005BE0  0064      
00005BE2  6714      10384          beq.s     vsprintf_59
00005BE4  206E 000C 10385          move.l    12(A6),A0
00005BE8  1010      10386          move.b    (A0),D0
00005BEA  4880      10387          ext.w     D0
00005BEC  48C0      10388          ext.l     D0
00005BEE  0C80 0000 10389          cmp.l     #105,D0
00005BF2  0069      
00005BF4  6600 0076 10390          bne       vsprintf_65
                    10391   vsprintf_59:
00005BF8  4A2E FFCE 10392          tst.b     -50(A6)
00005BFC  6612      10393          bne.s     vsprintf_62
00005BFE  2043      10394          move.l    D3,A0
00005C00  1010      10395          move.b    (A0),D0
00005C02  4880      10396          ext.w     D0
00005C04  48C0      10397          ext.l     D0
00005C06  0C80 0000 10398          cmp.l     #45,D0
00005C0A  002D      
00005C0C  6600 002E 10399          bne       vsprintf_60
                    10400   vsprintf_62:
00005C10  2043      10401          move.l    D3,A0
00005C12  1010      10402          move.b    (A0),D0
00005C14  4880      10403          ext.w     D0
00005C16  48C0      10404          ext.l     D0
00005C18  0C80 0000 10405          cmp.l     #45,D0
00005C1C  002D      
00005C1E  660E      10406          bne.s     vsprintf_63
00005C20  2043      10407          move.l    D3,A0
00005C22  5283      10408          addq.l    #1,D3
00005C24  2242      10409          move.l    D2,A1
00005C26  5282      10410          addq.l    #1,D2
00005C28  1290      10411          move.b    (A0),(A1)
00005C2A  5304      10412          subq.b    #1,D4
00005C2C  6008      10413          bra.s     vsprintf_64
                    10414   vsprintf_63:
00005C2E  2042      10415          move.l    D2,A0
00005C30  5282      10416          addq.l    #1,D2
00005C32  10BC 002B 10417          move.b    #43,(A0)
                    10418   vsprintf_64:
00005C36  5287      10419          addq.l    #1,D7
00005C38  6000 0032 10420          bra       vsprintf_65
                    10421   vsprintf_60:
00005C3C  4A2E FFCF 10422          tst.b     -49(A6)
00005C40  6700 002A 10423          beq       vsprintf_65
00005C44  2043      10424          move.l    D3,A0
00005C46  1010      10425          move.b    (A0),D0
00005C48  4880      10426          ext.w     D0
00005C4A  48C0      10427          ext.l     D0
00005C4C  0C80 0000 10428          cmp.l     #45,D0
00005C50  002D      
00005C52  660E      10429          bne.s     vsprintf_67
00005C54  2043      10430          move.l    D3,A0
00005C56  5283      10431          addq.l    #1,D3
00005C58  2242      10432          move.l    D2,A1
00005C5A  5282      10433          addq.l    #1,D2
00005C5C  1290      10434          move.b    (A0),(A1)
00005C5E  5304      10435          subq.b    #1,D4
00005C60  6008      10436          bra.s     vsprintf_68
                    10437   vsprintf_67:
00005C62  2042      10438          move.l    D2,A0
00005C64  5282      10439          addq.l    #1,D2
00005C66  10BC 0020 10440          move.b    #32,(A0)
                    10441   vsprintf_68:
00005C6A  5287      10442          addq.l    #1,D7
                    10443   vsprintf_65:
00005C6C  4A2E FFD0 10444          tst.b     -48(A6)
00005C70  6700 0066 10445          beq       vsprintf_77
00005C74  206E 000C 10446          move.l    12(A6),A0
00005C78  1010      10447          move.b    (A0),D0
00005C7A  4880      10448          ext.w     D0
00005C7C  48C0      10449          ext.l     D0
00005C7E  0C80 0000 10450          cmp.l     #111,D0
00005C82  006F      
00005C84  671A      10451          beq.s     vsprintf_73
00005C86  6E0C      10452          bgt.s     vsprintf_76
00005C88  0C80 0000 10453          cmp.l     #88,D0
00005C8C  0058      
00005C8E  6710      10454          beq.s     vsprintf_73
00005C90  6000 0046 10455          bra       vsprintf_77
                    10456   vsprintf_76:
00005C94  0C80 0000 10457          cmp.l     #120,D0
00005C98  0078      
00005C9A  6704      10458          beq.s     vsprintf_73
00005C9C  6000 003A 10459          bra       vsprintf_77
                    10460   vsprintf_73:
00005CA0  2042      10461          move.l    D2,A0
00005CA2  5282      10462          addq.l    #1,D2
00005CA4  10BC 0030 10463          move.b    #48,(A0)
00005CA8  5287      10464          addq.l    #1,D7
00005CAA  206E 000C 10465          move.l    12(A6),A0
00005CAE  1010      10466          move.b    (A0),D0
00005CB0  4880      10467          ext.w     D0
00005CB2  48C0      10468          ext.l     D0
00005CB4  0C80 0000 10469          cmp.l     #120,D0
00005CB8  0078      
00005CBA  6712      10470          beq.s     vsprintf_79
00005CBC  206E 000C 10471          move.l    12(A6),A0
00005CC0  1010      10472          move.b    (A0),D0
00005CC2  4880      10473          ext.w     D0
00005CC4  48C0      10474          ext.l     D0
00005CC6  0C80 0000 10475          cmp.l     #88,D0
00005CCA  0058      
00005CCC  660A      10476          bne.s     vsprintf_77
                    10477   vsprintf_79:
00005CCE  2042      10478          move.l    D2,A0
00005CD0  5282      10479          addq.l    #1,D2
00005CD2  10BC 0078 10480          move.b    #120,(A0)
00005CD6  5287      10481          addq.l    #1,D7
                    10482   vsprintf_77:
00005CD8  2042      10483          move.l    D2,A0
00005CDA  4210      10484          clr.b     (A0)
00005CDC  206E 000C 10485          move.l    12(A6),A0
00005CE0  1010      10486          move.b    (A0),D0
00005CE2  4880      10487          ext.w     D0
00005CE4  48C0      10488          ext.l     D0
00005CE6  0C80 0000 10489          cmp.l     #105,D0
00005CEA  0069      
00005CEC  6700 0076 10490          beq       vsprintf_82
00005CF0  6E42      10491          bgt.s     vsprintf_93
00005CF2  0C80 0000 10492          cmp.l     #99,D0
00005CF6  0063      
00005CF8  6700 0084 10493          beq       vsprintf_96
00005CFC  6E1C      10494          bgt.s     vsprintf_94
00005CFE  0C80 0000 10495          cmp.l     #88,D0
00005D02  0058      
00005D04  6700 005E 10496          beq       vsprintf_82
00005D08  6E00 0184 10497          bgt       vsprintf_80
00005D0C  0C80 0000 10498          cmp.l     #69,D0
00005D10  0045      
00005D12  6700 0050 10499          beq       vsprintf_82
00005D16  6000 0176 10500          bra       vsprintf_80
                    10501   vsprintf_94:
00005D1A  0C80 0000 10502          cmp.l     #101,D0
00005D1E  0065      
00005D20  6700 0042 10503          beq       vsprintf_82
00005D24  6E00 0168 10504          bgt       vsprintf_80
00005D28  0C80 0000 10505          cmp.l     #100,D0
00005D2C  0064      
00005D2E  6734      10506          beq.s     vsprintf_82
00005D30  6000 015C 10507          bra       vsprintf_80
                    10508   vsprintf_93:
00005D34  0C80 0000 10509          cmp.l     #117,D0
00005D38  0075      
00005D3A  6728      10510          beq.s     vsprintf_82
00005D3C  6E1A      10511          bgt.s     vsprintf_95
00005D3E  0C80 0000 10512          cmp.l     #115,D0
00005D42  0073      
00005D44  6700 0038 10513          beq       vsprintf_96
00005D48  6E00 0144 10514          bgt       vsprintf_80
00005D4C  0C80 0000 10515          cmp.l     #111,D0
00005D50  006F      
00005D52  6710      10516          beq.s     vsprintf_82
00005D54  6000 0138 10517          bra       vsprintf_80
                    10518   vsprintf_95:
00005D58  0C80 0000 10519          cmp.l     #120,D0
00005D5C  0078      
00005D5E  6704      10520          beq.s     vsprintf_82
00005D60  6000 012C 10521          bra       vsprintf_80
                    10522   vsprintf_82:
00005D64  4A2E FFD2 10523          tst.b     -46(A6)
00005D68  6714      10524          beq.s     vsprintf_96
00005D6A  4A2E FFCD 10525          tst.b     -51(A6)
00005D6E  660E      10526          bne.s     vsprintf_96
00005D70  200D      10527          move.l    A5,D0
00005D72  9087      10528          sub.l     D7,D0
00005D74  4884      10529          ext.w     D4
00005D76  48C4      10530          ext.l     D4
00005D78  9084      10531          sub.l     D4,D0
00005D7A  2D40 FFFC 10532          move.l    D0,-4(A6)
                    10533   vsprintf_96:
00005D7E  202E FFFC 10534          move.l    -4(A6),D0
00005D82  0C80 0000 10535          cmp.l     #0,D0
00005D86  0000      
00005D88  6C04      10536          bge.s     vsprintf_98
00005D8A  42AE FFFC 10537          clr.l     -4(A6)
                    10538   vsprintf_98:
00005D8E  4A2E FFCD 10539          tst.b     -51(A6)
00005D92  6600 0030 10540          bne       vsprintf_104
00005D96  4884      10541          ext.w     D4
00005D98  48C4      10542          ext.l     D4
00005D9A  2004      10543          move.l    D4,D0
00005D9C  D0AE FFFC 10544          add.l     -4(A6),D0
00005DA0  D087      10545          add.l     D7,D0
00005DA2  1D40 FFD1 10546          move.b    D0,-47(A6)
                    10547   vsprintf_102:
00005DA6  102E FFD1 10548          move.b    -47(A6),D0
00005DAA  4880      10549          ext.w     D0
00005DAC  48C0      10550          ext.l     D0
00005DAE  220D      10551          move.l    A5,D1
00005DB0  534D      10552          subq.w    #1,A5
00005DB2  B081      10553          cmp.l     D1,D0
00005DB4  6C0E      10554          bge.s     vsprintf_104
00005DB6  4878 0020 10555          pea       32
00005DBA  2F0A      10556          move.l    A2,-(A7)
00005DBC  4E93      10557          jsr       (A3)
00005DBE  504F      10558          addq.w    #8,A7
00005DC0  5286      10559          addq.l    #1,D6
00005DC2  60E2      10560          bra       vsprintf_102
                    10561   vsprintf_104:
00005DC4  41EE FFD4 10562          lea       -44(A6),A0
00005DC8  2408      10563          move.l    A0,D2
                    10564   vsprintf_105:
00005DCA  2042      10565          move.l    D2,A0
00005DCC  4A10      10566          tst.b     (A0)
00005DCE  6716      10567          beq.s     vsprintf_107
00005DD0  2042      10568          move.l    D2,A0
00005DD2  5282      10569          addq.l    #1,D2
00005DD4  1210      10570          move.b    (A0),D1
00005DD6  4881      10571          ext.w     D1
00005DD8  48C1      10572          ext.l     D1
00005DDA  2F01      10573          move.l    D1,-(A7)
00005DDC  2F0A      10574          move.l    A2,-(A7)
00005DDE  4E93      10575          jsr       (A3)
00005DE0  504F      10576          addq.w    #8,A7
00005DE2  5286      10577          addq.l    #1,D6
00005DE4  60E4      10578          bra       vsprintf_105
                    10579   vsprintf_107:
00005DE6  202E FFFC 10580          move.l    -4(A6),D0
00005DEA  1D40 FFD1 10581          move.b    D0,-47(A6)
                    10582   vsprintf_108:
00005DEE  102E FFD1 10583          move.b    -47(A6),D0
00005DF2  532E FFD1 10584          subq.b    #1,-47(A6)
00005DF6  4A00      10585          tst.b     D0
00005DF8  670E      10586          beq.s     vsprintf_110
00005DFA  4878 0030 10587          pea       48
00005DFE  2F0A      10588          move.l    A2,-(A7)
00005E00  4E93      10589          jsr       (A3)
00005E02  504F      10590          addq.w    #8,A7
00005E04  5286      10591          addq.l    #1,D6
00005E06  60E6      10592          bra       vsprintf_108
                    10593   vsprintf_110:
00005E08  2043      10594          move.l    D3,A0
00005E0A  4A10      10595          tst.b     (A0)
00005E0C  6700 0048 10596          beq       vsprintf_113
00005E10  206E 000C 10597          move.l    12(A6),A0
00005E14  1010      10598          move.b    (A0),D0
00005E16  4880      10599          ext.w     D0
00005E18  48C0      10600          ext.l     D0
00005E1A  0C80 0000 10601          cmp.l     #115,D0
00005E1E  0073      
00005E20  670C      10602          beq.s     vsprintf_116
00005E22  6E18      10603          bgt.s     vsprintf_119
00005E24  0C80 0000 10604          cmp.l     #99,D0
00005E28  0063      
00005E2A  6702      10605          beq.s     vsprintf_116
00005E2C  600E      10606          bra.s     vsprintf_119
                    10607   vsprintf_116:
00005E2E  2005      10608          move.l    D5,D0
00005E30  5385      10609          subq.l    #1,D5
00005E32  0C80 0000 10610          cmp.l     #0,D0
00005E36  0000      
00005E38  6E02      10611          bgt.s     vsprintf_119
00005E3A  6016      10612          bra.s     vsprintf_115
                    10613   vsprintf_119:
00005E3C  2043      10614          move.l    D3,A0
00005E3E  5283      10615          addq.l    #1,D3
00005E40  1210      10616          move.b    (A0),D1
00005E42  4881      10617          ext.w     D1
00005E44  48C1      10618          ext.l     D1
00005E46  2F01      10619          move.l    D1,-(A7)
00005E48  2F0A      10620          move.l    A2,-(A7)
00005E4A  4E93      10621          jsr       (A3)
00005E4C  504F      10622          addq.w    #8,A7
00005E4E  5286      10623          addq.l    #1,D6
00005E50  6002      10624          bra.s     vsprintf_112
                    10625   vsprintf_115:
00005E52  6002      10626          bra.s     vsprintf_113
                    10627   vsprintf_112:
00005E54  60B2      10628          bra       vsprintf_110
                    10629   vsprintf_113:
00005E56  4A2E FFCD 10630          tst.b     -51(A6)
00005E5A  6700 0030 10631          beq       vsprintf_125
00005E5E  4884      10632          ext.w     D4
00005E60  48C4      10633          ext.l     D4
00005E62  2004      10634          move.l    D4,D0
00005E64  D0AE FFFC 10635          add.l     -4(A6),D0
00005E68  D087      10636          add.l     D7,D0
00005E6A  1D40 FFD1 10637          move.b    D0,-47(A6)
                    10638   vsprintf_123:
00005E6E  102E FFD1 10639          move.b    -47(A6),D0
00005E72  4880      10640          ext.w     D0
00005E74  48C0      10641          ext.l     D0
00005E76  220D      10642          move.l    A5,D1
00005E78  534D      10643          subq.w    #1,A5
00005E7A  B081      10644          cmp.l     D1,D0
00005E7C  6C0E      10645          bge.s     vsprintf_125
00005E7E  4878 0020 10646          pea       32
00005E82  2F0A      10647          move.l    A2,-(A7)
00005E84  4E93      10648          jsr       (A3)
00005E86  504F      10649          addq.w    #8,A7
00005E88  5386      10650          subq.l    #1,D6
00005E8A  60E2      10651          bra       vsprintf_123
                    10652   vsprintf_125:
00005E8C  6014      10653          bra.s     vsprintf_81
                    10654   vsprintf_80:
00005E8E  206E 000C 10655          move.l    12(A6),A0
00005E92  1210      10656          move.b    (A0),D1
00005E94  4881      10657          ext.w     D1
00005E96  48C1      10658          ext.l     D1
00005E98  2F01      10659          move.l    D1,-(A7)
00005E9A  2F0A      10660          move.l    A2,-(A7)
00005E9C  4E93      10661          jsr       (A3)
00005E9E  504F      10662          addq.w    #8,A7
00005EA0  5286      10663          addq.l    #1,D6
                    10664   vsprintf_81:
00005EA2  52AE 000C 10665          addq.l    #1,12(A6)
                    10666   vsprintf_2:
00005EA6  6000 F9D6 10667          bra       vsprintf_1
                    10668   vsprintf_3:
00005EAA  4A92      10669          tst.l     (A2)
00005EAC  6710      10670          beq.s     vsprintf_126
00005EAE  4201      10671          clr.b     D1
00005EB0  C2BC 0000 10672          and.l     #255,D1
00005EB4  00FF      
00005EB6  2F01      10673          move.l    D1,-(A7)
00005EB8  2F0A      10674          move.l    A2,-(A7)
00005EBA  4E93      10675          jsr       (A3)
00005EBC  504F      10676          addq.w    #8,A7
                    10677   vsprintf_126:
00005EBE  2006      10678          move.l    D6,D0
00005EC0  4CDF 3CFC 10679          movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
00005EC4  4E5E      10680          unlk      A6
00005EC6  4E75      10681          rts
                    10682   @itoa_convert:
00005EC8  4E56 0000 10683          link      A6,#0
00005ECC  48E7 3C00 10684          movem.l   D2/D3/D4/D5,-(A7)
00005ED0  242E 0008 10685          move.l    8(A6),D2
00005ED4  262E 0010 10686          move.l    16(A6),D3
00005ED8  2A2E 000C 10687          move.l    12(A6),D5
00005EDC  2F05      10688          move.l    D5,-(A7)
00005EDE  2F03      10689          move.l    D3,-(A7)
00005EE0  6100 F6B4 10690          bsr       ULDIV
00005EE4  202F 0004 10691          move.l    4(A7),D0
00005EE8  504F      10692          addq.w    #8,A7
00005EEA  2800      10693          move.l    D0,D4
00005EEC  BA83      10694          cmp.l     D3,D5
00005EEE  651A      10695          blo.s     @itoa_convert_1
00005EF0  2F03      10696          move.l    D3,-(A7)
00005EF2  2F05      10697          move.l    D5,-(A7)
00005EF4  2F03      10698          move.l    D3,-(A7)
00005EF6  6100 F69E 10699          bsr       ULDIV
00005EFA  2217      10700          move.l    (A7),D1
00005EFC  504F      10701          addq.w    #8,A7
00005EFE  2F01      10702          move.l    D1,-(A7)
00005F00  2F02      10703          move.l    D2,-(A7)
00005F02  61C4      10704          bsr       @itoa_convert
00005F04  DEFC 000C 10705          add.w     #12,A7
00005F08  2400      10706          move.l    D0,D2
                    10707   @itoa_convert_1:
00005F0A  0C84 0000 10708          cmp.l     #9,D4
00005F0E  0009      
00005F10  6E0A      10709          bgt.s     @itoa_convert_3
00005F12  2004      10710          move.l    D4,D0
00005F14  0680 0000 10711          add.l     #48,D0
00005F18  0030      
00005F1A  600E      10712          bra.s     @itoa_convert_4
                    10713   @itoa_convert_3:
00005F1C  2004      10714          move.l    D4,D0
00005F1E  0680 0000 10715          add.l     #97,D0
00005F22  0061      
00005F24  0480 0000 10716          sub.l     #10,D0
00005F28  000A      
                    10717   @itoa_convert_4:
00005F2A  2042      10718          move.l    D2,A0
00005F2C  1080      10719          move.b    D0,(A0)
00005F2E  2002      10720          move.l    D2,D0
00005F30  5280      10721          addq.l    #1,D0
00005F32  4CDF 003C 10722          movem.l   (A7)+,D2/D3/D4/D5
00005F36  4E5E      10723          unlk      A6
00005F38  4E75      10724          rts
                    10725   _ltoa:
00005F3A  4E56 0000 10726          link      A6,#0
00005F3E  48E7 3C00 10727          movem.l   D2/D3/D4/D5,-(A7)
00005F42  242E 0008 10728          move.l    8(A6),D2
00005F46  262E 000C 10729          move.l    12(A6),D3
00005F4A  2A2E 0010 10730          move.l    16(A6),D5
00005F4E  2803      10731          move.l    D3,D4
00005F50  0C85 0000 10732          cmp.l     #2,D5
00005F54  0002      
00005F56  6D08      10733          blt.s     ltoa_3
00005F58  0C85 0000 10734          cmp.l     #36,D5
00005F5C  0024      
00005F5E  6F06      10735          ble.s     ltoa_1
                    10736   ltoa_3:
00005F60  2003      10737          move.l    D3,D0
00005F62  6000 0052 10738          bra       ltoa_4
                    10739   ltoa_1:
00005F66  0C85 0000 10740          cmp.l     #10,D5
00005F6A  000A      
00005F6C  6600 0032 10741          bne       ltoa_5
00005F70  0C82 0000 10742          cmp.l     #0,D2
00005F74  0000      
00005F76  6C28      10743          bge.s     ltoa_5
00005F78  2002      10744          move.l    D2,D0
00005F7A  4480      10745          neg.l     D0
00005F7C  2400      10746          move.l    D0,D2
00005F7E  0C82 0000 10747          cmp.l     #0,D2
00005F82  0000      
00005F84  6C12      10748          bge.s     ltoa_7
00005F86  4879 0000 10749          pea       @itoa_1
00005F8A  799C      
00005F8C  2F03      10750          move.l    D3,-(A7)
00005F8E  6100 F5F6 10751          bsr       _strcpy
00005F92  504F      10752          addq.w    #8,A7
00005F94  2003      10753          move.l    D3,D0
00005F96  601E      10754          bra.s     ltoa_4
                    10755   ltoa_7:
00005F98  2044      10756          move.l    D4,A0
00005F9A  5284      10757          addq.l    #1,D4
00005F9C  10BC 002D 10758          move.b    #45,(A0)
                    10759   ltoa_5:
00005FA0  2F05      10760          move.l    D5,-(A7)
00005FA2  2F02      10761          move.l    D2,-(A7)
00005FA4  2F04      10762          move.l    D4,-(A7)
00005FA6  6100 FF20 10763          bsr       @itoa_convert
00005FAA  DEFC 000C 10764          add.w     #12,A7
00005FAE  2800      10765          move.l    D0,D4
00005FB0  2044      10766          move.l    D4,A0
00005FB2  4210      10767          clr.b     (A0)
00005FB4  2003      10768          move.l    D3,D0
                    10769   ltoa_4:
00005FB6  4CDF 003C 10770          movem.l   (A7)+,D2/D3/D4/D5
00005FBA  4E5E      10771          unlk      A6
00005FBC  4E75      10772          rts
                    10773   _ultoa:
00005FBE  4E56 0000 10774          link      A6,#0
00005FC2  48E7 3800 10775          movem.l   D2/D3/D4,-(A7)
00005FC6  262E 0010 10776          move.l    16(A6),D3
00005FCA  282E 000C 10777          move.l    12(A6),D4
00005FCE  2404      10778          move.l    D4,D2
00005FD0  0C83 0000 10779          cmp.l     #2,D3
00005FD4  0002      
00005FD6  6D08      10780          blt.s     ultoa_3
00005FD8  0C83 0000 10781          cmp.l     #36,D3
00005FDC  0024      
00005FDE  6F04      10782          ble.s     ultoa_1
                    10783   ultoa_3:
00005FE0  2004      10784          move.l    D4,D0
00005FE2  6018      10785          bra.s     ultoa_4
                    10786   ultoa_1:
00005FE4  2F03      10787          move.l    D3,-(A7)
00005FE6  2F2E 0008 10788          move.l    8(A6),-(A7)
00005FEA  2F02      10789          move.l    D2,-(A7)
00005FEC  6100 FEDA 10790          bsr       @itoa_convert
00005FF0  DEFC 000C 10791          add.w     #12,A7
00005FF4  2400      10792          move.l    D0,D2
00005FF6  2042      10793          move.l    D2,A0
00005FF8  4210      10794          clr.b     (A0)
00005FFA  2004      10795          move.l    D4,D0
                    10796   ultoa_4:
00005FFC  4CDF 001C 10797          movem.l   (A7)+,D2/D3/D4
00006000  4E5E      10798          unlk      A6
00006002  4E75      10799          rts
                    10800   _itoa:
00006004  4E56 0000 10801          link      A6,#0
00006008  2F2E 0010 10802          move.l    16(A6),-(A7)
0000600C  2F2E 000C 10803          move.l    12(A6),-(A7)
00006010  2F2E 0008 10804          move.l    8(A6),-(A7)
00006014  6100 FF24 10805          bsr       _ltoa
00006018  DEFC 000C 10806          add.w     #12,A7
0000601C  4E5E      10807          unlk      A6
0000601E  4E75      10808          rts
                    10809   ULMUL:
00006020  4E56 0000 10810          link    A6,#0
00006024  48E7 C000 10811          movem.l D0/D1,-(A7)
00006028  222E 0008 10812          move.l  8(A6),D1
0000602C  202E 000C 10813          move.l  12(A6),D0
00006030  602C      10814          bra.s   lmul_3
                    10815   LMUL:
00006032  4E56 0000 10816          link    A6,#0
00006036  48E7 C000 10817          movem.l D0/D1,-(A7)
0000603A  222E 0008 10818          move.l  8(A6),D1
0000603E  202E 000C 10819          move.l  12(A6),D0
00006042  4A80      10820          tst.l   D0
00006044  6A0A      10821          bpl.s   lmul_1
00006046  4480      10822          neg.l   D0
00006048  4A81      10823          tst.l   D1
0000604A  6A0A      10824          bpl.s   lmul_2
0000604C  4481      10825          neg.l   D1
0000604E  600E      10826          bra.s   lmul_3
                    10827   lmul_1:
00006050  4A81      10828          tst.l   D1
00006052  6A0A      10829          bpl.s   lmul_3
00006054  4481      10830          neg.l   D1
                    10831   lmul_2:
00006056  6114      10832          bsr.s   domul
00006058  4481      10833          neg.l   D1
0000605A  4080      10834          negx.l  D0
0000605C  6002      10835          bra.s   lmul_4
                    10836   lmul_3:
0000605E  610C      10837          bsr.s   domul
                    10838   lmul_4:
00006060  2D41 0008 10839          move.l  D1,8(A6)
00006064  4CDF 0003 10840          movem.l (A7)+,D0/D1
00006068  4E5E      10841          unlk    A6
0000606A  4E75      10842          rts
                    10843   domul:
0000606C  0C81 0000 10844          cmpi.l  #$FFFF,D1
00006070  FFFF      
00006072  620C      10845          bhi.s   domul_1
00006074  0C80 0000 10846          cmpi.l  #$FFFF,D0
00006078  FFFF      
0000607A  620E      10847          bhi.s   domul_2
0000607C  C2C0      10848          mulu    D0,D1
0000607E  4E75      10849          rts
                    10850   domul_1:
00006080  0C80 0000 10851          cmpi.l  #$FFFF,D0
00006084  FFFF      
00006086  6218      10852          bhi.s   domul_4
00006088  6002      10853          bra.s   domul_3
                    10854   domul_2
0000608A  C141      10855          exg     D0,D1
                    10856   domul_3:
0000608C  2F02      10857          move.l  D2,-(A7)
0000608E  2401      10858          move.l  D1,D2
00006090  4842      10859          swap    D2
00006092  C2C0      10860          mulu    D0,D1
00006094  C4C0      10861          mulu    D0,D2
00006096  4842      10862          swap    D2
00006098  4242      10863          clr.w   D2
0000609A  D282      10864          add.l   D2,D1
0000609C  241F      10865          move.l  (A7)+,D2
0000609E  4E75      10866          rts
                    10867   domul_4:
000060A0  48E7 3000 10868          movem.l D2/D3,-(A7)
000060A4  2401      10869          move.l  D1,D2
000060A6  2601      10870          move.l  D1,D3
000060A8  C2C0      10871          mulu    D0,D1
000060AA  4842      10872          swap    D2
000060AC  C4C0      10873          mulu    D0,D2
000060AE  4840      10874          swap    D0
000060B0  C6C0      10875          mulu    D0,D3
000060B2  D483      10876          add.l   D3,D2
000060B4  4842      10877          swap    D2
000060B6  4242      10878          clr.w   D2
000060B8  D282      10879          add.l   D2,D1
000060BA  4CDF 000C 10880          movem.l (A7)+,D2/D3
000060BE  4E75      10881          rts
                    10882   _strlen:
000060C0  206F 0004 10883          move.l    (4,A7),A0
000060C4  2248      10884          move.l    A0,A1
                    10885   strlen_1:
000060C6  4A19      10886          tst.b     (A1)+
000060C8  66FC      10887          bne       strlen_1
000060CA  2009      10888          move.l    A1,D0
000060CC  9088      10889          sub.l     A0,D0
000060CE  5380      10890          subq.l    #1,D0
000060D0  4E75      10891          rts
                    10892          section   const
                    10893   
                    10894   @m68kde~1_1:
000060D2  0D0A 00   10895          dc.b      13,10,0
                    10896   @m68kde~1_2:
000060D6  0D53 7769 10897          dc.b      13,83,119,105,116,99,104,101,115,32,83,87,91
000060DA  7463 6865 
000060DE  7320 5357 
000060E2  5B        
000060E3  372D 305D 10898          dc.b      55,45,48,93,32,61,32,0
000060E7  203D 2000 
                    10899   @m68kde~1_3:
000060EC  3000      10900          dc.b      48,0
                    10901   @m68kde~1_4:
000060EE  3100      10902          dc.b      49,0
                    10903   @m68kde~1_5:
000060F0  0D0A 456E 10904          dc.b      13,10,69,110,116,101,114,32,83,116,97,114,116
000060F4  7465 7220 
000060F8  5374 6172 
000060FC  74        
000060FD  2041 6464 10905          dc.b      32,65,100,100,114,101,115,115,58,32,0
00006101  7265 7373 
00006105  3A20 00   
                    10906   @m68kde~1_6:
00006108  0D0A 3C45 10907          dc.b      13,10,60,69,83,67,62,32,61,32,65,98,111,114
0000610C  5343 3E20 
00006110  3D20 4162 
00006114  6F72      
00006116  742C 2053 10908          dc.b      116,44,32,83,80,65,67,69,32,116,111,32,67,111
0000611A  5041 4345 
0000611E  2074 6F20 
00006122  436F      
00006124  6E74 696E 10909          dc.b      110,116,105,110,117,101,0
00006128  7565 00   
                    10910   @m68kde~1_7:
0000612C  0D0A 2530 10911          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,32,32
00006130  3858 2020 
00006134  2530 3458 
00006138  2020 20   
0000613B  2020 2020 10912          dc.b      32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
0000613F  2020 2020 
00006143  2020 2020 
00006147  2020 20   
0000614A  2020 2020 10913          dc.b      32,32,32,32,32,32,37,115,0
0000614E  2020 2573 
00006152  00        
                    10914   @m68kde~1_8:
00006154  0D0A 2530 10915          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006158  3858 2020 
0000615C  2530 3458 
00006160  2025 30   
00006163  3458 2020 10916          dc.b      52,88,32,32,32,32,32,32,32,32,32,32,32,32,32
00006167  2020 2020 
0000616B  2020 2020 
0000616F  2020 20   
00006172  2020 2020 10917          dc.b      32,32,32,32,32,32,37,115,0
00006176  2020 2573 
0000617A  00        
                    10918   @m68kde~1_9:
0000617C  0D0A 2530 10919          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
00006180  3858 2020 
00006184  2530 3458 
00006188  2025 30   
0000618B  3458 2025 10920          dc.b      52,88,32,37,48,52,88,32,32,32,32,32,32,32,32
0000618F  3034 5820 
00006193  2020 2020 
00006197  2020 20   
0000619A  2020 2020 10921          dc.b      32,32,32,32,32,32,37,115,0
0000619E  2020 2573 
000061A2  00        
                    10922   @m68kde~1_10:
000061A4  0D0A 2530 10923          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000061A8  3858 2020 
000061AC  2530 3458 
000061B0  2025 30   
000061B3  3458 2025 10924          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,32,32
000061B7  3034 5820 
000061BB  2530 3458 
000061BF  2020 20   
000061C2  2020 2020 10925          dc.b      32,32,32,32,32,32,37,115,0
000061C6  2020 2573 
000061CA  00        
                    10926   @m68kde~1_11:
000061CC  0D0A 2530 10927          dc.b      13,10,37,48,56,88,32,32,37,48,52,88,32,37,48
000061D0  3858 2020 
000061D4  2530 3458 
000061D8  2025 30   
000061DB  3458 2025 10928          dc.b      52,88,32,37,48,52,88,32,37,48,52,88,32,37,48
000061DF  3034 5820 
000061E3  2530 3458 
000061E7  2025 30   
000061EA  3458 2020 10929          dc.b      52,88,32,32,32,32,37,115,0
000061EE  2020 2573 
000061F2  00        
                    10930   @m68kde~1_12:
000061F4  0D0A 4475 10931          dc.b      13,10,68,117,109,112,32,77,101,109,111,114,121
000061F8  6D70 204D 
000061FC  656D 6F72 
00006200  79        
00006201  2042 6C6F 10932          dc.b      32,66,108,111,99,107,58,32,60,69,83,67,62,32
00006205  636B 3A20 
00006209  3C45 5343 
0000620D  3E20      
0000620F  746F 2041 10933          dc.b      116,111,32,65,98,111,114,116,44,32,60,83,80
00006213  626F 7274 
00006217  2C20 3C53 
0000621B  50        
0000621C  4143 453E 10934          dc.b      65,67,69,62,32,116,111,32,67,111,110,116,105
00006220  2074 6F20 
00006224  436F 6E74 
00006228  69        
00006229  6E75 6500 10935          dc.b      110,117,101,0
                    10936   @m68kde~1_13:
0000622E  0D0A 2530 10937          dc.b      13,10,37,48,56,120,32,0
00006232  3878 2000 
                    10938   @m68kde~1_14:
00006236  2530 3258 10939          dc.b      37,48,50,88,0
0000623A  00        
                    10940   @m68kde~1_15:
0000623C  2020 00   10941          dc.b      32,32,0
                    10942   @m68kde~1_16:
00006240  0D0A 4669 10943          dc.b      13,10,70,105,108,108,32,77,101,109,111,114,121
00006244  6C6C 204D 
00006248  656D 6F72 
0000624C  79        
0000624D  2042 6C6F 10944          dc.b      32,66,108,111,99,107,0
00006251  636B 00   
                    10945   @m68kde~1_17:
00006254  0D0A 456E 10946          dc.b      13,10,69,110,116,101,114,32,69,110,100,32,65
00006258  7465 7220 
0000625C  456E 6420 
00006260  41        
00006261  6464 7265 10947          dc.b      100,100,114,101,115,115,58,32,0
00006265  7373 3A20 
00006269  00        
                    10948   @m68kde~1_18:
0000626A  0D0A 456E 10949          dc.b      13,10,69,110,116,101,114,32,70,105,108,108,32
0000626E  7465 7220 
00006272  4669 6C6C 
00006276  20        
00006277  4461 7461 10950          dc.b      68,97,116,97,58,32,0
0000627B  3A20 00   
                    10951   @m68kde~1_19:
0000627E  0D0A 4669 10952          dc.b      13,10,70,105,108,108,105,110,103,32,65,100,100
00006282  6C6C 696E 
00006286  6720 4164 
0000628A  64        
0000628B  7265 7373 10953          dc.b      114,101,115,115,101,115,32,91,36,37,48,56,88
0000628F  6573 205B 
00006293  2425 3038 
00006297  58        
00006298  202D 2024 10954          dc.b      32,45,32,36,37,48,56,88,93,32,119,105,116,104
0000629C  2530 3858 
000062A0  5D20 7769 
000062A4  7468      
000062A6  2024 2530 10955          dc.b      32,36,37,48,50,88,0
000062AA  3258 00   
                    10956   @m68kde~1_20:
000062AE  0D0A 5573 10957          dc.b      13,10,85,115,101,32,72,121,112,101,114,84,101
000062B2  6520 4879 
000062B6  7065 7254 
000062BA  65        
000062BB  726D 696E 10958          dc.b      114,109,105,110,97,108,32,116,111,32,83,101
000062BF  616C 2074 
000062C3  6F20 5365 
000062C7  6E64 2054 10959          dc.b      110,100,32,84,101,120,116,32,70,105,108,101
000062CB  6578 7420 
000062CF  4669 6C65 
000062D3  2028 2E68 10960          dc.b      32,40,46,104,101,120,41,13,10,0
000062D7  6578 290D 
000062DB  0A00      
                    10961   @m68kde~1_21:
000062DE  0D0A 4C6F 10962          dc.b      13,10,76,111,97,100,32,70,97,105,108,101,100
000062E2  6164 2046 
000062E6  6169 6C65 
000062EA  64        
000062EB  2061 7420 10963          dc.b      32,97,116,32,65,100,100,114,101,115,115,32,61
000062EF  4164 6472 
000062F3  6573 7320 
000062F7  3D        
000062F8  205B 2425 10964          dc.b      32,91,36,37,48,56,88,93,13,10,0
000062FC  3038 585D 
00006300  0D0A 00   
                    10965   @m68kde~1_22:
00006304  0D0A 5375 10966          dc.b      13,10,83,117,99,99,101,115,115,58,32,68,111
00006308  6363 6573 
0000630C  733A 2044 
00006310  6F        
00006311  776E 6C6F 10967          dc.b      119,110,108,111,97,100,101,100,32,37,100,32
00006315  6164 6564 
00006319  2025 6420 
0000631D  6279 7465 10968          dc.b      98,121,116,101,115,13,10,0
00006321  730D 0A00 
                    10969   @m68kde~1_23:
00006326  0D0A 4578 10970          dc.b      13,10,69,120,97,109,105,110,101,32,97,110,100
0000632A  616D 696E 
0000632E  6520 616E 
00006332  64        
00006333  2043 6861 10971          dc.b      32,67,104,97,110,103,101,32,77,101,109,111,114
00006337  6E67 6520 
0000633B  4D65 6D6F 
0000633F  72        
00006340  7900      10972          dc.b      121,0
                    10973   @m68kde~1_24:
00006342  0D0A 3C45 10974          dc.b      13,10,60,69,83,67,62,32,116,111,32,83,116,111
00006346  5343 3E20 
0000634A  746F 2053 
0000634E  746F      
00006350  702C 203C 10975          dc.b      112,44,32,60,83,80,65,67,69,62,32,116,111,32
00006354  5350 4143 
00006358  453E 2074 
0000635C  6F20      
0000635E  4164 7661 10976          dc.b      65,100,118,97,110,99,101,44,32,39,45,39,32,116
00006362  6E63 652C 
00006366  2027 2D27 
0000636A  2074      
0000636C  6F20 476F 10977          dc.b      111,32,71,111,32,66,97,99,107,44,32,60,68,65
00006370  2042 6163 
00006374  6B2C 203C 
00006378  4441      
0000637A  5441 3E20 10978          dc.b      84,65,62,32,116,111,32,99,104,97,110,103,101
0000637E  746F 2063 
00006382  6861 6E67 
00006386  65        
00006387  00        10979          dc.b      0
                    10980   @m68kde~1_25:
00006388  0D0A 456E 10981          dc.b      13,10,69,110,116,101,114,32,65,100,100,114,101
0000638C  7465 7220 
00006390  4164 6472 
00006394  65        
00006395  7373 3A20 10982          dc.b      115,115,58,32,0
00006399  00        
                    10983   @m68kde~1_26:
0000639A  0D0A 5B25 10984          dc.b      13,10,91,37,48,56,120,93,32,58,32,37,48,50,120
0000639E  3038 785D 
000063A2  203A 2025 
000063A6  3032 78   
000063A9  2020 00   10985          dc.b      32,32,0
                    10986   @m68kde~1_27:
000063AC  0D0A 5761 10987          dc.b      13,10,87,97,114,110,105,110,103,32,67,104,97
000063B0  726E 696E 
000063B4  6720 4368 
000063B8  61        
000063B9  6E67 6520 10988          dc.b      110,103,101,32,70,97,105,108,101,100,58,32,87
000063BD  4661 696C 
000063C1  6564 3A20 
000063C5  57        
000063C6  726F 7465 10989          dc.b      114,111,116,101,32,91,37,48,50,120,93,44,32
000063CA  205B 2530 
000063CE  3278 5D2C 
000063D2  20        
000063D3  5265 6164 10990          dc.b      82,101,97,100,32,91,37,48,50,120,93,0
000063D7  205B 2530 
000063DB  3278 5D00 
                    10991   @m68kde~1_28:
000063E0  0D0A 4C6F 10992          dc.b      13,10,76,111,97,100,105,110,103,32,80,114,111
000063E4  6164 696E 
000063E8  6720 5072 
000063EC  6F        
000063ED  6772 616D 10993          dc.b      103,114,97,109,32,70,114,111,109,32,83,80,73
000063F1  2046 726F 
000063F5  6D20 5350 
000063F9  49        
000063FA  2046 6C61 10994          dc.b      32,70,108,97,115,104,46,46,46,46,0
000063FE  7368 2E2E 
00006402  2E2E 00   
                    10995   @m68kde~1_29:
00006406  2425 3038 10996          dc.b      36,37,48,56,88,32,32,0
0000640A  5820 2000 
                    10997   @m68kde~1_30:
0000640E  2000      10998          dc.b      32,0
                    10999   @m68kde~1_31:
00006410  2E00      11000          dc.b      46,0
                    11001   @m68kde~1_32:
00006412  2563 00   11002          dc.b      37,99,0
                    11003   @m68kde~1_33:
00006416  00        11004          dc.b      0
                    11005   @m68kde~1_34:
00006418  0D0A 0D0A 11006          dc.b      13,10,13,10,32,68,48,32,61,32,36,37,48,56,88
0000641C  2044 3020 
00006420  3D20 2425 
00006424  3038 58   
00006427  2020 4130 11007          dc.b      32,32,65,48,32,61,32,36,37,48,56,88,0
0000642B  203D 2024 
0000642F  2530 3858 
00006433  00        
                    11008   @m68kde~1_35:
00006434  0D0A 2044 11009          dc.b      13,10,32,68,49,32,61,32,36,37,48,56,88,32,32
00006438  3120 3D20 
0000643C  2425 3038 
00006440  5820 20   
00006443  4131 203D 11010          dc.b      65,49,32,61,32,36,37,48,56,88,0
00006447  2024 2530 
0000644B  3858 00   
                    11011   @m68kde~1_36:
0000644E  0D0A 2044 11012          dc.b      13,10,32,68,50,32,61,32,36,37,48,56,88,32,32
00006452  3220 3D20 
00006456  2425 3038 
0000645A  5820 20   
0000645D  4132 203D 11013          dc.b      65,50,32,61,32,36,37,48,56,88,0
00006461  2024 2530 
00006465  3858 00   
                    11014   @m68kde~1_37:
00006468  0D0A 2044 11015          dc.b      13,10,32,68,51,32,61,32,36,37,48,56,88,32,32
0000646C  3320 3D20 
00006470  2425 3038 
00006474  5820 20   
00006477  4133 203D 11016          dc.b      65,51,32,61,32,36,37,48,56,88,0
0000647B  2024 2530 
0000647F  3858 00   
                    11017   @m68kde~1_38:
00006482  0D0A 2044 11018          dc.b      13,10,32,68,52,32,61,32,36,37,48,56,88,32,32
00006486  3420 3D20 
0000648A  2425 3038 
0000648E  5820 20   
00006491  4134 203D 11019          dc.b      65,52,32,61,32,36,37,48,56,88,0
00006495  2024 2530 
00006499  3858 00   
                    11020   @m68kde~1_39:
0000649C  0D0A 2044 11021          dc.b      13,10,32,68,53,32,61,32,36,37,48,56,88,32,32
000064A0  3520 3D20 
000064A4  2425 3038 
000064A8  5820 20   
000064AB  4135 203D 11022          dc.b      65,53,32,61,32,36,37,48,56,88,0
000064AF  2024 2530 
000064B3  3858 00   
                    11023   @m68kde~1_40:
000064B6  0D0A 2044 11024          dc.b      13,10,32,68,54,32,61,32,36,37,48,56,88,32,32
000064BA  3620 3D20 
000064BE  2425 3038 
000064C2  5820 20   
000064C5  4136 203D 11025          dc.b      65,54,32,61,32,36,37,48,56,88,0
000064C9  2024 2530 
000064CD  3858 00   
                    11026   @m68kde~1_41:
000064D0  0D0A 2044 11027          dc.b      13,10,32,68,55,32,61,32,36,37,48,56,88,32,32
000064D4  3720 3D20 
000064D8  2425 3038 
000064DC  5820 20   
000064DF  4137 203D 11028          dc.b      65,55,32,61,32,36,37,48,56,88,0
000064E3  2024 2530 
000064E7  3858 00   
                    11029   @m68kde~1_42:
000064EA  0D0A 0D0A 11030          dc.b      13,10,13,10,85,83,80,32,61,32,36,37,48,56,88
000064EE  5553 5020 
000064F2  3D20 2425 
000064F6  3038 58   
000064F9  2020 2841 11031          dc.b      32,32,40,65,55,41,32,85,115,101,114,32,83,80
000064FD  3729 2055 
00006501  7365 7220 
00006505  5350      
00006507  00        11032          dc.b      0
                    11033   @m68kde~1_43:
00006508  0D0A 5353 11034          dc.b      13,10,83,83,80,32,61,32,36,37,48,56,88,32,32
0000650C  5020 3D20 
00006510  2425 3038 
00006514  5820 20   
00006517  2841 3729 11035          dc.b      40,65,55,41,32,83,117,112,101,114,118,105,115
0000651B  2053 7570 
0000651F  6572 7669 
00006523  73        
00006524  6F72 2053 11036          dc.b      111,114,32,83,80,0
00006528  5000      
                    11037   @m68kde~1_44:
0000652A  0D0A 2053 11038          dc.b      13,10,32,83,82,32,61,32,36,37,48,52,88,32,32
0000652E  5220 3D20 
00006532  2425 3034 
00006536  5820 20   
00006539  2000      11039          dc.b      32,0
                    11040   @m68kde~1_45:
0000653C  2020 205B 11041          dc.b      32,32,32,91,0
00006540  00        
                    11042   @m68kde~1_46:
00006542  0D0A 2050 11043          dc.b      13,10,32,80,67,32,61,32,36,37,48,56,88,32,32
00006546  4320 3D20 
0000654A  2425 3038 
0000654E  5820 20   
00006551  00        11044          dc.b      0
                    11045   @m68kde~1_47:
00006552  2573 00   11046          dc.b      37,115,0
                    11047   @m68kde~1_48:
00006556  5B42 5245 11048          dc.b      91,66,82,69,65,75,80,79,73,78,84,93,0
0000655A  414B 504F 
0000655E  494E 545D 
00006562  00        
                    11049   @m68kde~1_49:
00006564  0D0A 5750 11050          dc.b      13,10,87,80,37,100,32,61,32,37,115,0
00006568  2564 203D 
0000656C  2025 7300 
                    11051   @m68kde~1_50:
00006570  0D0A 0D0A 11052          dc.b      13,10,13,10,13,10,13,10,13,10,13,10,83,105,110
00006574  0D0A 0D0A 
00006578  0D0A 0D0A 
0000657C  5369 6E   
0000657F  676C 6520 11053          dc.b      103,108,101,32,83,116,101,112,32,32,58,91,79
00006583  5374 6570 
00006587  2020 3A5B 
0000658B  4F        
0000658C  4E5D 00   11054          dc.b      78,93,0
                    11055   @m68kde~1_51:
00006590  0D0A 4272 11056          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006594  6561 6B20 
00006598  506F 696E 
0000659C  74        
0000659D  7320 3A5B 11057          dc.b      115,32,58,91,68,105,115,97,98,108,101,100,93
000065A1  4469 7361 
000065A5  626C 6564 
000065A9  5D        
000065AA  00        11058          dc.b      0
                    11059   @m68kde~1_52:
000065AC  0D0A 5072 11060          dc.b      13,10,80,114,101,115,115,32,60,83,80,65,67,69
000065B0  6573 7320 
000065B4  3C53 5041 
000065B8  4345      
000065BA  3E20 746F 11061          dc.b      62,32,116,111,32,69,120,101,99,117,116,101,32
000065BE  2045 7865 
000065C2  6375 7465 
000065C6  20        
000065C7  4E65 7874 11062          dc.b      78,101,120,116,32,73,110,115,116,114,117,99
000065CB  2049 6E73 
000065CF  7472 7563 
000065D3  7469 6F6E 11063          dc.b      116,105,111,110,0
000065D7  00        
                    11064   @m68kde~1_53:
000065D8  0D0A 5072 11065          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
000065DC  6573 7320 
000065E0  3C45 5343 
000065E4  3E20      
000065E6  746F 2052 11066          dc.b      116,111,32,82,101,115,117,109,101,32,80,114
000065EA  6573 756D 
000065EE  6520 5072 
000065F2  6F67 7261 11067          dc.b      111,103,114,97,109,0
000065F6  6D00      
                    11068   @m68kde~1_54:
000065F8  0D0A 496C 11069          dc.b      13,10,73,108,108,101,103,97,108,32,68,97,116
000065FC  6C65 6761 
00006600  6C20 4461 
00006604  74        
00006605  6120 5265 11070          dc.b      97,32,82,101,103,105,115,116,101,114,32,58,32
00006609  6769 7374 
0000660D  6572 203A 
00006611  20        
00006612  5573 6520 11071          dc.b      85,115,101,32,68,48,45,68,55,46,46,46,46,46
00006616  4430 2D44 
0000661A  372E 2E2E 
0000661E  2E2E      
00006620  0D0A 00   11072          dc.b      13,10,0
                    11073   @m68kde~1_55:
00006624  0D0A 4425 11074          dc.b      13,10,68,37,99,32,61,32,0
00006628  6320 3D20 
0000662C  00        
                    11075   @m68kde~1_56:
0000662E  0D0A 496C 11076          dc.b      13,10,73,108,108,101,103,97,108,32,65,100,100
00006632  6C65 6761 
00006636  6C20 4164 
0000663A  64        
0000663B  7265 7373 11077          dc.b      114,101,115,115,32,82,101,103,105,115,116,101
0000663F  2052 6567 
00006643  6973 7465 
00006647  7220 3A20 11078          dc.b      114,32,58,32,85,115,101,32,65,48,45,65,55,46
0000664B  5573 6520 
0000664F  4130 2D41 
00006653  372E      
00006655  2E2E 2E2E 11079          dc.b      46,46,46,46,13,10,0
00006659  0D0A 00   
                    11080   @m68kde~1_57:
0000665C  0D0A 4125 11081          dc.b      13,10,65,37,99,32,61,32,0
00006660  6320 3D20 
00006664  00        
                    11082   @m68kde~1_58:
00006666  0D0A 5573 11083          dc.b      13,10,85,115,101,114,32,83,80,32,61,32,0
0000666A  6572 2053 
0000666E  5020 3D20 
00006672  00        
                    11084   @m68kde~1_59:
00006674  0D0A 496C 11085          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
00006678  6C65 6761 
0000667C  6C20 5265 
00006680  67        
00006681  6973 7465 11086          dc.b      105,115,116,101,114,46,46,46,46,0
00006685  722E 2E2E 
00006689  2E00      
                    11087   @m68kde~1_60:
0000668C  0D0A 5379 11088          dc.b      13,10,83,121,115,116,101,109,32,83,80,32,61
00006690  7374 656D 
00006694  2053 5020 
00006698  3D        
00006699  2000      11089          dc.b      32,0
                    11090   @m68kde~1_61:
0000669C  0D0A 5043 11091          dc.b      13,10,80,67,32,61,32,0
000066A0  203D 2000 
                    11092   @m68kde~1_62:
000066A4  0D0A 5352 11093          dc.b      13,10,83,82,32,61,32,0
000066A8  203D 2000 
                    11094   @m68kde~1_63:
000066AC  0D0A 496C 11095          dc.b      13,10,73,108,108,101,103,97,108,32,82,101,103
000066B0  6C65 6761 
000066B4  6C20 5265 
000066B8  67        
000066B9  6973 7465 11096          dc.b      105,115,116,101,114,58,32,85,115,101,32,65,48
000066BD  723A 2055 
000066C1  7365 2041 
000066C5  30        
000066C6  2D41 372C 11097          dc.b      45,65,55,44,32,68,48,45,68,55,44,32,83,83,80
000066CA  2044 302D 
000066CE  4437 2C20 
000066D2  5353 50   
000066D5  2C20 5553 11098          dc.b      44,32,85,83,80,44,32,80,67,32,111,114,32,83
000066D9  502C 2050 
000066DD  4320 6F72 
000066E1  2053      
000066E3  520D 0A00 11099          dc.b      82,13,10,0
                    11100   @m68kde~1_64:
000066E8  0D0A 0D0A 11101          dc.b      13,10,13,10,78,117,109,32,32,32,32,32,65,100
000066EC  4E75 6D20 
000066F0  2020 2020 
000066F4  4164      
000066F6  6472 6573 11102          dc.b      100,114,101,115,115,32,32,32,32,32,32,73,110
000066FA  7320 2020 
000066FE  2020 2049 
00006702  6E        
00006703  7374 7275 11103          dc.b      115,116,114,117,99,116,105,111,110,0
00006707  6374 696F 
0000670B  6E00      
                    11104   @m68kde~1_65:
0000670E  0D0A 2D2D 11105          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006712  2D20 2020 
00006716  2020 2D2D 
0000671A  2D2D 2D   
0000671D  2D2D 2D2D 11106          dc.b      45,45,45,45,32,32,32,32,45,45,45,45,45,45,45
00006721  2020 2020 
00006725  2D2D 2D2D 
00006729  2D2D 2D   
0000672C  2D2D 2D2D 11107          dc.b      45,45,45,45,0
00006730  00        
                    11108   @m68kde~1_66:
00006732  0D0A 4E6F 11109          dc.b      13,10,78,111,32,66,114,101,97,107,80,111,105
00006736  2042 7265 
0000673A  616B 506F 
0000673E  69        
0000673F  6E74 7320 11110          dc.b      110,116,115,32,83,101,116,0
00006743  5365 7400 
                    11111   @m68kde~1_67:
00006748  0D0A 2533 11112          dc.b      13,10,37,51,100,32,32,32,32,32,36,37,48,56,120
0000674C  6420 2020 
00006750  2020 2425 
00006754  3038 78   
00006757  00        11113          dc.b      0
                    11114   @m68kde~1_68:
00006758  2020 2020 11115          dc.b      32,32,32,32,37,115,0
0000675C  2573 00   
                    11116   @m68kde~1_69:
00006760  0D0A 4E75 11117          dc.b      13,10,78,117,109,32,32,32,32,32,65,100,100,114
00006764  6D20 2020 
00006768  2020 4164 
0000676C  6472      
0000676E  6573 7300 11118          dc.b      101,115,115,0
                    11119   @m68kde~1_70:
00006772  0D0A 2D2D 11120          dc.b      13,10,45,45,45,32,32,32,32,32,45,45,45,45,45
00006776  2D20 2020 
0000677A  2020 2D2D 
0000677E  2D2D 2D   
00006781  2D2D 2D2D 11121          dc.b      45,45,45,45,0
00006785  00        
                    11122   @m68kde~1_71:
00006786  0D0A 4E6F 11123          dc.b      13,10,78,111,32,87,97,116,99,104,80,111,105
0000678A  2057 6174 
0000678E  6368 506F 
00006792  69        
00006793  6E74 7320 11124          dc.b      110,116,115,32,83,101,116,0
00006797  5365 7400 
                    11125   @m68kde~1_72:
0000679C  0D0A 456E 11126          dc.b      13,10,69,110,116,101,114,32,66,114,101,97,107
000067A0  7465 7220 
000067A4  4272 6561 
000067A8  6B        
000067A9  2050 6F69 11127          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
000067AD  6E74 204E 
000067B1  756D 6265 
000067B5  72        
000067B6  3A20 00   11128          dc.b      58,32,0
                    11129   @m68kde~1_73:
000067BA  0D0A 496C 11130          dc.b      13,10,73,108,108,101,103,97,108,32,82,97,110
000067BE  6C65 6761 
000067C2  6C20 5261 
000067C6  6E        
000067C7  6765 203A 11131          dc.b      103,101,32,58,32,85,115,101,32,48,32,45,32,55
000067CB  2055 7365 
000067CF  2030 202D 
000067D3  2037      
000067D5  00        11132          dc.b      0
                    11133   @m68kde~1_74:
000067D6  0D0A 4272 11134          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067DA  6561 6B20 
000067DE  506F 696E 
000067E2  74        
000067E3  2043 6C65 11135          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
000067E7  6172 6564 
000067EB  2E2E 2E2E 
000067EF  2E        
000067F0  0D0A 00   11136          dc.b      13,10,0
                    11137   @m68kde~1_75:
000067F4  0D0A 4272 11138          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
000067F8  6561 6B20 
000067FC  506F 696E 
00006800  74        
00006801  2077 6173 11139          dc.b      32,119,97,115,110,39,116,32,83,101,116,46,46
00006805  6E27 7420 
00006809  5365 742E 
0000680D  2E        
0000680E  2E2E 2E00 11140          dc.b      46,46,46,0
                    11141   @m68kde~1_76:
00006812  0D0A 456E 11142          dc.b      13,10,69,110,116,101,114,32,87,97,116,99,104
00006816  7465 7220 
0000681A  5761 7463 
0000681E  68        
0000681F  2050 6F69 11143          dc.b      32,80,111,105,110,116,32,78,117,109,98,101,114
00006823  6E74 204E 
00006827  756D 6265 
0000682B  72        
0000682C  3A20 00   11144          dc.b      58,32,0
                    11145   @m68kde~1_77:
00006830  0D0A 5761 11146          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006834  7463 6820 
00006838  506F 696E 
0000683C  74        
0000683D  2043 6C65 11147          dc.b      32,67,108,101,97,114,101,100,46,46,46,46,46
00006841  6172 6564 
00006845  2E2E 2E2E 
00006849  2E        
0000684A  0D0A 00   11148          dc.b      13,10,0
                    11149   @m68kde~1_78:
0000684E  0D0A 5761 11150          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
00006852  7463 6820 
00006856  506F 696E 
0000685A  74        
0000685B  2057 6173 11151          dc.b      32,87,97,115,32,110,111,116,32,83,101,116,46
0000685F  206E 6F74 
00006863  2053 6574 
00006867  2E        
00006868  2E2E 2E2E 11152          dc.b      46,46,46,46,0
0000686C  00        
                    11153   @m68kde~1_79:
0000686E  0D0A 4E6F 11154          dc.b      13,10,78,111,32,70,82,69,69,32,66,114,101,97
00006872  2046 5245 
00006876  4520 4272 
0000687A  6561      
0000687C  6B20 506F 11155          dc.b      107,32,80,111,105,110,116,115,46,46,46,46,46
00006880  696E 7473 
00006884  2E2E 2E2E 
00006888  2E        
00006889  00        11156          dc.b      0
                    11157   @m68kde~1_80:
0000688A  0D0A 4272 11158          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000688E  6561 6B20 
00006892  506F 696E 
00006896  74        
00006897  2041 6464 11159          dc.b      32,65,100,100,114,101,115,115,58,32,0
0000689B  7265 7373 
0000689F  3A20 00   
                    11160   @m68kde~1_81:
000068A2  0D0A 4572 11161          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000068A6  726F 7220 
000068AA  3A20 4272 
000068AE  65        
000068AF  616B 2050 11162          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000068B3  6F69 6E74 
000068B7  7320 4341 
000068BB  4E        
000068BC  4E4F 5420 11163          dc.b      78,79,84,32,98,101,32,115,101,116,32,97,116
000068C0  6265 2073 
000068C4  6574 2061 
000068C8  74        
000068C9  204F 4444 11164          dc.b      32,79,68,68,32,97,100,100,114,101,115,115,101
000068CD  2061 6464 
000068D1  7265 7373 
000068D5  65        
000068D6  7300      11165          dc.b      115,0
                    11166   @m68kde~1_82:
000068D8  0D0A 4572 11167          dc.b      13,10,69,114,114,111,114,32,58,32,66,114,101
000068DC  726F 7220 
000068E0  3A20 4272 
000068E4  65        
000068E5  616B 2050 11168          dc.b      97,107,32,80,111,105,110,116,115,32,67,65,78
000068E9  6F69 6E74 
000068ED  7320 4341 
000068F1  4E        
000068F2  4E4F 5420 11169          dc.b      78,79,84,32,98,101,32,115,101,116,32,102,111
000068F6  6265 2073 
000068FA  6574 2066 
000068FE  6F        
000068FF  7220 524F 11170          dc.b      114,32,82,79,77,32,105,110,32,82,97,110,103
00006903  4D20 696E 
00006907  2052 616E 
0000690B  67        
0000690C  6520 3A20 11171          dc.b      101,32,58,32,91,36,48,45,36,48,48,48,48,55,70
00006910  5B24 302D 
00006914  2430 3030 
00006918  3037 46   
0000691B  4646 5D00 11172          dc.b      70,70,93,0
                    11173   @m68kde~1_83:
00006920  0D0A 4572 11174          dc.b      13,10,69,114,114,111,114,58,32,66,114,101,97
00006924  726F 723A 
00006928  2042 7265 
0000692C  61        
0000692D  6B20 506F 11175          dc.b      107,32,80,111,105,110,116,32,65,108,114,101
00006931  696E 7420 
00006935  416C 7265 
00006939  6164 7920 11176          dc.b      97,100,121,32,69,120,105,115,116,115,32,97,116
0000693D  4578 6973 
00006941  7473 2061 
00006945  74        
00006946  2041 6464 11177          dc.b      32,65,100,100,114,101,115,115,32,58,32,37,48
0000694A  7265 7373 
0000694E  203A 2025 
00006952  30        
00006953  3878 0D0A 11178          dc.b      56,120,13,10,0
00006957  00        
                    11179   @m68kde~1_84:
00006958  0D0A 4272 11180          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
0000695C  6561 6B20 
00006960  506F 696E 
00006964  74        
00006965  2053 6574 11181          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006969  2061 7420 
0000696D  4164 6472 
00006971  65        
00006972  7373 3A20 11182          dc.b      115,115,58,32,91,36,37,48,56,120,93,44,32,73
00006976  5B24 2530 
0000697A  3878 5D2C 
0000697E  2049      
00006980  6E73 7472 11183          dc.b      110,115,116,114,117,99,116,105,111,110,32,61
00006984  7563 7469 
00006988  6F6E 203D 
0000698C  2025 7300 11184          dc.b      32,37,115,0
                    11185   @m68kde~1_85:
00006990  0D0A 4E6F 11186          dc.b      13,10,78,111,32,70,82,69,69,32,87,97,116,99
00006994  2046 5245 
00006998  4520 5761 
0000699C  7463      
0000699E  6820 506F 11187          dc.b      104,32,80,111,105,110,116,115,46,46,46,46,46
000069A2  696E 7473 
000069A6  2E2E 2E2E 
000069AA  2E        
000069AB  00        11188          dc.b      0
                    11189   @m68kde~1_86:
000069AC  0D0A 5761 11190          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000069B0  7463 6820 
000069B4  506F 696E 
000069B8  74        
000069B9  2041 6464 11191          dc.b      32,65,100,100,114,101,115,115,58,32,0
000069BD  7265 7373 
000069C1  3A20 00   
                    11192   @m68kde~1_87:
000069C4  0D0A 4572 11193          dc.b      13,10,69,114,114,111,114,58,32,87,97,116,99
000069C8  726F 723A 
000069CC  2057 6174 
000069D0  63        
000069D1  6820 506F 11194          dc.b      104,32,80,111,105,110,116,32,65,108,114,101
000069D5  696E 7420 
000069D9  416C 7265 
000069DD  6164 7920 11195          dc.b      97,100,121,32,83,101,116,32,97,116,32,65,100
000069E1  5365 7420 
000069E5  6174 2041 
000069E9  64        
000069EA  6472 6573 11196          dc.b      100,114,101,115,115,32,58,32,37,48,56,120,13
000069EE  7320 3A20 
000069F2  2530 3878 
000069F6  0D        
000069F7  0A00      11197          dc.b      10,0
                    11198   @m68kde~1_88:
000069FA  0D0A 5761 11199          dc.b      13,10,87,97,116,99,104,32,80,111,105,110,116
000069FE  7463 6820 
00006A02  506F 696E 
00006A06  74        
00006A07  2053 6574 11200          dc.b      32,83,101,116,32,97,116,32,65,100,100,114,101
00006A0B  2061 7420 
00006A0F  4164 6472 
00006A13  65        
00006A14  7373 3A20 11201          dc.b      115,115,58,32,91,36,37,48,56,120,93,0
00006A18  5B24 2530 
00006A1C  3878 5D00 
                    11202   @m68kde~1_89:
00006A20  0D0A 0D0A 11203          dc.b      13,10,13,10,13,10,13,10,64,66,82,69,65,75,80
00006A24  0D0A 0D0A 
00006A28  4042 5245 
00006A2C  414B 50   
00006A2F  4F49 4E54 11204          dc.b      79,73,78,84,0
00006A33  00        
                    11205   @m68kde~1_90:
00006A34  0D0A 5369 11206          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006A38  6E67 6C65 
00006A3C  2053 7465 
00006A40  70        
00006A41  203A 205B 11207          dc.b      32,58,32,91,79,78,93,0
00006A45  4F4E 5D00 
                    11208   @m68kde~1_91:
00006A4A  0D0A 4272 11209          dc.b      13,10,66,114,101,97,107,80,111,105,110,116,115
00006A4E  6561 6B50 
00006A52  6F69 6E74 
00006A56  73        
00006A57  203A 205B 11210          dc.b      32,58,32,91,69,110,97,98,108,101,100,93,0
00006A5B  456E 6162 
00006A5F  6C65 645D 
00006A63  00        
                    11211   @m68kde~1_92:
00006A64  0D0A 5072 11212          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006A68  6573 7320 
00006A6C  3C45 5343 
00006A70  3E20      
00006A72  746F 2052 11213          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006A76  6573 756D 
00006A7A  6520 5573 
00006A7E  6572 2050 11214          dc.b      101,114,32,80,114,111,103,114,97,109,13,10,0
00006A82  726F 6772 
00006A86  616D 0D0A 
00006A8A  00        
                    11215   @m68kde~1_93:
00006A8C  0D0A 556E 11216          dc.b      13,10,85,110,107,110,111,119,110,32,67,111,109
00006A90  6B6E 6F77 
00006A94  6E20 436F 
00006A98  6D        
00006A99  6D61 6E64 11217          dc.b      109,97,110,100,46,46,46,46,46,13,10,0
00006A9D  2E2E 2E2E 
00006AA1  2E0D 0A00 
                    11218   @m68kde~1_94:
00006AA6  0D0A 5072 11219          dc.b      13,10,80,114,111,103,114,97,109,32,69,110,100
00006AAA  6F67 7261 
00006AAE  6D20 456E 
00006AB2  64        
00006AB3  6564 2028 11220          dc.b      101,100,32,40,84,82,65,80,32,35,49,53,41,46
00006AB7  5452 4150 
00006ABB  2023 3135 
00006ABF  292E      
00006AC1  2E2E 2E00 11221          dc.b      46,46,46,0
                    11222   @m68kde~1_95:
00006AC6  0D0A 4B69 11223          dc.b      13,10,75,105,108,108,32,65,108,108,32,66,114
00006ACA  6C6C 2041 
00006ACE  6C6C 2042 
00006AD2  72        
00006AD3  6561 6B20 11224          dc.b      101,97,107,32,80,111,105,110,116,115,46,46,46
00006AD7  506F 696E 
00006ADB  7473 2E2E 
00006ADF  2E        
00006AE0  2879 2F6E 11225          dc.b      40,121,47,110,41,63,0
00006AE4  293F 00   
                    11226   @m68kde~1_96:
00006AE8  0D0A 4B69 11227          dc.b      13,10,75,105,108,108,32,65,108,108,32,87,97
00006AEC  6C6C 2041 
00006AF0  6C6C 2057 
00006AF4  61        
00006AF5  7463 6820 11228          dc.b      116,99,104,32,80,111,105,110,116,115,46,46,46
00006AF9  506F 696E 
00006AFD  7473 2E2E 
00006B01  2E        
00006B02  2879 2F6E 11229          dc.b      40,121,47,110,41,63,0
00006B06  293F 00   
                    11230   @m68kde~1_97:
00006B0A  0D0A 2D2D 11231          dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B0E  2D2D 2D2D 
00006B12  2D2D 2D2D 
00006B16  2D2D 2D   
00006B19  2D2D 2D2D 11232          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B1D  2D2D 2D2D 
00006B21  2D2D 2D2D 
00006B25  2D2D 2D   
00006B28  2D2D 2D2D 11233          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B2C  2D2D 2D2D 
00006B30  2D2D 2D2D 
00006B34  2D2D 2D   
00006B37  2D2D 2D2D 11234          dc.b      45,45,45,45,45,45,45,45,45,45,45,45,45,45,45
00006B3B  2D2D 2D2D 
00006B3F  2D2D 2D2D 
00006B43  2D2D 2D   
00006B46  2D2D 2D2D 11235          dc.b      45,45,45,45,45,45,0
00006B4A  2D2D 00   
                    11236   @m68kde~1_98:
00006B4E  0D0A 2020 11237          dc.b      13,10,32,32,68,101,98,117,103,103,101,114,32
00006B52  4465 6275 
00006B56  6767 6572 
00006B5A  20        
00006B5B  436F 6D6D 11238          dc.b      67,111,109,109,97,110,100,32,83,117,109,109
00006B5F  616E 6420 
00006B63  5375 6D6D 
00006B67  6172 7900 11239          dc.b      97,114,121,0
                    11240   @m68kde~1_99:
00006B6C  0D0A 2020 11241          dc.b      13,10,32,32,46,40,114,101,103,41,32,32,32,32
00006B70  2E28 7265 
00006B74  6729 2020 
00006B78  2020      
00006B7A  2020 202D 11242          dc.b      32,32,32,45,32,67,104,97,110,103,101,32,82,101
00006B7E  2043 6861 
00006B82  6E67 6520 
00006B86  5265      
00006B88  6769 7374 11243          dc.b      103,105,115,116,101,114,115,58,32,101,46,103
00006B8C  6572 733A 
00006B90  2065 2E67 
00006B94  2041 302D 11244          dc.b      32,65,48,45,65,55,44,68,48,45,68,55,44,80,67
00006B98  4137 2C44 
00006B9C  302D 4437 
00006BA0  2C50 43   
00006BA3  2C53 5350 11245          dc.b      44,83,83,80,44,85,83,80,44,83,82,0
00006BA7  2C55 5350 
00006BAB  2C53 5200 
                    11246   @m68kde~1_100:
00006BB0  0D0A 2020 11247          dc.b      13,10,32,32,66,68,47,66,83,47,66,67,47,66,75
00006BB4  4244 2F42 
00006BB8  532F 4243 
00006BBC  2F42 4B   
00006BBF  2020 2D20 11248          dc.b      32,32,45,32,66,114,101,97,107,32,80,111,105
00006BC3  4272 6561 
00006BC7  6B20 506F 
00006BCB  69        
00006BCC  6E74 3A20 11249          dc.b      110,116,58,32,68,105,115,112,108,97,121,47,83
00006BD0  4469 7370 
00006BD4  6C61 792F 
00006BD8  53        
00006BD9  6574 2F43 11250          dc.b      101,116,47,67,108,101,97,114,47,75,105,108,108
00006BDD  6C65 6172 
00006BE1  2F4B 696C 
00006BE5  6C        
00006BE6  00        11251          dc.b      0
                    11252   @m68kde~1_101:
00006BE8  0D0A 2020 11253          dc.b      13,10,32,32,67,32,32,32,32,32,32,32,32,32,32
00006BEC  4320 2020 
00006BF0  2020 2020 
00006BF4  2020 20   
00006BF7  2020 2D20 11254          dc.b      32,32,45,32,67,111,112,121,32,80,114,111,103
00006BFB  436F 7079 
00006BFF  2050 726F 
00006C03  67        
00006C04  7261 6D20 11255          dc.b      114,97,109,32,102,114,111,109,32,70,108,97,115
00006C08  6672 6F6D 
00006C0C  2046 6C61 
00006C10  73        
00006C11  6820 746F 11256          dc.b      104,32,116,111,32,77,97,105,110,32,77,101,109
00006C15  204D 6169 
00006C19  6E20 4D65 
00006C1D  6D        
00006C1E  6F72 7900 11257          dc.b      111,114,121,0
                    11258   @m68kde~1_102:
00006C22  0D0A 2020 11259          dc.b      13,10,32,32,68,73,32,32,32,32,32,32,32,32,32
00006C26  4449 2020 
00006C2A  2020 2020 
00006C2E  2020 20   
00006C31  2020 2D20 11260          dc.b      32,32,45,32,68,105,115,97,115,115,101,109,98
00006C35  4469 7361 
00006C39  7373 656D 
00006C3D  62        
00006C3E  6C65 2050 11261          dc.b      108,101,32,80,114,111,103,114,97,109,0
00006C42  726F 6772 
00006C46  616D 00   
                    11262   @m68kde~1_103:
00006C4A  0D0A 2020 11263          dc.b      13,10,32,32,68,85,32,32,32,32,32,32,32,32,32
00006C4E  4455 2020 
00006C52  2020 2020 
00006C56  2020 20   
00006C59  2020 2D20 11264          dc.b      32,32,45,32,68,117,109,112,32,77,101,109,111
00006C5D  4475 6D70 
00006C61  204D 656D 
00006C65  6F        
00006C66  7279 2043 11265          dc.b      114,121,32,67,111,110,116,101,110,116,115,32
00006C6A  6F6E 7465 
00006C6E  6E74 7320 
00006C72  746F 2053 11266          dc.b      116,111,32,83,99,114,101,101,110,0
00006C76  6372 6565 
00006C7A  6E00      
                    11267   @m68kde~1_104:
00006C7C  0D0A 2020 11268          dc.b      13,10,32,32,69,32,32,32,32,32,32,32,32,32,32
00006C80  4520 2020 
00006C84  2020 2020 
00006C88  2020 20   
00006C8B  2020 2D20 11269          dc.b      32,32,45,32,69,110,116,101,114,32,83,116,114
00006C8F  456E 7465 
00006C93  7220 5374 
00006C97  72        
00006C98  696E 6720 11270          dc.b      105,110,103,32,105,110,116,111,32,77,101,109
00006C9C  696E 746F 
00006CA0  204D 656D 
00006CA4  6F72 7900 11271          dc.b      111,114,121,0
                    11272   @m68kde~1_105:
00006CA8  0D0A 2020 11273          dc.b      13,10,32,32,70,32,32,32,32,32,32,32,32,32,32
00006CAC  4620 2020 
00006CB0  2020 2020 
00006CB4  2020 20   
00006CB7  2020 2D20 11274          dc.b      32,32,45,32,70,105,108,108,32,77,101,109,111
00006CBB  4669 6C6C 
00006CBF  204D 656D 
00006CC3  6F        
00006CC4  7279 2077 11275          dc.b      114,121,32,119,105,116,104,32,68,97,116,97,0
00006CC8  6974 6820 
00006CCC  4461 7461 
00006CD0  00        
                    11276   @m68kde~1_106:
00006CD2  0D0A 2020 11277          dc.b      13,10,32,32,71,32,32,32,32,32,32,32,32,32,32
00006CD6  4720 2020 
00006CDA  2020 2020 
00006CDE  2020 20   
00006CE1  2020 2D20 11278          dc.b      32,32,45,32,71,111,32,80,114,111,103,114,97
00006CE5  476F 2050 
00006CE9  726F 6772 
00006CED  61        
00006CEE  6D20 5374 11279          dc.b      109,32,83,116,97,114,116,105,110,103,32,97,116
00006CF2  6172 7469 
00006CF6  6E67 2061 
00006CFA  74        
00006CFB  2041 6464 11280          dc.b      32,65,100,100,114,101,115,115,58,32,36,37,48
00006CFF  7265 7373 
00006D03  3A20 2425 
00006D07  30        
00006D08  3858 00   11281          dc.b      56,88,0
                    11282   @m68kde~1_107:
00006D0C  0D0A 2020 11283          dc.b      13,10,32,32,76,32,32,32,32,32,32,32,32,32,32
00006D10  4C20 2020 
00006D14  2020 2020 
00006D18  2020 20   
00006D1B  2020 2D20 11284          dc.b      32,32,45,32,76,111,97,100,32,80,114,111,103
00006D1F  4C6F 6164 
00006D23  2050 726F 
00006D27  67        
00006D28  7261 6D20 11285          dc.b      114,97,109,32,40,46,72,69,88,32,102,105,108
00006D2C  282E 4845 
00006D30  5820 6669 
00006D34  6C        
00006D35  6529 2066 11286          dc.b      101,41,32,102,114,111,109,32,76,97,112,116,111
00006D39  726F 6D20 
00006D3D  4C61 7074 
00006D41  6F        
00006D42  7000      11287          dc.b      112,0
                    11288   @m68kde~1_108:
00006D44  0D0A 2020 11289          dc.b      13,10,32,32,77,32,32,32,32,32,32,32,32,32,32
00006D48  4D20 2020 
00006D4C  2020 2020 
00006D50  2020 20   
00006D53  2020 2D20 11290          dc.b      32,32,45,32,77,101,109,111,114,121,32,69,120
00006D57  4D65 6D6F 
00006D5B  7279 2045 
00006D5F  78        
00006D60  616D 696E 11291          dc.b      97,109,105,110,101,32,97,110,100,32,67,104,97
00006D64  6520 616E 
00006D68  6420 4368 
00006D6C  61        
00006D6D  6E67 6500 11292          dc.b      110,103,101,0
                    11293   @m68kde~1_109:
00006D72  0D0A 2020 11294          dc.b      13,10,32,32,80,32,32,32,32,32,32,32,32,32,32
00006D76  5020 2020 
00006D7A  2020 2020 
00006D7E  2020 20   
00006D81  2020 2D20 11295          dc.b      32,32,45,32,80,114,111,103,114,97,109,32,70
00006D85  5072 6F67 
00006D89  7261 6D20 
00006D8D  46        
00006D8E  6C61 7368 11296          dc.b      108,97,115,104,32,77,101,109,111,114,121,32
00006D92  204D 656D 
00006D96  6F72 7920 
00006D9A  7769 7468 11297          dc.b      119,105,116,104,32,85,115,101,114,32,80,114
00006D9E  2055 7365 
00006DA2  7220 5072 
00006DA6  6F67 7261 11298          dc.b      111,103,114,97,109,0
00006DAA  6D00      
                    11299   @m68kde~1_110:
00006DAC  0D0A 2020 11300          dc.b      13,10,32,32,82,32,32,32,32,32,32,32,32,32,32
00006DB0  5220 2020 
00006DB4  2020 2020 
00006DB8  2020 20   
00006DBB  2020 2D20 11301          dc.b      32,32,45,32,68,105,115,112,108,97,121,32,54
00006DBF  4469 7370 
00006DC3  6C61 7920 
00006DC7  36        
00006DC8  3830 3030 11302          dc.b      56,48,48,48,32,82,101,103,105,115,116,101,114
00006DCC  2052 6567 
00006DD0  6973 7465 
00006DD4  72        
00006DD5  7300      11303          dc.b      115,0
                    11304   @m68kde~1_111:
00006DD8  0D0A 2020 11305          dc.b      13,10,32,32,83,32,32,32,32,32,32,32,32,32,32
00006DDC  5320 2020 
00006DE0  2020 2020 
00006DE4  2020 20   
00006DE7  2020 2D20 11306          dc.b      32,32,45,32,84,111,103,103,108,101,32,79,78
00006DEB  546F 6767 
00006DEF  6C65 204F 
00006DF3  4E        
00006DF4  2F4F 4646 11307          dc.b      47,79,70,70,32,83,105,110,103,108,101,32,83
00006DF8  2053 696E 
00006DFC  676C 6520 
00006E00  53        
00006E01  7465 7020 11308          dc.b      116,101,112,32,77,111,100,101,0
00006E05  4D6F 6465 
00006E09  00        
                    11309   @m68kde~1_112:
00006E0A  0D0A 2020 11310          dc.b      13,10,32,32,84,77,32,32,32,32,32,32,32,32,32
00006E0E  544D 2020 
00006E12  2020 2020 
00006E16  2020 20   
00006E19  2020 2D20 11311          dc.b      32,32,45,32,84,101,115,116,32,77,101,109,111
00006E1D  5465 7374 
00006E21  204D 656D 
00006E25  6F        
00006E26  7279 00   11312          dc.b      114,121,0
                    11313   @m68kde~1_113:
00006E2A  0D0A 2020 11314          dc.b      13,10,32,32,84,83,32,32,32,32,32,32,32,32,32
00006E2E  5453 2020 
00006E32  2020 2020 
00006E36  2020 20   
00006E39  2020 2D20 11315          dc.b      32,32,45,32,84,101,115,116,32,83,119,105,116
00006E3D  5465 7374 
00006E41  2053 7769 
00006E45  74        
00006E46  6368 6573 11316          dc.b      99,104,101,115,58,32,83,87,55,45,48,0
00006E4A  3A20 5357 
00006E4E  372D 3000 
                    11317   @m68kde~1_114:
00006E52  0D0A 2020 11318          dc.b      13,10,32,32,84,68,32,32,32,32,32,32,32,32,32
00006E56  5444 2020 
00006E5A  2020 2020 
00006E5E  2020 20   
00006E61  2020 2D20 11319          dc.b      32,32,45,32,84,101,115,116,32,68,105,115,112
00006E65  5465 7374 
00006E69  2044 6973 
00006E6D  70        
00006E6E  6C61 7973 11320          dc.b      108,97,121,115,58,32,76,69,68,115,32,97,110
00006E72  3A20 4C45 
00006E76  4473 2061 
00006E7A  6E        
00006E7B  6420 372D 11321          dc.b      100,32,55,45,83,101,103,109,101,110,116,0
00006E7F  5365 676D 
00006E83  656E 7400 
                    11322   @m68kde~1_115:
00006E88  0D0A 2020 11323          dc.b      13,10,32,32,87,68,47,87,83,47,87,67,47,87,75
00006E8C  5744 2F57 
00006E90  532F 5743 
00006E94  2F57 4B   
00006E97  2020 2D20 11324          dc.b      32,32,45,32,87,97,116,99,104,32,80,111,105,110
00006E9B  5761 7463 
00006E9F  6820 506F 
00006EA3  696E      
00006EA5  743A 2044 11325          dc.b      116,58,32,68,105,115,112,108,97,121,47,83,101
00006EA9  6973 706C 
00006EAD  6179 2F53 
00006EB1  65        
00006EB2  742F 436C 11326          dc.b      116,47,67,108,101,97,114,47,75,105,108,108,0
00006EB6  6561 722F 
00006EBA  4B69 6C6C 
00006EBE  00        
                    11327   @m68kde~1_116:
00006EC0  0D0A 2300 11328          dc.b      13,10,35,0
                    11329   @m68kde~1_117:
00006EC4  0D0A 5072 11330          dc.b      13,10,80,114,111,103,114,97,109,32,82,117,110
00006EC8  6F67 7261 
00006ECC  6D20 5275 
00006ED0  6E        
00006ED1  6E69 6E67 11331          dc.b      110,105,110,103,46,46,46,46,46,0
00006ED5  2E2E 2E2E 
00006ED9  2E00      
                    11332   @m68kde~1_118:
00006EDC  0D0A 5072 11333          dc.b      13,10,80,114,101,115,115,32,60,82,69,83,69,84
00006EE0  6573 7320 
00006EE4  3C52 4553 
00006EE8  4554      
00006EEA  3E20 6275 11334          dc.b      62,32,98,117,116,116,111,110,32,60,75,101,121
00006EEE  7474 6F6E 
00006EF2  203C 4B65 
00006EF6  79        
00006EF7  303E 206F 11335          dc.b      48,62,32,111,110,32,68,69,49,32,116,111,32,115
00006EFB  6E20 4445 
00006EFF  3120 746F 
00006F03  2073      
00006F05  746F 7000 11336          dc.b      116,111,112,0
                    11337   @m68kde~1_119:
00006F0A  0D0A 4572 11338          dc.b      13,10,69,114,114,111,114,58,32,80,114,101,115
00006F0E  726F 723A 
00006F12  2050 7265 
00006F16  73        
00006F17  7320 2747 11339          dc.b      115,32,39,71,39,32,102,105,114,115,116,32,116
00006F1B  2720 6669 
00006F1F  7273 7420 
00006F23  74        
00006F24  6F20 7374 11340          dc.b      111,32,115,116,97,114,116,32,112,114,111,103
00006F28  6172 7420 
00006F2C  7072 6F67 
00006F30  7261 6D00 11341          dc.b      114,97,109,0
                    11342   @m68kde~1_120:
00006F34  0D0A 5369 11343          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006F38  6E67 6C65 
00006F3C  2053 7465 
00006F40  70        
00006F41  2020 3A5B 11344          dc.b      32,32,58,91,79,78,93,0
00006F45  4F4E 5D00 
                    11345   @m68kde~1_121:
00006F4A  0D0A 5072 11346          dc.b      13,10,80,114,101,115,115,32,39,71,39,32,116
00006F4E  6573 7320 
00006F52  2747 2720 
00006F56  74        
00006F57  6F20 5472 11347          dc.b      111,32,84,114,97,99,101,32,80,114,111,103,114
00006F5B  6163 6520 
00006F5F  5072 6F67 
00006F63  72        
00006F64  616D 2066 11348          dc.b      97,109,32,102,114,111,109,32,97,100,100,114
00006F68  726F 6D20 
00006F6C  6164 6472 
00006F70  6573 7320 11349          dc.b      101,115,115,32,36,37,88,46,46,46,46,46,0
00006F74  2425 582E 
00006F78  2E2E 2E2E 
00006F7C  00        
                    11350   @m68kde~1_122:
00006F7E  0D0A 5075 11351          dc.b      13,10,80,117,115,104,32,60,82,69,83,69,84,32
00006F82  7368 203C 
00006F86  5245 5345 
00006F8A  5420      
00006F8C  4275 7474 11352          dc.b      66,117,116,116,111,110,62,32,116,111,32,83,116
00006F90  6F6E 3E20 
00006F94  746F 2053 
00006F98  74        
00006F99  6F70 2E2E 11353          dc.b      111,112,46,46,46,46,46,0
00006F9D  2E2E 2E00 
                    11354   @m68kde~1_123:
00006FA2  0D0A 5369 11355          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00006FA6  6E67 6C65 
00006FAA  2053 7465 
00006FAE  70        
00006FAF  203A 205B 11356          dc.b      32,58,32,91,79,70,70,93,0
00006FB3  4F46 465D 
00006FB7  00        
                    11357   @m68kde~1_124:
00006FB8  0D0A 4272 11358          dc.b      13,10,66,114,101,97,107,32,80,111,105,110,116
00006FBC  6561 6B20 
00006FC0  506F 696E 
00006FC4  74        
00006FC5  7320 3A5B 11359          dc.b      115,32,58,91,69,110,97,98,108,101,100,93,0
00006FC9  456E 6162 
00006FCD  6C65 645D 
00006FD1  00        
                    11360   @m68kde~1_125:
00006FD2  0D0A 5072 11361          dc.b      13,10,80,114,101,115,115,32,60,69,83,67,62,32
00006FD6  6573 7320 
00006FDA  3C45 5343 
00006FDE  3E20      
00006FE0  746F 2052 11362          dc.b      116,111,32,82,101,115,117,109,101,32,85,115
00006FE4  6573 756D 
00006FE8  6520 5573 
00006FEC  6572 2050 11363          dc.b      101,114,32,80,114,111,103,114,97,109,46,46,46
00006FF0  726F 6772 
00006FF4  616D 2E2E 
00006FF8  2E        
00006FF9  2E2E 00   11364          dc.b      46,46,0
                    11365   @m68kde~1_126:
00006FFC  0D0A 5369 11366          dc.b      13,10,83,105,110,103,108,101,32,83,116,101,112
00007000  6E67 6C65 
00007004  2053 7465 
00007008  70        
00007009  2020 3A5B 11367          dc.b      32,32,58,91,79,70,70,93,0
0000700D  4F46 465D 
00007011  00        
                    11368   @m68kde~1_127:
00007012  0D0A 0D0A 11369          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007016  5072 6F67 
0000701A  7261 6D20 
0000701E  41        
0000701F  424F 5254 11370          dc.b      66,79,82,84,32,33,33,33,33,33,33,13,10,0
00007023  2021 2121 
00007027  2121 210D 
0000702B  0A00      
                    11371   @m68kde~1_128:
0000702E  2573 0D0A 11372          dc.b      37,115,13,10,0
00007032  00        
                    11373   @m68kde~1_129:
00007034  0D0A 0D0A 11374          dc.b      13,10,13,10,80,114,111,103,114,97,109,32,65
00007038  5072 6F67 
0000703C  7261 6D20 
00007040  41        
00007041  424F 5254 11375          dc.b      66,79,82,84,32,33,33,33,33,33,0
00007045  2021 2121 
00007049  2121 00   
                    11376   @m68kde~1_130:
0000704C  0D0A 556E 11377          dc.b      13,10,85,110,104,97,110,100,108,101,100,32,73
00007050  6861 6E64 
00007054  6C65 6420 
00007058  49        
00007059  6E74 6572 11378          dc.b      110,116,101,114,114,117,112,116,58,32,73,82
0000705D  7275 7074 
00007061  3A20 4952 
00007065  5125 6420 11379          dc.b      81,37,100,32,33,33,33,33,33,0
00007069  2121 2121 
0000706D  2100      
                    11380   @m68kde~1_131:
00007070  4144 4452 11381          dc.b      65,68,68,82,69,83,83,32,69,82,82,79,82,58,32
00007074  4553 5320 
00007078  4552 524F 
0000707C  523A 20   
0000707F  3136 206F 11382          dc.b      49,54,32,111,114,32,51,50,32,66,105,116,32,84
00007083  7220 3332 
00007087  2042 6974 
0000708B  2054      
0000708D  7261 6E73 11383          dc.b      114,97,110,115,102,101,114,32,116,111,47,102
00007091  6665 7220 
00007095  746F 2F66 
00007099  726F 6D20 11384          dc.b      114,111,109,32,97,110,32,79,68,68,32,65,100
0000709D  616E 204F 
000070A1  4444 2041 
000070A5  64        
000070A6  6472 6573 11385          dc.b      100,114,101,115,115,46,46,46,46,0
000070AA  732E 2E2E 
000070AE  2E00      
                    11386   @m68kde~1_132:
000070B0  556E 6861 11387          dc.b      85,110,104,97,110,100,108,101,100,32,84,114
000070B4  6E64 6C65 
000070B8  6420 5472 
000070BC  6170 2021 11388          dc.b      97,112,32,33,33,33,33,33,0
000070C0  2121 2121 
000070C4  00        
                    11389   @m68kde~1_133:
000070C6  4255 5320 11390          dc.b      66,85,83,32,69,114,114,111,114,33,0
000070CA  4572 726F 
000070CE  7221 00   
                    11391   @m68kde~1_134:
000070D2  4144 4452 11392          dc.b      65,68,68,82,69,83,83,32,69,114,114,111,114,33
000070D6  4553 5320 
000070DA  4572 726F 
000070DE  7221      
000070E0  00        11393          dc.b      0
                    11394   @m68kde~1_135:
000070E2  494C 4C45 11395          dc.b      73,76,76,69,71,65,76,32,73,78,83,84,82,85,67
000070E6  4741 4C20 
000070EA  494E 5354 
000070EE  5255 43   
000070F1  5449 4F4E 11396          dc.b      84,73,79,78,0
000070F5  00        
                    11397   @m68kde~1_136:
000070F6  4449 5649 11398          dc.b      68,73,86,73,68,69,32,66,89,32,90,69,82,79,0
000070FA  4445 2042 
000070FE  5920 5A45 
00007102  524F 00   
                    11399   @m68kde~1_137:
00007106  2743 484B 11400          dc.b      39,67,72,75,39,32,73,78,83,84,82,85,67,84,73
0000710A  2720 494E 
0000710E  5354 5255 
00007112  4354 49   
00007115  4F4E 00   11401          dc.b      79,78,0
                    11402   @m68kde~1_138:
00007118  5452 4150 11403          dc.b      84,82,65,80,86,32,73,78,83,84,82,85,67,84,73
0000711C  5620 494E 
00007120  5354 5255 
00007124  4354 49   
00007127  4F4E 00   11404          dc.b      79,78,0
                    11405   @m68kde~1_139:
0000712A  5052 4956 11406          dc.b      80,82,73,86,73,76,69,71,69,32,86,73,79,76,65
0000712E  494C 4547 
00007132  4520 5649 
00007136  4F4C 41   
00007139  5449 4F4E 11407          dc.b      84,73,79,78,0
0000713D  00        
                    11408   @m68kde~1_140:
0000713E  554E 494E 11409          dc.b      85,78,73,78,73,84,73,65,76,73,83,69,68,32,73
00007142  4954 4941 
00007146  4C49 5345 
0000714A  4420 49   
0000714D  5251 00   11410          dc.b      82,81,0
                    11411   @m68kde~1_141:
00007150  5350 5552 11412          dc.b      83,80,85,82,73,79,85,83,32,73,82,81,0
00007154  494F 5553 
00007158  2049 5251 
0000715C  00        
                    11413   @m68kde~1_142:
0000715E  0D0A 5374 11414          dc.b      13,10,83,116,97,114,116,32,65,100,100,114,101
00007162  6172 7420 
00007166  4164 6472 
0000716A  65        
0000716B  7373 2069 11415          dc.b      115,115,32,105,110,32,77,101,109,111,114,121
0000716F  6E20 4D65 
00007173  6D6F 7279 
00007177  3A20 00   11416          dc.b      58,32,0
                    11417   @m68kde~1_143:
0000717A  0D0A 456E 11418          dc.b      13,10,69,110,116,101,114,32,83,116,114,105,110
0000717E  7465 7220 
00007182  5374 7269 
00007186  6E        
00007187  6720 2845 11419          dc.b      103,32,40,69,83,67,32,116,111,32,101,110,100
0000718B  5343 2074 
0000718F  6F20 656E 
00007193  64        
00007194  2920 3A00 11420          dc.b      41,32,58,0
                    11421   @m68kde~1_144:
00007198  456E 7465 11422          dc.b      69,110,116,101,114,32,111,110,101,32,111,102
0000719C  7220 6F6E 
000071A0  6520 6F66 
000071A4  2074 6865 11423          dc.b      32,116,104,101,32,102,111,108,108,111,119,105
000071A8  2066 6F6C 
000071AC  6C6F 7769 
000071B0  6E67 2063 11424          dc.b      110,103,32,99,104,97,114,97,99,116,101,114,115
000071B4  6861 7261 
000071B8  6374 6572 
000071BC  73        
000071BD  2074 6F20 11425          dc.b      32,116,111,32,99,114,101,97,116,101,32,97,32
000071C1  6372 6561 
000071C5  7465 2061 
000071C9  20        
000071CA  7465 7374 11426          dc.b      116,101,115,116,32,100,97,116,97,32,112,97,116
000071CE  2064 6174 
000071D2  6120 7061 
000071D6  74        
000071D7  7465 726E 11427          dc.b      116,101,114,110,32,116,111,32,119,114,105,116
000071DB  2074 6F20 
000071DF  7772 6974 
000071E3  6520 5B35 11428          dc.b      101,32,91,53,44,32,65,44,32,70,44,32,48,93,58
000071E7  2C20 412C 
000071EB  2046 2C20 
000071EF  305D 3A   
000071F2  200A 00   11429          dc.b      32,10,0
                    11430   @m68kde~1_145:
000071F6  0D0A 5061 11431          dc.b      13,10,80,97,116,116,101,114,110,58,32,48,120
000071FA  7474 6572 
000071FE  6E3A 2030 
00007202  78        
00007203  2578 2073 11432          dc.b      37,120,32,115,101,108,101,99,116,101,100,10
00007207  656C 6563 
0000720B  7465 640A 
0000720F  00        11433          dc.b      0
                    11434   @m68kde~1_146:
00007210  0D0A 5061 11435          dc.b      13,10,80,97,116,116,101,114,110,32,73,110,118
00007214  7474 6572 
00007218  6E20 496E 
0000721C  76        
0000721D  616C 6964 11436          dc.b      97,108,105,100,46,10,0
00007221  2E0A 00   
                    11437   @m68kde~1_147:
00007224  456E 7465 11438          dc.b      69,110,116,101,114,32,91,49,93,32,102,111,114
00007228  7220 5B31 
0000722C  5D20 666F 
00007230  72        
00007231  2042 7974 11439          dc.b      32,66,121,116,101,115,44,32,91,50,93,32,102
00007235  6573 2C20 
00007239  5B32 5D20 
0000723D  66        
0000723E  6F72 2057 11440          dc.b      111,114,32,87,111,114,100,115,44,32,111,114
00007242  6F72 6473 
00007246  2C20 6F72 
0000724A  205B 335D 11441          dc.b      32,91,51,93,32,102,111,114,32,76,111,110,103
0000724E  2066 6F72 
00007252  204C 6F6E 
00007256  67        
00007257  2057 6F72 11442          dc.b      32,87,111,114,100,115,10,0
0000725B  6473 0A00 
                    11443   @m68kde~1_148:
00007260  0D0A 4279 11444          dc.b      13,10,66,121,116,101,32,115,101,108,101,99,116
00007264  7465 2073 
00007268  656C 6563 
0000726C  74        
0000726D  6564 3A20 11445          dc.b      101,100,58,32,48,120,37,120,10,0
00007271  3078 2578 
00007275  0A00      
                    11446   @m68kde~1_149:
00007278  0D0A 576F 11447          dc.b      13,10,87,111,114,100,32,115,101,108,101,99,116
0000727C  7264 2073 
00007280  656C 6563 
00007284  74        
00007285  6564 3A20 11448          dc.b      101,100,58,32,48,120,37,120,10,0
00007289  3078 2578 
0000728D  0A00      
                    11449   @m68kde~1_150:
00007290  0D0A 4C6F 11450          dc.b      13,10,76,111,110,103,32,87,111,114,100,32,115
00007294  6E67 2057 
00007298  6F72 6420 
0000729C  73        
0000729D  656C 6563 11451          dc.b      101,108,101,99,116,101,100,58,32,48,120,37,120
000072A1  7465 643A 
000072A5  2030 7825 
000072A9  78        
000072AA  0A00      11452          dc.b      10,0
                    11453   @m68kde~1_151:
000072AC  0D0A 496E 11454          dc.b      13,10,73,110,118,97,108,105,100,32,100,97,116
000072B0  7661 6C69 
000072B4  6420 6461 
000072B8  74        
000072B9  6120 7369 11455          dc.b      97,32,115,105,122,101,46,10,0
000072BD  7A65 2E0A 
000072C1  00        
                    11456   @m68kde~1_152:
000072C2  456E 7465 11457          dc.b      69,110,116,101,114,32,97,32,52,32,98,121,116
000072C6  7220 6120 
000072CA  3420 6279 
000072CE  74        
000072CF  6520 7374 11458          dc.b      101,32,115,116,97,114,116,32,97,100,100,114
000072D3  6172 7420 
000072D7  6164 6472 
000072DB  6573 7320 11459          dc.b      101,115,115,32,102,111,114,32,116,104,101,32
000072DF  666F 7220 
000072E3  7468 6520 
000072E7  7465 7374 11460          dc.b      116,101,115,116,32,40,101,103,46,32,48,57,48
000072EB  2028 6567 
000072EF  2E20 3039 
000072F3  30        
000072F4  3030 3030 11461          dc.b      48,48,48,48,48,41,46,10,0
000072F8  3029 2E0A 
000072FC  00        
                    11462   @m68kde~1_153:
000072FE  4E6F 7465 11463          dc.b      78,111,116,101,32,49,58,32,65,100,100,114,101
00007302  2031 3A20 
00007306  4164 6472 
0000730A  65        
0000730B  7373 6573 11464          dc.b      115,115,101,115,32,115,104,111,117,108,100,32
0000730F  2073 686F 
00007313  756C 6420 
00007317  616C 6967 11465          dc.b      97,108,105,103,110,32,116,111,32,97,110,32,101
0000731B  6E20 746F 
0000731F  2061 6E20 
00007323  65        
00007324  7665 6E20 11466          dc.b      118,101,110,32,97,100,100,114,101,115,115,46
00007328  6164 6472 
0000732C  6573 732E 
00007330  0A00      11467          dc.b      10,0
                    11468   @m68kde~1_154:
00007332  4E6F 7465 11469          dc.b      78,111,116,101,32,50,58,32,65,100,100,114,101
00007336  2032 3A20 
0000733A  4164 6472 
0000733E  65        
0000733F  7373 6573 11470          dc.b      115,115,101,115,32,115,104,111,117,108,100,32
00007343  2073 686F 
00007347  756C 6420 
0000734B  6265 2069 11471          dc.b      98,101,32,105,110,32,114,97,110,103,101,32,48
0000734F  6E20 7261 
00007353  6E67 6520 
00007357  30        
00007358  7830 3930 11472          dc.b      120,48,57,48,48,48,48,48,48,32,45,32,48,120
0000735C  3030 3030 
00007360  3020 2D20 
00007364  3078      
00007366  3039 3746 11473          dc.b      48,57,55,70,70,70,70,70,46,10,0
0000736A  4646 4646 
0000736E  2E0A 00   
                    11474   @m68kde~1_155:
00007372  0D0A 5374 11475          dc.b      13,10,83,116,97,114,116,32,97,100,100,114,101
00007376  6172 7420 
0000737A  6164 6472 
0000737E  65        
0000737F  7373 206E 11476          dc.b      115,115,32,110,111,116,32,101,118,101,110,46
00007383  6F74 2065 
00007387  7665 6E2E 
0000738B  0A00      11477          dc.b      10,0
                    11478   @m68kde~1_156:
0000738E  0D0A 5374 11479          dc.b      13,10,83,116,97,114,116,32,97,100,100,114,101
00007392  6172 7420 
00007396  6164 6472 
0000739A  65        
0000739B  7373 206E 11480          dc.b      115,115,32,110,111,116,32,119,105,116,104,105
0000739F  6F74 2077 
000073A3  6974 6869 
000073A7  6E20 7261 11481          dc.b      110,32,114,97,110,103,101,46,10,0
000073AB  6E67 652E 
000073AF  0A00      
                    11482   @m68kde~1_157:
000073B2  0D0A 456E 11483          dc.b      13,10,69,110,116,101,114,32,97,32,52,32,98,121
000073B6  7465 7220 
000073BA  6120 3420 
000073BE  6279      
000073C0  7465 2065 11484          dc.b      116,101,32,101,110,100,32,97,100,100,114,101
000073C4  6E64 2061 
000073C8  6464 7265 
000073CC  7373 2066 11485          dc.b      115,115,32,102,111,114,32,116,104,101,32,116
000073D0  6F72 2074 
000073D4  6865 2074 
000073D8  6573 7420 11486          dc.b      101,115,116,32,40,101,103,46,32,48,57,55,70
000073DC  2865 672E 
000073E0  2030 3937 
000073E4  46        
000073E5  4646 4646 11487          dc.b      70,70,70,70,41,46,10,0
000073E9  292E 0A00 
                    11488   @m68kde~1_158:
000073EE  0D0A 456E 11489          dc.b      13,10,69,110,100,32,97,100,100,114,101,115,115
000073F2  6420 6164 
000073F6  6472 6573 
000073FA  73        
000073FB  206E 6F74 11490          dc.b      32,110,111,116,32,101,118,101,110,46,10,0
000073FF  2065 7665 
00007403  6E2E 0A00 
                    11491   @m68kde~1_159:
00007408  0D0A 456E 11492          dc.b      13,10,69,110,100,32,97,100,100,114,101,115,115
0000740C  6420 6164 
00007410  6472 6573 
00007414  73        
00007415  206E 6F74 11493          dc.b      32,110,111,116,32,119,105,116,104,105,110,32
00007419  2077 6974 
0000741D  6869 6E20 
00007421  7261 6E67 11494          dc.b      114,97,110,103,101,32,111,114,32,98,101,102
00007425  6520 6F72 
00007429  2062 6566 
0000742D  6F72 6520 11495          dc.b      111,114,101,32,83,116,97,114,116,32,97,100,100
00007431  5374 6172 
00007435  7420 6164 
00007439  64        
0000743A  7265 7373 11496          dc.b      114,101,115,115,46,10,0
0000743E  2E0A 00   
                    11497   @m68kde~1_160:
00007442  0D0A 5772 11498          dc.b      13,10,87,114,105,116,105,110,103,32,99,111,109
00007446  6974 696E 
0000744A  6720 636F 
0000744E  6D        
0000744F  706C 6574 11499          dc.b      112,108,101,116,101,46,10,0
00007453  652E 0A00 
                    11500   @m68kde~1_161:
00007458  0D0A 5265 11501          dc.b      13,10,82,101,97,100,32,68,97,116,97,32,105,110
0000745C  6164 2044 
00007460  6174 6120 
00007464  696E      
00007466  2041 6464 11502          dc.b      32,65,100,100,114,101,115,115,32,82,97,110,103
0000746A  7265 7373 
0000746E  2052 616E 
00007472  67        
00007473  6520 4D61 11503          dc.b      101,32,77,97,116,99,104,101,115,32,87,114,105
00007477  7463 6865 
0000747B  7320 5772 
0000747F  69        
00007480  7474 656E 11504          dc.b      116,116,101,110,32,68,97,116,97,32,80,97,116
00007484  2044 6174 
00007488  6120 5061 
0000748C  74        
0000748D  7465 726E 11505          dc.b      116,101,114,110,32,45,32,77,101,109,111,114
00007491  202D 204D 
00007495  656D 6F72 
00007499  7920 5465 11506          dc.b      121,32,84,101,115,116,32,83,117,99,99,101,115
0000749D  7374 2053 
000074A1  7563 6365 
000074A5  73        
000074A6  7366 756C 11507          dc.b      115,102,117,108,33,10,0
000074AA  210A 00   
                    11508   @m68kde~1_162:
000074AE  0D0A 4D65 11509          dc.b      13,10,77,101,109,111,114,121,32,84,101,115,116
000074B2  6D6F 7279 
000074B6  2054 6573 
000074BA  74        
000074BB  2064 6174 11510          dc.b      32,100,97,116,97,32,109,105,115,45,109,97,116
000074BF  6120 6D69 
000074C3  732D 6D61 
000074C7  74        
000074C8  6368 2C20 11511          dc.b      99,104,44,32,101,110,100,105,110,103,32,116
000074CC  656E 6469 
000074D0  6E67 2074 
000074D4  6573 742E 11512          dc.b      101,115,116,46,10,0
000074D8  0A00      
                    11513   @m68kde~1_163:
000074DA  4445 312D 11514          dc.b      68,69,49,45,54,56,107,32,66,117,103,32,86,49
000074DE  3638 6B20 
000074E2  4275 6720 
000074E6  5631      
000074E8  2E37 3700 11515          dc.b      46,55,55,0
                    11516   @m68kde~1_164:
000074EC  436F 7079 11517          dc.b      67,111,112,121,114,105,103,104,116,32,40,67
000074F0  7269 6768 
000074F4  7420 2843 
000074F8  2920 504A 11518          dc.b      41,32,80,74,32,68,97,118,105,101,115,32,50,48
000074FC  2044 6176 
00007500  6965 7320 
00007504  3230      
00007506  3136 00   11519          dc.b      49,54,0
                    11520   @m68kde~1_165:
0000750A  4E61 6D65 11521          dc.b      78,97,109,101,58,32,73,115,97,98,101,108,108
0000750E  3A20 4973 
00007512  6162 656C 
00007516  6C        
00007517  6520 416E 11522          dc.b      101,32,65,110,100,114,101,32,45,32,83,116,117
0000751B  6472 6520 
0000751F  2D20 5374 
00007523  75        
00007524  233A 2031 11523          dc.b      35,58,32,49,50,53,50,49,53,56,57,0
00007528  3235 3231 
0000752C  3538 3900 
                    11524   @m68kde~1_166:
00007530  0D0A 5275 11525          dc.b      13,10,82,117,110,110,105,110,103,46,46,46,46
00007534  6E6E 696E 
00007538  672E 2E2E 
0000753C  2E        
0000753D  2E00      11526          dc.b      46,0
                    11527   @m68kde~1_167:
00007540  5275 6E6E 11528          dc.b      82,117,110,110,105,110,103,46,46,46,46,46,0
00007544  696E 672E 
00007548  2E2E 2E2E 
0000754C  00        
                    11529   @m68kde~1_168:
0000754E  4279 3A20 11530          dc.b      66,121,58,32,80,74,32,68,97,118,105,101,115
00007552  504A 2044 
00007556  6176 6965 
0000755A  73        
0000755B  00        11531          dc.b      0
                    11532   @m68kde~1_169:
0000755C  0D0A 2573 11533          dc.b      13,10,37,115,0
00007560  00        
                    11534   @m68kde~1_170:
00007562  2E42 2000 11535          dc.b      46,66,32,0
                    11536   @m68kde~1_171:
00007566  2E57 2000 11537          dc.b      46,87,32,0
                    11538   @m68kde~1_172:
0000756A  2E4C 2000 11539          dc.b      46,76,32,0
                    11540   @m68kde~1_173:
0000756E  2324 2558 11541          dc.b      35,36,37,88,0
00007572  00        
                    11542   @m68kde~1_174:
00007574  2800      11543          dc.b      40,0
                    11544   @m68kde~1_175:
00007576  2900      11545          dc.b      41,0
                    11546   @m68kde~1_176:
00007578  292B 00   11547          dc.b      41,43,0
                    11548   @m68kde~1_177:
0000757C  2D28 00   11549          dc.b      45,40,0
                    11550   @m68kde~1_178:
00007580  2564 2841 11551          dc.b      37,100,40,65,37,100,41,0
00007584  2564 2900 
                    11552   @m68kde~1_179:
00007588  2564 2841 11553          dc.b      37,100,40,65,37,100,44,0
0000758C  2564 2C00 
                    11554   @m68kde~1_180:
00007590  4400      11555          dc.b      68,0
                    11556   @m68kde~1_181:
00007592  4100      11557          dc.b      65,0
                    11558   @m68kde~1_182:
00007594  2564 00   11559          dc.b      37,100,0
                    11560   @m68kde~1_183:
00007598  2E57 2900 11561          dc.b      46,87,41,0
                    11562   @m68kde~1_184:
0000759C  2E4C 2900 11563          dc.b      46,76,41,0
                    11564   @m68kde~1_185:
000075A0  2425 5800 11565          dc.b      36,37,88,0
                    11566   @m68kde~1_186:
000075A4  2564 2850 11567          dc.b      37,100,40,80,67,41,0
000075A8  4329 00   
                    11568   @m68kde~1_187:
000075AC  2564 2850 11569          dc.b      37,100,40,80,67,44,0
000075B0  432C 00   
                    11570   @m68kde~1_188:
000075B4  2C00      11571          dc.b      44,0
                    11572   @m68kde~1_189:
000075B6  4343 00   11573          dc.b      67,67,0
                    11574   @m68kde~1_190:
000075BA  4353 00   11575          dc.b      67,83,0
                    11576   @m68kde~1_191:
000075BE  4551 00   11577          dc.b      69,81,0
                    11578   @m68kde~1_192:
000075C2  4745 00   11579          dc.b      71,69,0
                    11580   @m68kde~1_193:
000075C6  4754 00   11581          dc.b      71,84,0
                    11582   @m68kde~1_194:
000075CA  4849 00   11583          dc.b      72,73,0
                    11584   @m68kde~1_195:
000075CE  4C45 00   11585          dc.b      76,69,0
                    11586   @m68kde~1_196:
000075D2  4C53 00   11587          dc.b      76,83,0
                    11588   @m68kde~1_197:
000075D6  4C54 00   11589          dc.b      76,84,0
                    11590   @m68kde~1_198:
000075DA  4D49 00   11591          dc.b      77,73,0
                    11592   @m68kde~1_199:
000075DE  4E45 00   11593          dc.b      78,69,0
                    11594   @m68kde~1_200:
000075E2  504C 00   11595          dc.b      80,76,0
                    11596   @m68kde~1_201:
000075E6  5653 00   11597          dc.b      86,83,0
                    11598   @m68kde~1_202:
000075EA  5643 00   11599          dc.b      86,67,0
                    11600   @m68kde~1_203:
000075EE  5241 00   11601          dc.b      82,65,0
                    11602   @m68kde~1_204:
000075F2  5352 00   11603          dc.b      83,82,0
                    11604   @m68kde~1_205:
000075F6  556E 6B6E 11605          dc.b      85,110,107,110,111,119,110,0
000075FA  6F77 6E00 
                    11606   @m68kde~1_206:
000075FE  4142 4344 11607          dc.b      65,66,67,68,32,68,37,100,44,68,37,100,0
00007602  2044 2564 
00007606  2C44 2564 
0000760A  00        
                    11608   @m68kde~1_207:
0000760C  4142 4344 11609          dc.b      65,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007610  202D 2841 
00007614  2564 292C 
00007618  2D28 41   
0000761B  2564 2900 11610          dc.b      37,100,41,0
                    11611   @m68kde~1_208:
00007620  4144 4441 11612          dc.b      65,68,68,65,46,87,32,0
00007624  2E57 2000 
                    11613   @m68kde~1_209:
00007628  4144 4441 11614          dc.b      65,68,68,65,46,76,32,0
0000762C  2E4C 2000 
                    11615   @m68kde~1_210:
00007630  2C41 2558 11616          dc.b      44,65,37,88,0
00007634  00        
                    11617   @m68kde~1_211:
00007636  4144 4400 11618          dc.b      65,68,68,0
                    11619   @m68kde~1_212:
0000763A  4144 4449 11620          dc.b      65,68,68,73,0
0000763E  00        
                    11621   @m68kde~1_213:
00007640  414E 4449 11622          dc.b      65,78,68,73,0
00007644  00        
                    11623   @m68kde~1_214:
00007646  434D 5049 11624          dc.b      67,77,80,73,0
0000764A  00        
                    11625   @m68kde~1_215:
0000764C  454F 5249 11626          dc.b      69,79,82,73,0
00007650  00        
                    11627   @m68kde~1_216:
00007652  4F52 4900 11628          dc.b      79,82,73,0
                    11629   @m68kde~1_217:
00007656  5355 4249 11630          dc.b      83,85,66,73,0
0000765A  00        
                    11631   @m68kde~1_218:
0000765C  414E 4449 11632          dc.b      65,78,68,73,32,35,36,37,88,44,83,82,0
00007660  2023 2425 
00007664  582C 5352 
00007668  00        
                    11633   @m68kde~1_219:
0000766A  4144 4451 11634          dc.b      65,68,68,81,0
0000766E  00        
                    11635   @m68kde~1_220:
00007670  2325 3158 11636          dc.b      35,37,49,88,44,0
00007674  2C00      
                    11637   @m68kde~1_221:
00007676  4144 4458 11638          dc.b      65,68,68,88,0
0000767A  00        
                    11639   @m68kde~1_222:
0000767C  4425 582C 11640          dc.b      68,37,88,44,68,37,88,0
00007680  4425 5800 
                    11641   @m68kde~1_223:
00007684  2D28 4125 11642          dc.b      45,40,65,37,88,41,44,45,40,65,37,88,41,0
00007688  5829 2C2D 
0000768C  2841 2558 
00007690  2900      
                    11643   @m68kde~1_224:
00007692  414E 4400 11644          dc.b      65,78,68,0
                    11645   @m68kde~1_225:
00007696  414E 4449 11646          dc.b      65,78,68,73,32,35,36,37,50,88,44,67,67,82,0
0000769A  2023 2425 
0000769E  3258 2C43 
000076A2  4352 00   
                    11647   @m68kde~1_226:
000076A6  4153 4C00 11648          dc.b      65,83,76,0
                    11649   @m68kde~1_227:
000076AA  4153 5200 11650          dc.b      65,83,82,0
                    11651   @m68kde~1_228:
000076AE  4C53 4C00 11652          dc.b      76,83,76,0
                    11653   @m68kde~1_229:
000076B2  4C53 5200 11654          dc.b      76,83,82,0
                    11655   @m68kde~1_230:
000076B6  524F 4C00 11656          dc.b      82,79,76,0
                    11657   @m68kde~1_231:
000076BA  524F 5200 11658          dc.b      82,79,82,0
                    11659   @m68kde~1_232:
000076BE  524F 584C 11660          dc.b      82,79,88,76,0
000076C2  00        
                    11661   @m68kde~1_233:
000076C4  524F 5852 11662          dc.b      82,79,88,82,0
000076C8  00        
                    11663   @m68kde~1_234:
000076CA  2324 2558 11664          dc.b      35,36,37,88,44,68,37,88,0
000076CE  2C44 2558 
000076D2  00        
                    11665   @m68kde~1_235:
000076D4  4200      11666          dc.b      66,0
                    11667   @m68kde~1_236:
000076D6  4243 4847 11668          dc.b      66,67,72,71,32,0
000076DA  2000      
                    11669   @m68kde~1_237:
000076DC  4425 642C 11670          dc.b      68,37,100,44,0
000076E0  00        
                    11671   @m68kde~1_238:
000076E2  2324 2558 11672          dc.b      35,36,37,88,44,0
000076E6  2C00      
                    11673   @m68kde~1_239:
000076E8  4243 4C52 11674          dc.b      66,67,76,82,32,0
000076EC  2000      
                    11675   @m68kde~1_240:
000076EE  4253 4554 11676          dc.b      66,83,69,84,32,0
000076F2  2000      
                    11677   @m68kde~1_241:
000076F4  4254 5354 11678          dc.b      66,84,83,84,32,0
000076F8  2000      
                    11679   @m68kde~1_242:
000076FA  4348 4B20 11680          dc.b      67,72,75,32,0
000076FE  00        
                    11681   @m68kde~1_243:
00007700  2C44 2564 11682          dc.b      44,68,37,100,0
00007704  00        
                    11683   @m68kde~1_244:
00007706  434C 5200 11684          dc.b      67,76,82,0
                    11685   @m68kde~1_245:
0000770A  434D 5041 11686          dc.b      67,77,80,65,46,87,32,0
0000770E  2E57 2000 
                    11687   @m68kde~1_246:
00007712  434D 5041 11688          dc.b      67,77,80,65,46,76,32,0
00007716  2E4C 2000 
                    11689   @m68kde~1_247:
0000771A  2C41 2564 11690          dc.b      44,65,37,100,0
0000771E  00        
                    11691   @m68kde~1_248:
00007720  434D 5000 11692          dc.b      67,77,80,0
                    11693   @m68kde~1_249:
00007724  434D 504D 11694          dc.b      67,77,80,77,0
00007728  00        
                    11695   @m68kde~1_250:
0000772A  2841 2564 11696          dc.b      40,65,37,100,41,43,44,40,65,37,100,41,43,0
0000772E  292B 2C28 
00007732  4125 6429 
00007736  2B00      
                    11697   @m68kde~1_251:
00007738  4442 00   11698          dc.b      68,66,0
                    11699   @m68kde~1_252:
0000773C  4425 642C 11700          dc.b      68,37,100,44,37,43,100,40,80,67,41,32,116,111
00007740  252B 6428 
00007744  5043 2920 
00007748  746F      
0000774A  2041 6464 11701          dc.b      32,65,100,100,114,58,36,37,88,0
0000774E  723A 2425 
00007752  5800      
                    11702   @m68kde~1_253:
00007754  4449 5653 11703          dc.b      68,73,86,83,32,0
00007758  2000      
                    11704   @m68kde~1_254:
0000775A  4449 5655 11705          dc.b      68,73,86,85,32,0
0000775E  2000      
                    11706   @m68kde~1_255:
00007760  454F 5200 11707          dc.b      69,79,82,0
                    11708   @m68kde~1_256:
00007764  454F 5249 11709          dc.b      69,79,82,73,32,35,36,37,50,88,44,67,67,82,0
00007768  2023 2425 
0000776C  3258 2C43 
00007770  4352 00   
                    11710   @m68kde~1_257:
00007774  454F 5249 11711          dc.b      69,79,82,73,32,35,36,37,88,44,83,82,0
00007778  2023 2425 
0000777C  582C 5352 
00007780  00        
                    11712   @m68kde~1_258:
00007782  4558 4720 11713          dc.b      69,88,71,32,68,37,100,44,68,37,100,0
00007786  4425 642C 
0000778A  4425 6400 
                    11714   @m68kde~1_259:
0000778E  4558 4720 11715          dc.b      69,88,71,32,65,37,100,44,65,37,100,0
00007792  4125 642C 
00007796  4125 6400 
                    11716   @m68kde~1_260:
0000779A  4558 4720 11717          dc.b      69,88,71,32,68,37,100,44,65,37,100,0
0000779E  4425 642C 
000077A2  4125 6400 
                    11718   @m68kde~1_261:
000077A6  4558 5400 11719          dc.b      69,88,84,0
                    11720   @m68kde~1_262:
000077AA  494C 4C45 11721          dc.b      73,76,76,69,71,65,76,32,40,36,52,65,70,67,41
000077AE  4741 4C20 
000077B2  2824 3441 
000077B6  4643 29   
000077B9  00        11722          dc.b      0
                    11723   @m68kde~1_263:
000077BA  4A4D 5020 11724          dc.b      74,77,80,32,0
000077BE  00        
                    11725   @m68kde~1_264:
000077C0  4A53 5220 11726          dc.b      74,83,82,32,0
000077C4  00        
                    11727   @m68kde~1_265:
000077C6  4C45 4120 11728          dc.b      76,69,65,32,0
000077CA  00        
                    11729   @m68kde~1_266:
000077CC  4C49 4E4B 11730          dc.b      76,73,78,75,32,0
000077D0  2000      
                    11731   @m68kde~1_267:
000077D2  4125 642C 11732          dc.b      65,37,100,44,35,37,100,0
000077D6  2325 6400 
                    11733   @m68kde~1_268:
000077DA  4D4F 5645 11734          dc.b      77,79,86,69,46,66,32,0
000077DE  2E42 2000 
                    11735   @m68kde~1_269:
000077E2  4D4F 5645 11736          dc.b      77,79,86,69,46,76,32,0
000077E6  2E4C 2000 
                    11737   @m68kde~1_270:
000077EA  4D4F 5645 11738          dc.b      77,79,86,69,46,87,32,0
000077EE  2E57 2000 
                    11739   @m68kde~1_271:
000077F2  4D4F 5645 11740          dc.b      77,79,86,69,32,0
000077F6  2000      
                    11741   @m68kde~1_272:
000077F8  2C43 4352 11742          dc.b      44,67,67,82,0
000077FC  00        
                    11743   @m68kde~1_273:
000077FE  4D4F 5645 11744          dc.b      77,79,86,69,32,83,82,44,0
00007802  2053 522C 
00007806  00        
                    11745   @m68kde~1_274:
00007808  2C53 5200 11746          dc.b      44,83,82,0
                    11747   @m68kde~1_275:
0000780C  4D4F 5645 11748          dc.b      77,79,86,69,32,85,83,80,44,65,37,100,0
00007810  2055 5350 
00007814  2C41 2564 
00007818  00        
                    11749   @m68kde~1_276:
0000781A  4D4F 5645 11750          dc.b      77,79,86,69,32,65,37,100,44,85,83,80,0
0000781E  2041 2564 
00007822  2C55 5350 
00007826  00        
                    11751   @m68kde~1_277:
00007828  4D4F 5645 11752          dc.b      77,79,86,69,77,0
0000782C  4D00      
                    11753   @m68kde~1_278:
0000782E  4425 6400 11754          dc.b      68,37,100,0
                    11755   @m68kde~1_279:
00007832  2F44 2564 11756          dc.b      47,68,37,100,0
00007836  00        
                    11757   @m68kde~1_280:
00007838  4125 6400 11758          dc.b      65,37,100,0
                    11759   @m68kde~1_281:
0000783C  2F41 2564 11760          dc.b      47,65,37,100,0
00007840  00        
                    11761   @m68kde~1_282:
00007842  4D4F 5645 11762          dc.b      77,79,86,69,80,46,87,32,36,37,88,40,65,37,100
00007846  502E 5720 
0000784A  2425 5828 
0000784E  4125 64   
00007851  292C 4425 11763          dc.b      41,44,68,37,100,0
00007855  6400      
                    11764   @m68kde~1_283:
00007858  4D4F 5645 11765          dc.b      77,79,86,69,80,46,76,32,36,37,88,40,65,37,100
0000785C  502E 4C20 
00007860  2425 5828 
00007864  4125 64   
00007867  292C 4425 11766          dc.b      41,44,68,37,100,0
0000786B  6400      
                    11767   @m68kde~1_284:
0000786E  4D4F 5645 11768          dc.b      77,79,86,69,80,46,87,32,68,37,100,44,36,37,88
00007872  502E 5720 
00007876  4425 642C 
0000787A  2425 58   
0000787D  2841 2564 11769          dc.b      40,65,37,100,41,0
00007881  2900      
                    11770   @m68kde~1_285:
00007884  4D4F 5645 11771          dc.b      77,79,86,69,80,46,76,32,68,37,100,44,36,37,88
00007888  502E 4C20 
0000788C  4425 642C 
00007890  2425 58   
00007893  2841 2564 11772          dc.b      40,65,37,100,41,0
00007897  2900      
                    11773   @m68kde~1_286:
0000789A  4D4F 5645 11774          dc.b      77,79,86,69,81,32,35,36,37,88,44,68,37,100,0
0000789E  5120 2324 
000078A2  2558 2C44 
000078A6  2564 00   
                    11775   @m68kde~1_287:
000078AA  4D55 4C53 11776          dc.b      77,85,76,83,32,0
000078AE  2000      
                    11777   @m68kde~1_288:
000078B0  4D55 4C55 11778          dc.b      77,85,76,85,32,0
000078B4  2000      
                    11779   @m68kde~1_289:
000078B6  4E42 4344 11780          dc.b      78,66,67,68,32,0
000078BA  2000      
                    11781   @m68kde~1_290:
000078BC  4E45 4700 11782          dc.b      78,69,71,0
                    11783   @m68kde~1_291:
000078C0  4E45 4758 11784          dc.b      78,69,71,88,0
000078C4  00        
                    11785   @m68kde~1_292:
000078C6  4E4F 5000 11786          dc.b      78,79,80,0
                    11787   @m68kde~1_293:
000078CA  4E4F 5400 11788          dc.b      78,79,84,0
                    11789   @m68kde~1_294:
000078CE  4F52 00   11790          dc.b      79,82,0
                    11791   @m68kde~1_295:
000078D2  4F52 4920 11792          dc.b      79,82,73,32,35,36,37,50,88,44,67,67,82,0
000078D6  2324 2532 
000078DA  582C 4343 
000078DE  5200      
                    11793   @m68kde~1_296:
000078E0  4F52 4920 11794          dc.b      79,82,73,32,32,35,36,37,88,44,83,82,0
000078E4  2023 2425 
000078E8  582C 5352 
000078EC  00        
                    11795   @m68kde~1_297:
000078EE  5045 4120 11796          dc.b      80,69,65,32,0
000078F2  00        
                    11797   @m68kde~1_298:
000078F4  5245 5345 11798          dc.b      82,69,83,69,84,0
000078F8  5400      
                    11799   @m68kde~1_299:
000078FA  5254 4500 11800          dc.b      82,84,69,0
                    11801   @m68kde~1_300:
000078FE  5254 5200 11802          dc.b      82,84,82,0
                    11803   @m68kde~1_301:
00007902  5254 5300 11804          dc.b      82,84,83,0
                    11805   @m68kde~1_302:
00007906  5354 4F50 11806          dc.b      83,84,79,80,32,35,36,37,88,0
0000790A  2023 2425 
0000790E  5800      
                    11807   @m68kde~1_303:
00007910  5342 4344 11808          dc.b      83,66,67,68,32,68,37,100,44,68,37,100,0
00007914  2044 2564 
00007918  2C44 2564 
0000791C  00        
                    11809   @m68kde~1_304:
0000791E  5342 4344 11810          dc.b      83,66,67,68,32,45,40,65,37,100,41,44,45,40,65
00007922  202D 2841 
00007926  2564 292C 
0000792A  2D28 41   
0000792D  2564 2900 11811          dc.b      37,100,41,0
                    11812   @m68kde~1_305:
00007932  5300      11813          dc.b      83,0
                    11814   @m68kde~1_306:
00007934  5355 4241 11815          dc.b      83,85,66,65,46,87,32,0
00007938  2E57 2000 
                    11816   @m68kde~1_307:
0000793C  5355 4241 11817          dc.b      83,85,66,65,46,76,32,0
00007940  2E4C 2000 
                    11818   @m68kde~1_308:
00007944  5355 4200 11819          dc.b      83,85,66,0
                    11820   @m68kde~1_309:
00007948  5355 4251 11821          dc.b      83,85,66,81,0
0000794C  00        
                    11822   @m68kde~1_310:
0000794E  5355 4258 11823          dc.b      83,85,66,88,0
00007952  00        
                    11824   @m68kde~1_311:
00007954  4425 3158 11825          dc.b      68,37,49,88,44,68,37,49,88,0
00007958  2C44 2531 
0000795C  5800      
                    11826   @m68kde~1_312:
0000795E  2D28 4125 11827          dc.b      45,40,65,37,49,88,41,44,45,40,65,37,49,88,41
00007962  3158 292C 
00007966  2D28 4125 
0000796A  3158 29   
0000796D  00        11828          dc.b      0
                    11829   @m68kde~1_313:
0000796E  5357 4150 11830          dc.b      83,87,65,80,32,68,37,100,0
00007972  2044 2564 
00007976  00        
                    11831   @m68kde~1_314:
00007978  5441 5320 11832          dc.b      84,65,83,32,0
0000797C  00        
                    11833   @m68kde~1_315:
0000797E  5452 4150 11834          dc.b      84,82,65,80,32,35,37,100,0
00007982  2023 2564 
00007986  00        
                    11835   @m68kde~1_316:
00007988  5452 4150 11836          dc.b      84,82,65,80,86,0
0000798C  5600      
                    11837   @m68kde~1_317:
0000798E  5453 5400 11838          dc.b      84,83,84,0
                    11839   @m68kde~1_318:
00007992  554E 4C4B 11840          dc.b      85,78,76,75,32,65,37,100,0
00007996  2041 2564 
0000799A  00        
                    11841          section   data
0000799C            11842                   align
          0000 799C 11843   DataStart       equ       *
                    11844   
                    11845   *********************************************************************************************************
                    11846   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                    11847   * to ram as part of the CStart routine in this file
                    11848   *********************************************************************************************************
                    11849   
                    11850   @itoa_1:
0000799C  2D32 3134 11851          dc.b      45,50,49,52,55,52,56,51,54,52,56,0
000079A0  3734 3833 
000079A4  3634 3800 
                    11852          section   bss
000079A8            11853                   align
          0000 79A8 11854   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                    11855   
                    11856   *********************************************************************************************************
                    11857   * Section for Uninitialised Data held in ROM as constants
                    11858   *********************************************************************************************************
                    11859   
0B000000            11860                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 000C 11861   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                    11862   
                    11863   
0B000000            11864   bss             org       bss
                    11865   
                    11866   *********************************************************************************************************
                    11867   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                    11868   * install the exception handler using the C function InstallExceptionHandler()
                    11869   *********************************************************************************************************
                    11870   
                    11871   
                    11872   
0B000000            11873   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004            11874   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008            11875   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C            11876   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010            11877   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014            11878   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018            11879   VCheck           ds.l    1      ditto
0B00001C            11880   VTrapV           ds.l    1      ditto
0B000020            11881   VPrivilege       ds.l    1      ditto
0B000024            11882   VTrace           ds.l    1
0B000028            11883   VLine1010emul    ds.l    1
0B00002C            11884   VLine1111emul    ds.l    1
0B000030            11885   VUnassigned1     ds.l    1
0B000034            11886   VUnassigned2     ds.l    1
0B000038            11887   VUnassigned3     ds.l    1
0B00003C            11888   VUninit_IRQ      ds.l    1
0B000040            11889   VUnassigned4     ds.l    1
0B000044            11890   VUnassigned5     ds.l    1
0B000048            11891   VUnassigned6     ds.l    1
0B00004C            11892   VUnassigned7     ds.l    1
0B000050            11893   VUnassigned8     ds.l    1
0B000054            11894   VUnassigned9     ds.l    1
0B000058            11895   VUnassigned10    ds.l    1
0B00005C            11896   VUnassigned11    ds.l    1
0B000060            11897   VSpuriousIRQ     ds.l    1
                    11898   
                    11899   * Interrupt handlers Vector 25-31
0B000064            11900   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068            11901   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C            11902   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070            11903   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074            11904   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078            11905   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C            11906   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11907   
                    11908   * Trap Handler vectors 32-47
0B000080            11909   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084            11910   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088            11911   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C            11912   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090            11913   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094            11914   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098            11915   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C            11916   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0            11917   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4            11918   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8            11919   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC            11920   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0            11921   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4            11922   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8            11923   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC            11924   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                    11925   
                    11926   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                    11927   
                    11928   ***********************************************************************************************************
                    11929   * Other Variables
                    11930   ***********************************************************************************************************
                    11931   *__DebugA5       ds.l    1
                    11932   *__UserA5        ds.l    1
                    11933   
                    11934   ***********************************************************************************************************
0B0000C0            11935   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4            11936   __allocp:       ds.l    0       ; start of allocation units
0B0000C4            11937   __heap:         ds.l    0       ; pointers for malloc functions
                    11938   
                    11939   *__himem:       ds.l    himem            ; highest memory location + 1
                    11940   *__stklen:      ds.l    stklen           ; default stack size
                    11941   
                    11942   *********************************************************************************************************
                    11943   * Section for Heap
                    11944   *********************************************************************************************************
                    11945   
                    11946   _i:
0B0000C4            11947          ds.b      4
                    11948   _x:
0B0000C8            11949          ds.b      4
                    11950   _y:
0B0000CC            11951          ds.b      4
                    11952   _z:
0B0000D0            11953          ds.b      4
                    11954   _PortA_Count:
0B0000D4            11955          ds.b      4
                    11956   _Trace:
0B0000D8            11957          ds.b      4
                    11958   _GoFlag:
0B0000DC            11959          ds.b      4
                    11960   _Echo:
0B0000E0            11961          ds.b      4
                    11962   _d0:
0B0000E4            11963          ds.b      4
                    11964   _d1:
0B0000E8            11965          ds.b      4
                    11966   _d2:
0B0000EC            11967          ds.b      4
                    11968   _d3:
0B0000F0            11969          ds.b      4
                    11970   _d4:
0B0000F4            11971          ds.b      4
                    11972   _d5:
0B0000F8            11973          ds.b      4
                    11974   _d6:
0B0000FC            11975          ds.b      4
                    11976   _d7:
0B000100            11977          ds.b      4
                    11978   _a0:
0B000104            11979          ds.b      4
                    11980   _a1:
0B000108            11981          ds.b      4
                    11982   _a2:
0B00010C            11983          ds.b      4
                    11984   _a3:
0B000110            11985          ds.b      4
                    11986   _a4:
0B000114            11987          ds.b      4
                    11988   _a5:
0B000118            11989          ds.b      4
                    11990   _a6:
0B00011C            11991          ds.b      4
                    11992   _PC:
0B000120            11993          ds.b      4
                    11994   _SSP:
0B000124            11995          ds.b      4
                    11996   _USP:
0B000128            11997          ds.b      4
                    11998   _SR:
0B00012C            11999          ds.b      2
                    12000   _BreakPointAddress:
0B00012E            12001          ds.b      32
                    12002   _BreakPointInstruction:
0B00014E            12003          ds.b      16
                    12004   _BreakPointSetOrCleared:
0B00015E            12005          ds.b      32
                    12006   _InstructionSize:
0B00017E            12007          ds.b      4
                    12008   _WatchPointAddress:
0B000182            12009          ds.b      32
                    12010   _WatchPointSetOrCleared:
0B0001A2            12011          ds.b      32
                    12012   _WatchPointString:
0B0001C2            12013          ds.b      800
                    12014   _Instruction:
0B0004E2            12015          ds.b      100
                    12016   _TempString:
0B000546            12017          ds.b      100
                    12018          section   heap
0B0005AA            12019                   align
          0B00 05AA 12020   bssEnd          equ *                   end of storage space for unitialised variables
                    12021   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 05AA 12022   heap   equ       *
0B0005AA            12023                    align
          0000 0000

Assembly errors: 0
