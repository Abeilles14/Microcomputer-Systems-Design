680x0 MACRO ASSEMBLER   Version 5.00   (c) 1992-2005 Peter J. Fondse

Date: 07 Feb 2023      Time: 18:25:26          Source: C:\IDE68K\ASS2_PARTB\CSTART_V4_0-DEBUGMONITOR.ASM

                       1   ; for initial stack use $08040000 if your system uses SRAM for main memory (top of 256kbyte SRAM space)
                       2   ; When your system is converted to use DRAM for main memory set this constant to $0C000000 (top of 64MByte DRAM space
                       3   
                       4   ;StackPointerVal     equ $08040000      when using sram
          0C00 0000    5   StackPointerVal     equ $0C000000      when using dram
                       6   
                       7   ; define RamVectorTable as $0803000 if your system uses SRAM for main memory
                       8   ; When your system is converted to use DRAM for main memory define RamVectorTable constant as $0B000000 (top of 64MByte DRAM space)
                       9   
                      10   ;RamVectorTable      equ $08030000      when using sram
          0B00 0000   11   RamVectorTable      equ $0B000000      when using dram
                      12   
                      13   
                      14   
                      15   ; CSTART.ASM  -  C startup-code for Debug Monitor
                      16                   section CODE
00000000              17                   align
                      18   
00000000              19                   org $00000000          ;start of rom based vector table, 68k hard wired to expect this at $0
                      20   
00000000  0C00 0000   21   InitialSP       dc.l StackPointerVal   ;initial supervisor state stack pointer(stack decrements first before being used)
00000004  0000 0400   22   InitialPC       dc.l start             ;address of 1st instruction of program after a reset
00000008  0000 0802   23   BusError        dc.l E_BErro           ;bus error - stop program
0000000C  0000 0814   24   AddressError    dc.l E_AErro           ;address error - stop program
00000010  0000 0826   25   IllegalInstr    dc.l E_IInst           ;illegal instruction - stop program
00000014  0000 0838   26   DividebyZero    dc.l E_DZero           ;divide by zero error - stop program
00000018  0000 084A   27   Check           dc.l E_Check           ;Check instruction - stop program
0000001C  0000 085C   28   TrapV           dc.l E_Trapv           ;Trapv instruction - stop program
00000020  0000 086E   29   Privilege       dc.l E_Priv            ;privilige violation - stop program
00000024  0000 0880   30   Trace           dc.l E_Trace           ;stop on trace
00000028  0000 0892   31   Line1010emul    dc.l E_1010            ;1010 instructions stop
0000002C  0000 08A4   32   Line1111emul    dc.l E_1111            ;1111 instructions stop
00000030  0000 08B6   33   Unassigned1     dc.l E_Unnas1           ;unassigned vector
00000034  0000 08B6   34   Unassigned2     dc.l E_Unnas2           ;unassigned vector
00000038  0000 08B6   35   Unassigned3     dc.l E_Unnas3           ;unassigned vector
0000003C  0000 08B6   36   Uninit_IRQ      dc.l E_UnitI           ;uninitialised interrupt
00000040  0000 08B6   37   Unassigned4     dc.l E_Unnas4           ;unassigned vector
00000044  0000 08B6   38   Unassigned5     dc.l E_Unnas5           ;unassigned vector
00000048  0000 08B6   39   Unassigned6     dc.l E_Unnas6           ;unassigned vector
0000004C  0000 08B6   40   Unassigned7     dc.l E_Unnas7           ;unassigned vector
00000050  0000 08B6   41   Unassigned8     dc.l E_Unnas8           ;unassigned vector
00000054  0000 08B6   42   Unassigned9     dc.l E_Unnas9           ;unassigned vector
00000058  0000 08B6   43   Unassigned10    dc.l E_Unnas10           ;unassigned vector
0000005C  0000 08B6   44   Unassigned11    dc.l E_Unnas11           ;unassigned vector
00000060  0000 08B6   45   SpuriousIRQ     dc.l E_Spuri           ;stop on spurious irq
                      46   *
                      47   *
00000064  0000 049A   48   Level1IRQ       dc.l Level1RamISR
00000068  0000 04AC   49   Level2IRQ       dc.l Level2RamISR
0000006C  0000 04BE   50   Level3IRQ       dc.l Level3RamISR
00000070  0000 04D0   51   Level4IRQ       dc.l Level4RamISR
00000074  0000 04E2   52   Level5IRQ       dc.l Level5RamISR
00000078  0000 05EC   53   Level6IRQ       dc.l Level6RamISR
0000007C  0000 05FE   54   Level7IRQ       dc.l Level7RamISR
                      55   *
                      56   *
00000080  0000 0610   57   Trap0           dc.l Trap0RamISR        ; User installed trap handler
00000084  0000 0622   58   Trap1           dc.l Trap1RamISR        ; User installed trap handler
00000088  0000 0634   59   Trap2           dc.l Trap2RamISR        ; User installed trap handler
0000008C  0000 0646   60   Trap3           dc.l Trap3RamISR        ; User installed trap handler
00000090  0000 0658   61   Trap4           dc.l Trap4RamISR        ; User installed trap handler
00000094  0000 066A   62   Trap5           dc.l Trap5RamISR        ; User installed trap handler
00000098  0000 067C   63   Trap6           dc.l Trap6RamISR        ; User installed trap handler
0000009C  0000 068E   64   Trap7           dc.l Trap7RamISR        ; User installed trap handler
000000A0  0000 06A0   65   Trap8           dc.l Trap8RamISR        ; User installed trap handler
000000A4  0000 06B2   66   Trap9           dc.l Trap9RamISR        ; User installed trap handler
000000A8  0000 06C4   67   Trap10          dc.l Trap10RamISR       ; User installed trap handler
000000AC  0000 06D6   68   Trap11          dc.l Trap11RamISR       ; User installed trap handler
000000B0  0000 06E8   69   Trap12          dc.l Trap12RamISR       ; User installed trap handler
000000B4  0000 06FA   70   Trap13          dc.l Trap13RamISR       ; User installed trap handler
000000B8  0000 070C   71   Trap14          dc.l Trap14RamISR       ; User installed trap handler
000000BC  0000 07FC   72   Trap15          dc.l Trap15RamISR       ; User installed trap handler
                      73   
                      74   *
                      75   * Other vectors 64-255 are users vectors for autovectored IO device (not implemented in TG68)
                      76   *
                      77   
00000400              78                   org       $00000400
                      79   
00000400  46FC 2700   80   start:          move.w     #$2700,SR             set interrupts to disable until later
                      81   
                      82   *************************************************************************************
                      83   ** add some 68000 instruction to read and write to memory, IO etc. This doesn't do anything
                      84   ** important, it just creates read and write bus cycles to specific addresses which
                      85   ** help with debugging hardware in Quartus simulations
                      86   **************************************************************************************
                      87   
                      88                   ; perform some dummy read/write of 32 bit values to memory to see waveforms during a simulation
                      89   
00000404  23FC 1122   90                   move.l     #$11223344,$08060000 write 32 bits, to memory
00000408  3344 0806 
0000040C  0000      
0000040E  2039 0806   91                   move.l     $08060000,d0         read 32 bits back
00000412  0000      
00000414  13FC 0000   92                   move.b     #$00,$00400000         write to the output ports
00000418  0040 0000 
0000041C  13FC 0000   93                   move.b     #$00,$00400002         write to the output ports
00000420  0040 0002 
00000424  13FC 0000   94                   move.b     #$00,$00400004         write to the output ports
00000428  0040 0004 
0000042C  13FC 0000   95                   move.b     #$00,$00400006         write to the output ports
00000430  0040 0006 
00000434  13FC 0000   96                   move.b     #$00,$00400008         write to the output ports
00000438  0040 0008 
0000043C  13FC 0000   97                   move.b     #$00,$00400010         write to the hex display ports
00000440  0040 0010 
00000444  13FC 0000   98                   move.b     #$00,$00400012         write to the hex display ports
00000448  0040 0012 
0000044C  13FC 0000   99                   move.b     #$00,$00400014         write to the hex display ports
00000450  0040 0014 
00000454  13FC 0000  100                   move.b     #0,$00400020         write to the LCD
00000458  0040 0020 
0000045C  13FC 0000  101                   move.b     #0,$00400022         write to the LCD
00000460  0040 0022 
00000464  13FC 0000  102                   move.b     #0,$00400030         write to the Timer1 Data
00000468  0040 0030 
0000046C  13FC 0000  103                   move.b     #0,$00400032         write to the Timer1 Control
00000470  0040 0032 
                     104   
                     105                   ; some important initialisation do not modify
00000474  23FC FFFF  106                   move.l    #-1,__ungetbuf  ; unget-buffer for keyboard input
00000478  FFFF 0B00 
0000047C  00C0      
0000047E  23FC 0000  107                   move.l    #0,__allocp     ; pointer to allocated memory for malloc-function
00000482  0000 0B00 
00000486  00C4      
00000488  23FC 0B00  108                   move.l    #heap,__heap    ; pointer to free memory
0000048C  00C4 0B00 
00000490  00C4      
                     109   
                     110   
                     111   mainloop        jsr       _main
********  **** ****  Error: Undefined or illegal symbol
00000498  60F8       112                   bra       mainloop
                     113   
                     114   *********************************************************************************************************
                     115   * Code to call Ram Based Interrupt handler and other exeception handler code
                     116   *********************************************************************************************************
0000049A  48E7 FFFE  117   Level1RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000049E  2079 0B00  118                   move.l    VL1IRQ,a0               get ram based address into a0
000004A2  0064      
000004A4  4E90       119                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004A6  4CDF 7FFF  120                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004AA  4E73       121                   rte
000004AC  48E7 FFFE  122   Level2RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004B0  2079 0B00  123                   move.l    VL2IRQ,a0               get ram based address into a0
000004B4  0068      
000004B6  4E90       124                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004B8  4CDF 7FFF  125                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004BC  4E73       126                   rte
000004BE  48E7 FFFE  127   Level3RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004C2  2079 0B00  128                   move.l    VL3IRQ,a0               get ram based address into a0
000004C6  006C      
000004C8  4E90       129                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004CA  4CDF 7FFF  130                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004CE  4E73       131                   rte
000004D0  48E7 FFFE  132   Level4RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000004D4  2079 0B00  133                   move.l    VL4IRQ,a0               get ram based address into a0
000004D8  0070      
000004DA  4E90       134                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000004DC  4CDF 7FFF  135                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000004E0  4E73       136                   rte
                     137   
                     138   * Trace trap Handler
                     139   
                     140   Level5RamISR
                     141   *
                     142   **         Copy 68000 registers from debug monitor Variables,
                     143   *
                     144   *
                     145                   move.l    #1,_Trace              switch on Trace Mode
********  **** ****  Error: Undefined or illegal symbol
000004EC  13FC 0000  146                   move.b    #$0,$0040000A          turn off a trace exception so we don't when generate a trace when disassembling instruction in the register dump (disassembling causes access to use program)
000004F0  0040 000A 
                     147                   move.w    (sp)+,_SR              get at the users status register pointed to by stack pointer and copy
********  **** ****  Error: Undefined or illegal symbol
                     148                   move.l    (sp)+,_PC              get at the users program counter and copy
********  **** ****  Error: Undefined or illegal symbol
                     149   *
                     150                   move.l    SP,_SSP                copy system stack pointer to debug monitor variable
********  **** ****  Error: Undefined or illegal symbol
                     151                   move.l    d0,_d0
********  **** ****  Error: Undefined or illegal symbol
                     152                   move.l    d1,_d1
********  **** ****  Error: Undefined or illegal symbol
                     153                   move.l    d2,_d2
********  **** ****  Error: Undefined or illegal symbol
                     154                   move.l    d3,_d3
********  **** ****  Error: Undefined or illegal symbol
                     155                   move.l    d4,_d4
********  **** ****  Error: Undefined or illegal symbol
                     156                   move.l    d5,_d5
********  **** ****  Error: Undefined or illegal symbol
                     157                   move.l    d6,_d6
********  **** ****  Error: Undefined or illegal symbol
                     158                   move.l    d7,_d7
********  **** ****  Error: Undefined or illegal symbol
                     159   *
                     160                   move.l    a0,_a0
********  **** ****  Error: Undefined or illegal symbol
                     161                   move.l    a1,_a1
********  **** ****  Error: Undefined or illegal symbol
                     162                   move.l    a2,_a2
********  **** ****  Error: Undefined or illegal symbol
                     163                   move.l    a3,_a3
********  **** ****  Error: Undefined or illegal symbol
                     164                   move.l    a4,_a4
********  **** ****  Error: Undefined or illegal symbol
                     165                   move.l    a5,_a5
********  **** ****  Error: Undefined or illegal symbol
                     166                   move.l    a6,_a6
********  **** ****  Error: Undefined or illegal symbol
00000560  4E68       167                   move.l    usp,a0
                     168                   move.l    a0,_USP
********  **** ****  Error: Undefined or illegal symbol
                     169   *
00000568  2079 0B00  170                   move.l    VL5IRQ,a0              get ram based address into a0, trace exception for next instruction will be generated in Menu SPACE command
0000056C  0074      
0000056E  4E90       171                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     172   
                     173   ** After trace, reload 68000 registers with new values before continuing
                     174   
                     175                   move.l   _d0,d0
********  **** ****  Error: Undefined or illegal symbol
                     176                   move.l   _d1,d1
********  **** ****  Error: Undefined or illegal symbol
                     177                   move.l   _d2,d2
********  **** ****  Error: Undefined or illegal symbol
                     178                   move.l   _d3,d3
********  **** ****  Error: Undefined or illegal symbol
                     179                   move.l   _d4,d4
********  **** ****  Error: Undefined or illegal symbol
                     180                   move.l   _d5,d5
********  **** ****  Error: Undefined or illegal symbol
                     181                   move.l   _d6,d6
********  **** ****  Error: Undefined or illegal symbol
                     182                   move.l   _d7,d7
********  **** ****  Error: Undefined or illegal symbol
                     183   
                     184                   move.l   _USP,a0
********  **** ****  Error: Undefined or illegal symbol
000005A6  4E60       185                   move.l   a0,USP                     load user stack pointer
                     186                   move.l   _a0,a0
********  **** ****  Error: Undefined or illegal symbol
                     187                   move.l   _a1,a1
********  **** ****  Error: Undefined or illegal symbol
                     188                   move.l   _a2,a2
********  **** ****  Error: Undefined or illegal symbol
                     189                   move.l   _a3,a3
********  **** ****  Error: Undefined or illegal symbol
                     190                   move.l   _a4,a4
********  **** ****  Error: Undefined or illegal symbol
                     191                   move.l   _a5,a5
********  **** ****  Error: Undefined or illegal symbol
                     192                   move.l   _a6,a6
********  **** ****  Error: Undefined or illegal symbol
                     193   
                     194                   move.l   _SSP,sp
********  **** ****  Error: Undefined or illegal symbol
                     195                   move.l   _PC,-(sp)
********  **** ****  Error: Undefined or illegal symbol
                     196                   move.w   _SR,-(sp)
********  **** ****  Error: Undefined or illegal symbol
000005E4  11F8 0074  197                   move.b    $00000074,$0	          read trace exception vector after accessing disassembly to reset the trace request causes by disassembling program above
000005E8  0000      
000005EA  4E73       198                   rte
                     199   
                     200   * address trap handler
                     201   
000005EC  48E7 FFFE  202   Level6RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000005F0  2079 0B00  203                   move.l    VL6IRQ,a0               get ram based address into a0
000005F4  0078      
000005F6  4E90       204                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
000005F8  4CDF 7FFF  205                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000005FC  4E73       206                   rte
                     207   
000005FE  48E7 FFFE  208   Level7RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000602  2079 0B00  209                   move.l    VL7IRQ,a0               get ram based address into a0
00000606  007C      
00000608  4E90       210                   jsr       0(a0)                   jump to the subroutine that is the interrupt handler, using ram based address
0000060A  4CDF 7FFF  211                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000060E  4E73       212                   rte
                     213   
                     214   
                     215   ********************************************************************************************************
                     216   * Ram based Trap handler and other exeception handler code
                     217   *********************************************************************************************************
                     218   
00000610  48E7 FFFE  219   Trap0RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000614  2079 0B00  220                   move.l    VTrap0,a0                get ram based address into a0
00000618  0080      
0000061A  4E90       221                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000061C  4CDF 7FFF  222                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000620  4E73       223                   rte
                     224   
00000622  48E7 FFFE  225   Trap1RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000626  2079 0B00  226                   move.l    VTrap1,a0                get ram based address into a0
0000062A  0084      
0000062C  4E90       227                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000062E  4CDF 7FFF  228                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000632  4E73       229                   rte
                     230   
00000634  48E7 FFFE  231   Trap2RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000638  2079 0B00  232                   move.l    VTrap2,a0                get ram based address into a0
0000063C  0088      
0000063E  4E90       233                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000640  4CDF 7FFF  234                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000644  4E73       235                   rte
                     236   
00000646  48E7 FFFE  237   Trap3RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000064A  2079 0B00  238                   move.l    VTrap3,a0                get ram based address into a0
0000064E  008C      
00000650  4E90       239                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000652  4CDF 7FFF  240                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000656  4E73       241                   rte
                     242   
00000658  48E7 FFFE  243   Trap4RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000065C  2079 0B00  244                   move.l    VTrap4,a0                get ram based address into a0
00000660  0090      
00000662  4E90       245                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000664  4CDF 7FFF  246                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000668  4E73       247                   rte
                     248   
0000066A  48E7 FFFE  249   Trap5RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000066E  2079 0B00  250                   move.l    VTrap5,a0                get ram based address into a0
00000672  0094      
00000674  4E90       251                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000676  4CDF 7FFF  252                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000067A  4E73       253                   rte
                     254   
0000067C  48E7 FFFE  255   Trap6RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000680  2079 0B00  256                   move.l    VTrap6,a0                get ram based address into a0
00000684  0098      
00000686  4E90       257                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000688  4CDF 7FFF  258                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000068C  4E73       259                   rte
                     260   
0000068E  48E7 FFFE  261   Trap7RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000692  2079 0B00  262                   move.l    VTrap7,a0                get ram based address into a0
00000696  009C      
00000698  4E90       263                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000069A  4CDF 7FFF  264                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000069E  4E73       265                   rte
                     266   
000006A0  48E7 FFFE  267   Trap8RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006A4  2079 0B00  268                   move.l    VTrap8,a0                get ram based address into a0
000006A8  00A0      
000006AA  4E90       269                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006AC  4CDF 7FFF  270                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006B0  4E73       271                   rte
                     272   
000006B2  48E7 FFFE  273   Trap9RamISR     movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006B6  2079 0B00  274                   move.l    VTrap9,a0                get ram based address into a0
000006BA  00A4      
000006BC  4E90       275                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006BE  4CDF 7FFF  276                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006C2  4E73       277                   rte
                     278   
000006C4  48E7 FFFE  279   Trap10RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006C8  2079 0B00  280                   move.l    VTrap10,a0                get ram based address into a0
000006CC  00A8      
000006CE  4E90       281                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006D0  4CDF 7FFF  282                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006D4  4E73       283                   rte
                     284   
000006D6  48E7 FFFE  285   Trap11RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006DA  2079 0B00  286                   move.l    VTrap11,a0                get ram based address into a0
000006DE  00AC      
000006E0  4E90       287                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006E2  4CDF 7FFF  288                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006E6  4E73       289                   rte
                     290   
000006E8  48E7 FFFE  291   Trap12RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006EC  2079 0B00  292                   move.l    VTrap12,a0                get ram based address into a0
000006F0  00B0      
000006F2  4E90       293                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000006F4  4CDF 7FFF  294                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000006F8  4E73       295                   rte
                     296   
000006FA  48E7 FFFE  297   Trap13RamISR    movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000006FE  2079 0B00  298                   move.l    VTrap13,a0                get ram based address into a0
00000702  00B4      
00000704  4E90       299                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000706  4CDF 7FFF  300                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000070A  4E73       301                   rte
                     302   
                     303   Trap14RamISR    ;Break Point Handler
                     304   *
                     305   **         Copy 68000 registers from debug monitor Variables
                     306   *
                     307                   move.l    #1,_Trace      switch on Trace Mode
********  **** ****  Error: Undefined or illegal symbol
                     308                   move.w    (sp)+,_SR       get at the users status register pointed to by stack pointer and copy
********  **** ****  Error: Undefined or illegal symbol
                     309                   move.l    (sp)+,_PC      get at the users program counter and copy
********  **** ****  Error: Undefined or illegal symbol
                     310   *
                     311                   move.l    d0,_d0
********  **** ****  Error: Undefined or illegal symbol
                     312                   move.l    d1,_d1
********  **** ****  Error: Undefined or illegal symbol
                     313                   move.l    d2,_d2
********  **** ****  Error: Undefined or illegal symbol
                     314                   move.l    d3,_d3
********  **** ****  Error: Undefined or illegal symbol
                     315                   move.l    d4,_d4
********  **** ****  Error: Undefined or illegal symbol
                     316                   move.l    d5,_d5
********  **** ****  Error: Undefined or illegal symbol
                     317                   move.l    d6,_d6
********  **** ****  Error: Undefined or illegal symbol
                     318                   move.l    d7,_d7
********  **** ****  Error: Undefined or illegal symbol
                     319   *
                     320                   move.l    a0,_a0
********  **** ****  Error: Undefined or illegal symbol
                     321                   move.l    a1,_a1
********  **** ****  Error: Undefined or illegal symbol
                     322                   move.l    a2,_a2
********  **** ****  Error: Undefined or illegal symbol
                     323                   move.l    a3,_a3
********  **** ****  Error: Undefined or illegal symbol
                     324                   move.l    a4,_a4
********  **** ****  Error: Undefined or illegal symbol
                     325                   move.l    a5,_a5
********  **** ****  Error: Undefined or illegal symbol
                     326                   move.l    a6,_a6
********  **** ****  Error: Undefined or illegal symbol
0000077C  4E68       327                   move.l    USP,a0
                     328                   move.l    a0,_USP
********  **** ****  Error: Undefined or illegal symbol
                     329   *
00000784  2079 0B00  330                   move.l    VTrap14,a0             get ram based address into a0
00000788  00B8      
0000078A  4E90       331                   jsr       0(a0)                  jump to the subroutine that is the trap handler, using ram based address
                     332   
                     333   ** After breakpoint reload 68000 registers with new values before continuing
                     334   
                     335   *                move.b    #$ff,$0040000A     generate a trace exception for the next instruction
                     336                   move.l   _d0,d0
********  **** ****  Error: Undefined or illegal symbol
                     337                   move.l   _d1,d1
********  **** ****  Error: Undefined or illegal symbol
                     338                   move.l   _d2,d2
********  **** ****  Error: Undefined or illegal symbol
                     339                   move.l   _d3,d3
********  **** ****  Error: Undefined or illegal symbol
                     340                   move.l   _d4,d4
********  **** ****  Error: Undefined or illegal symbol
                     341                   move.l   _d5,d5
********  **** ****  Error: Undefined or illegal symbol
                     342                   move.l   _d6,d6
********  **** ****  Error: Undefined or illegal symbol
                     343                   move.l   _d7,d7
********  **** ****  Error: Undefined or illegal symbol
                     344   
                     345                   move.l   _USP,a0
********  **** ****  Error: Undefined or illegal symbol
000007C2  4E60       346                   move.l   a0,USP        load user stack pointer A7
                     347                   move.l   _a0,a0
********  **** ****  Error: Undefined or illegal symbol
                     348                   move.l   _a1,a1
********  **** ****  Error: Undefined or illegal symbol
                     349                   move.l   _a2,a2
********  **** ****  Error: Undefined or illegal symbol
                     350                   move.l   _a3,a3
********  **** ****  Error: Undefined or illegal symbol
                     351                   move.l   _a4,a4
********  **** ****  Error: Undefined or illegal symbol
                     352                   move.l   _a5,a5
********  **** ****  Error: Undefined or illegal symbol
                     353                   move.l   _a6,a6
********  **** ****  Error: Undefined or illegal symbol
                     354   
                     355                   move.l   _PC,-(sp)
********  **** ****  Error: Undefined or illegal symbol
                     356                   move.w   _SR,-(sp)
********  **** ****  Error: Undefined or illegal symbol
000007FA  4E73       357                   rte
                     358   
                     359   Trap15RamISR    jmp     _CallDebugMonitor
********  **** ****  Error: Undefined or illegal symbol
                     360   *                movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
                     361   *                move.l    VTrap15,a0                get ram based address into a0
                     362   *                jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
                     363   *                movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
                     364   *                rte
                     365   
                     366   *********************************************************************************************************
                     367   *Default exception handler for everything without a specific handler
                     368   *********************************************************************************************************
                     369   
                     370   *
                     371   **              Jump here for each unhandled exception
                     372   **              If you need to, MAKE SURE YOU SAVE ALL IMPORTANT REGISTERS AND RESTORE THEM BEFORE RETURNING (IF APPROPRIATE)
                     373   *
                     374   
00000802  48E7 FFFE  375   E_BErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000806  2079 0B00  376                   move.l    VBusError,a0            get ram based address into a0
0000080A  0008      
0000080C  4E90       377                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000080E  4CDF 7FFF  378                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000812  4E73       379                   rte
00000814  48E7 FFFE  380   E_AErro         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000818  2079 0B00  381                   move.l    VAddressError,a0        get ram based address into a0
0000081C  000C      
0000081E  4E90       382                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000820  4CDF 7FFF  383                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000824  4E73       384                   rte
00000826  48E7 FFFE  385   E_IInst         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000082A  2079 0B00  386                   move.l    VIllegalInstr,a0        get ram based address into a0
0000082E  0010      
00000830  4E90       387                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000832  4CDF 7FFF  388                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000836  4E73       389                   rte
00000838  48E7 FFFE  390   E_DZero         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000083C  2079 0B00  391                   move.l    VDividebyZero,a0        get ram based address into a0
00000840  0014      
00000842  4E90       392                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000844  4CDF 7FFF  393                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000848  4E73       394                   rte
0000084A  48E7 FFFE  395   E_Check         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
0000084E  2079 0B00  396                   move.l    VCheck,a0               get ram based address into a0
00000852  0018      
00000854  4E90       397                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000856  4CDF 7FFF  398                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000085A  4E73       399                   rte
0000085C  48E7 FFFE  400   E_Trapv         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000860  2079 0B00  401                   move.l    VTrapV,a0               get ram based address into a0
00000864  001C      
00000866  4E90       402                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
00000868  4CDF 7FFF  403                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000086C  4E73       404                   rte
0000086E  48E7 FFFE  405   E_Priv          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000872  2079 0B00  406                   move.l    VPrivilege,a0           get ram based address into a0
00000876  0020      
00000878  4E90       407                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000087A  4CDF 7FFF  408                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
0000087E  4E73       409                   rte
00000880  48E7 FFFE  410   E_Trace         movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000884  2079 0B00  411                   move.l    VTrace,a0               get ram based address into a0
00000888  0024      
0000088A  4E90       412                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000088C  4CDF 7FFF  413                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
00000890  4E73       414                   rte
00000892  48E7 FFFE  415   E_1010          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
00000896  2079 0B00  416                   move.l    VLine1010emul,a0        get ram based address into a0
0000089A  0028      
0000089C  4E90       417                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
0000089E  4CDF 7FFF  418                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008A2  4E73       419                   rte
000008A4  48E7 FFFE  420   E_1111          movem.l   d0-d7/a0-a6,-(SP)       save everything not automatically saved
000008A8  2079 0B00  421                   move.l    VLine1111emul,a0        get ram based address into a0
000008AC  002C      
000008AE  4E90       422                   jsr       0(a0)                   jump to the subroutine that is the trap handler, using ram based address
000008B0  4CDF 7FFF  423                   movem.l   (SP)+,d0-d7/a0-a6       pull eveything off the stack
000008B4  4E73       424                   rte
                     425   E_Unnas1
                     426   E_Unnas2
                     427   E_Unnas3
                     428   E_UnitI
                     429   E_Unnas4
                     430   E_Unnas5
                     431   E_Unnas6
                     432   E_Unnas7
                     433   E_Unnas8
                     434   E_Unnas9
                     435   E_Unnas10
                     436   E_Unnas11
                     437   E_Spuri
000008B6  60FE       438   _stop            bra _stop                         stop
                     439   ***************************************************************************************************
                     440   * Go() function in debug monitor
                     441   ***************************************************************************************************
                     442   _go
                     443                   move.l   _SSP,a7        load system stack pointer (remember we are in supervisor mode when running this so a7 is the System stack pointer)
********  **** ****  Error: Undefined or illegal symbol
                     444                   move.l   _PC,-(sp)      copy debug monitor PC variable to the stack
********  **** ****  Error: Undefined or illegal symbol
                     445                   move.w   _SR,-(sp)      copy debug monitor status reg to the stack
********  **** ****  Error: Undefined or illegal symbol
                     446   
000008CA  1038 0078  447                   move.b   $00000078,d0  remove any spurious address exception arising after power on
                     448                   move.l   _d0,d0
********  **** ****  Error: Undefined or illegal symbol
                     449                   move.l   _d1,d1
********  **** ****  Error: Undefined or illegal symbol
                     450                   move.l   _d2,d2
********  **** ****  Error: Undefined or illegal symbol
                     451                   move.l   _d3,d3
********  **** ****  Error: Undefined or illegal symbol
                     452                   move.l   _d4,d4
********  **** ****  Error: Undefined or illegal symbol
                     453                   move.l   _d5,d5
********  **** ****  Error: Undefined or illegal symbol
                     454                   move.l   _d6,d6
********  **** ****  Error: Undefined or illegal symbol
                     455                   move.l   _d7,d7
********  **** ****  Error: Undefined or illegal symbol
                     456   
                     457                   move.l   _USP,a0
********  **** ****  Error: Undefined or illegal symbol
00000904  4E60       458                   move.l   a0,USP        load user stack pointer (remember we are in supervisor mode when running this, so a7 is the System stack pointer)
                     459                   move.l   _a0,a0
********  **** ****  Error: Undefined or illegal symbol
                     460                   move.l   _a1,a1
********  **** ****  Error: Undefined or illegal symbol
                     461                   move.l   _a2,a2
********  **** ****  Error: Undefined or illegal symbol
                     462                   move.l   _a3,a3
********  **** ****  Error: Undefined or illegal symbol
                     463                   move.l   _a4,a4
********  **** ****  Error: Undefined or illegal symbol
                     464                   move.l   _a5,a5
********  **** ****  Error: Undefined or illegal symbol
                     465                   move.l   _a6,a6
********  **** ****  Error: Undefined or illegal symbol
00000930  4E73       466                   rte                    load the status reg and PC from the stack and commence running
                     467                                          *used to be rte but this didn't load the status byte
                     468   
                     469                   section const
                     470   
                     471                   section   data                  for initialised data
00000932             472                   align
          0000 0932  473   DataStart       equ       *
                     474   
                     475   *********************************************************************************************************
                     476   * Data Section for Initialised Data - these will be placed in rom as constants and have to be copied
                     477   * to ram as part of the CStart routine in this file
                     478   *********************************************************************************************************
                     479   
                     480                   section   bss                   for uninitialised data
00000932             481                   align
          0000 0932  482   DataEnd         equ     *                       this label will equate to the address of the last byte of global variable in it
                     483   
                     484   *********************************************************************************************************
                     485   * Section for Uninitialised Data held in ROM as constants
                     486   *********************************************************************************************************
                     487   
0B000000             488                   org     RamVectorTable          Ram based vector table must be stored here otherwise InstallException Handler will not work
          0000 0000  489   DataLength      equ     DataEnd-DataStart       length of data needed to copy to Ram on bootup
                     490   
                     491   
0B000000             492   bss             org       bss
                     493   
                     494   *********************************************************************************************************
                     495   * Build a ram based vector table for interrupts so we can install our own Exception Handlers in C code at run time
                     496   * install the exception handler using the C function InstallExceptionHandler()
                     497   *********************************************************************************************************
                     498   
                     499   
                     500   
0B000000             501   VInitialSP       ds.l    1      dummy as we can't really install a handler for this
0B000004             502   VInitialPC       ds.l    1      dummy as we can't reallin install a handler for this
0B000008             503   VBusError        ds.l    1      storage for address of Bus Error Handler
0B00000C             504   VAddressError    ds.l    1      storage for address of Address Error Handler
0B000010             505   VIllegalInstr    ds.l    1      storage for address of Illegal Instruction handler
0B000014             506   VDividebyZero    ds.l    1      storage for address of divide by zero handler
0B000018             507   VCheck           ds.l    1      ditto
0B00001C             508   VTrapV           ds.l    1      ditto
0B000020             509   VPrivilege       ds.l    1      ditto
0B000024             510   VTrace           ds.l    1
0B000028             511   VLine1010emul    ds.l    1
0B00002C             512   VLine1111emul    ds.l    1
0B000030             513   VUnassigned1     ds.l    1
0B000034             514   VUnassigned2     ds.l    1
0B000038             515   VUnassigned3     ds.l    1
0B00003C             516   VUninit_IRQ      ds.l    1
0B000040             517   VUnassigned4     ds.l    1
0B000044             518   VUnassigned5     ds.l    1
0B000048             519   VUnassigned6     ds.l    1
0B00004C             520   VUnassigned7     ds.l    1
0B000050             521   VUnassigned8     ds.l    1
0B000054             522   VUnassigned9     ds.l    1
0B000058             523   VUnassigned10    ds.l    1
0B00005C             524   VUnassigned11    ds.l    1
0B000060             525   VSpuriousIRQ     ds.l    1
                     526   
                     527   * Interrupt handlers Vector 25-31
0B000064             528   VL1IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000068             529   VL2IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00006C             530   VL3IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000070             531   VL4IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000074             532   VL5IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000078             533   VL6IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00007C             534   VL7IRQ           ds.l    1       storage for 4 byte address of IRQ handler in your C program - install the handler using the C function InstallExceptionHandler()
                     535   
                     536   * Trap Handler vectors 32-47
0B000080             537   VTrap0           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000084             538   VTrap1           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000088             539   VTrap2           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00008C             540   VTrap3           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000090             541   VTrap4           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000094             542   VTrap5           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B000098             543   VTrap6           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B00009C             544   VTrap7           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A0             545   VTrap8           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A4             546   VTrap9           ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000A8             547   VTrap10          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000AC             548   VTrap11          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B0             549   VTrap12          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B4             550   VTrap13          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000B8             551   VTrap14          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
0B0000BC             552   VTrap15          ds.l   1        storage for 4 byte address of TRAP handler in your C program - install the handler using the C function InstallExceptionHandler()
                     553   
                     554   * the remaining exceptions are unassigned in the 68000 so no need to allocate storage for them here
                     555   
                     556   ***********************************************************************************************************
                     557   * Other Variables
                     558   ***********************************************************************************************************
                     559   *__DebugA5       ds.l    1
                     560   *__UserA5        ds.l    1
                     561   
                     562   ***********************************************************************************************************
0B0000C0             563   __ungetbuf:     ds.l    1       ; ungetbuffer for stdio functions
0B0000C4             564   __allocp:       ds.l    0       ; start of allocation units
0B0000C4             565   __heap:         ds.l    0       ; pointers for malloc functions
                     566   
                     567   *__himem:       ds.l    himem            ; highest memory location + 1
                     568   *__stklen:      ds.l    stklen           ; default stack size
                     569   
                     570   *********************************************************************************************************
                     571   * Section for Heap
                     572   *********************************************************************************************************
                     573   
                     574                   section   heap           area for dynamic memory allocation e.g. malloc() etc
0B0000C4             575                   align
          0B00 00C4  576   bssEnd          equ *                   end of storage space for unitialised variables
                     577   *                                       we have to copy all initialised variable from rom to here at startup
          0B00 00C4  578   heap   equ       *
0B0000C4             579                    align
          0000 0000

Assembly errors: 97
